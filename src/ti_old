[35m[Kactive.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K  if (c->hydro.ti_old_part > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K        "and [01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K        c->hydro.ti_old_part, c->hydro.ti_old_part * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K52[m[K[36m[K:[m[K  return (c->hydro.ti_old_part == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  if (c->grav.ti_old_part > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K70[m[K[36m[K:[m[K        "and [01;31m[Ke-[m[K>ti_current=%lld (t=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K        c->grav.ti_old_part, c->grav.ti_old_part * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K75[m[K[36m[K:[m[K  return (c->grav.ti_old_part == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K90[m[K[36m[K:[m[K  if (c->stars.ti_old_part > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K        "and [01;31m[Ke-[m[K>ti_current=%lld (t=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K94[m[K[36m[K:[m[K        c->stars.ti_old_part, c->stars.ti_old_part * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K98[m[K[36m[K:[m[K  return (c->stars.ti_old_part == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K  if (c->sinks.ti_old_part > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K116[m[K[36m[K:[m[K        "and [01;31m[Ke-[m[K>ti_current=%lld (t=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K        c->sinks.ti_old_part, c->sinks.ti_old_part * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K118[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K  return (c->sinks.ti_old_part == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K  if (c->black_holes.ti_old_part > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K139[m[K[36m[K:[m[K        "and [01;31m[Ke-[m[K>ti_current=%lld (t=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K        c->black_holes.ti_old_part, c->black_holes.ti_old_part * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K141[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K144[m[K[36m[K:[m[K  return (c->black_holes.ti_old_part == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K * @brief Does a cell contain any particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K177[m[K[36m[K:[m[K  if (c->hydro.ti_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e) c->nodeID=%d",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K181[m[K[36m[K:[m[K        c->hydro.ti_end_min, c->hydro.ti_end_min * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a, c->nodeID);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K  return (c->hydro.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K189[m[K[36m[K:[m[K * @brief Does a cell contain any particle finishing their RT tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K  if (c->hydro.ti_rt_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K        "cell %lld in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_rt_end_min=%lld (t=%e) "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K206[m[K[36m[K:[m[K        /* "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_rt_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e) c->nodeID=%d",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K        c->hydro.ti_rt_end_min * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a, c->nodeID);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K214[m[K[36m[K:[m[K  return (c->hydro.ti_rt_end_min == [01;31m[Ke-[m[K>ti_current_subcycle);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K218[m[K[36m[K:[m[K * @brief Does a cell contain any g-particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K228[m[K[36m[K:[m[K  if (c->grav.ti_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K232[m[K[36m[K:[m[K        c->grav.ti_end_min, c->grav.ti_end_min * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K  return (c->grav.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K249[m[K[36m[K:[m[K  return (c->grav.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K253[m[K[36m[K:[m[K * @brief Does a cell contain any s-particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K  if (c->stars.ti_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K265[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K266[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K267[m[K[36m[K:[m[K        c->stars.ti_end_min, c->stars.ti_end_min * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K  return (c->stars.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K * @brief Does a cell contain any sink-particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K  if (c->sinks.ti_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K288[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K289[m[K[36m[K:[m[K        c->sinks.ti_end_min, c->sinks.ti_end_min * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K  return (c->sinks.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K297[m[K[36m[K:[m[K * @brief Does a cell contain any s-particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K317[m[K[36m[K:[m[K * @brief Does a cell contain any b-particle finishing their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K327[m[K[36m[K:[m[K  if (c->black_holes.ti_end_min < [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_end_min=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K330[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K        c->black_holes.ti_end_min, c->black_holes.ti_end_min * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K332[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K335[m[K[36m[K:[m[K  return (c->black_holes.ti_end_min == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K339[m[K[36m[K:[m[K * @brief Is this particle finishing its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K352[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K        "particle in an impossible tim[01;31m[Ke-[m[Kzone! p->ti_end=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K357[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K373[m[K[36m[K:[m[K * @brief Is this particle finishing its RT tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K382[m[K[36m[K:[m[K  /* TODO Mladen: Using [01;31m[Ke-[m[K>max_active_bin leads to no errors here.
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K384[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin_subcycle;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K388[m[K[36m[K:[m[K  const integertime_t ti_current_subcycle = [01;31m[Ke-[m[K>ti_current_subcycle;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K        "particle in an impossible tim[01;31m[Ke-[m[Kzone! p->ti_end_subcycle=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current_subcycle=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K401[m[K[36m[K:[m[K * @brief Is this g-particle finishing its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K414[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K419[m[K[36m[K:[m[K        "g-particle in an impossible tim[01;31m[Ke-[m[Kzone! gp->ti_end=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K420[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K * @brief Is this s-particle finishing its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K437[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K441[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K446[m[K[36m[K:[m[K        "s-particle in an impossible tim[01;31m[Ke-[m[Kzone! sp->ti_end=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K447[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K455[m[K[36m[K:[m[K * @brief Is this sink-particle finishing its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K464[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K468[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K473[m[K[36m[K:[m[K        "sink-particle in an impossible tim[01;31m[Ke-[m[Kzone! bp->ti_end=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K474[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K482[m[K[36m[K:[m[K * @brief Is this b-particle finishing its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K495[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K500[m[K[36m[K:[m[K        "b-particle in an impossible tim[01;31m[Ke-[m[Kzone! bp->ti_end=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K501[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K571[m[K[36m[K:[m[K * @brief Does a cell contain any particle starting their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K581[m[K[36m[K:[m[K  if (c->hydro.ti_beg_max > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K583[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_beg_max=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K584[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K585[m[K[36m[K:[m[K        c->hydro.ti_beg_max, c->hydro.ti_beg_max * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K586[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K589[m[K[36m[K:[m[K  return (c->hydro.ti_beg_max == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K593[m[K[36m[K:[m[K * @brief Does a cell contain any g-particle starting their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K603[m[K[36m[K:[m[K  if (c->grav.ti_beg_max > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_beg_max=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K606[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K        c->grav.ti_beg_max, c->grav.ti_beg_max * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K608[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K611[m[K[36m[K:[m[K  return (c->grav.ti_beg_max == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K615[m[K[36m[K:[m[K * @brief Does a cell contain any s-particle starting their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K625[m[K[36m[K:[m[K  if (c->stars.ti_beg_max > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_beg_max=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K628[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K629[m[K[36m[K:[m[K        c->stars.ti_beg_max, c->stars.ti_beg_max * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K630[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K633[m[K[36m[K:[m[K  return (c->stars.ti_beg_max == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K637[m[K[36m[K:[m[K * @brief Does a cell contain any sink-particle starting their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K647[m[K[36m[K:[m[K  if (c->sinks.ti_beg_max > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K649[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_beg_max=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K650[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K651[m[K[36m[K:[m[K        c->sinks.ti_beg_max, c->sinks.ti_beg_max * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>ti_current,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K652[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K655[m[K[36m[K:[m[K  return (c->sinks.ti_beg_max == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K659[m[K[36m[K:[m[K * @brief Does a cell contain any b-particle starting their tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K669[m[K[36m[K:[m[K  if (c->black_holes.ti_beg_max > [01;31m[Ke-[m[K>ti_current)
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K671[m[K[36m[K:[m[K        "cell in an impossible tim[01;31m[Ke-[m[Kzone! c->ti_beg_max=%lld (t=%e) and "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K672[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld (t=%e, a=%e)",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K673[m[K[36m[K:[m[K        c->black_holes.ti_beg_max, c->black_holes.ti_beg_max * [01;31m[Ke-[m[K>time_base,
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K674[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base, [01;31m[Ke-[m[K>cosmology->a);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K677[m[K[36m[K:[m[K  return (c->black_holes.ti_beg_max == [01;31m[Ke-[m[K>ti_current);
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K681[m[K[36m[K:[m[K * @brief Is this particle starting its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K690[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K694[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K        "particle in an impossible tim[01;31m[Ke-[m[Kzone! p->ti_beg=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K709[m[K[36m[K:[m[K * @brief Is this g-particle starting its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K718[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K722[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K728[m[K[36m[K:[m[K        "g-particle in an impossible tim[01;31m[Ke-[m[Kzone! gp->ti_beg=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K729[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K737[m[K[36m[K:[m[K * @brief Is this s-particle starting its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K750[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K756[m[K[36m[K:[m[K        "s-particle in an impossible tim[01;31m[Ke-[m[Kzone! sp->ti_beg=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K * @brief Is this b-particle starting its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K774[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K778[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K784[m[K[36m[K:[m[K        "s-particle in an impossible tim[01;31m[Ke-[m[Kzone! bp->ti_beg=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K785[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K * @brief Is this sink-particle starting its tim[01;31m[Ke-[m[Kstep now ?
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K802[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K806[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K812[m[K[36m[K:[m[K        "sink-particle in an impossible tim[01;31m[Ke-[m[Kzone! sink->ti_beg=%lld "
[35m[Kactive.h[m[K[36m[K:[m[K[32m[K813[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld",
[35m[Kbarrier.h[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K * reset the barrier to state where it is ready to be r[01;31m[Ke-[m[Kused
[35m[Kbarrier.h[m[K[36m[K:[m[K[32m[K138[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Kinitialize the barrier */
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K191[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K192[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K193[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, h, ci_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K195[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K198[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K273[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K276[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K277[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K278[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K357[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K358[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K359[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K360[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K361[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K502[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K503[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K504[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K505[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, h, ci_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K506[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K507[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K508[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K509[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K510[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, rho, ci_cach[01;31m[Ke-[m[K>rho, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K511[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, grad_h, ci_cach[01;31m[Ke-[m[K>grad_h,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K513[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, pOrho2, ci_cach[01;31m[Ke-[m[K>pOrho2,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K515[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, balsara, ci_cach[01;31m[Ke-[m[K>balsara,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K517[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, soundspeed, ci_cach[01;31m[Ke-[m[K>soundspeed,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K649[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K650[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K651[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K652[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, h, ci_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K653[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K654[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K655[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K656[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K755[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, xj, cj_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K756[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, yj, cj_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, zj, cj_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, hj, cj_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, mj, cj_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vxj, cj_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K761[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vyj, cj_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K762[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vzj, cj_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K901[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K903[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K904[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, h, ci_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K905[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, m, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K906[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vx, ci_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K907[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vy, ci_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K908[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vz, ci_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, rho, ci_cach[01;31m[Ke-[m[K>rho, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K910[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, grad_h, ci_cach[01;31m[Ke-[m[K>grad_h,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K912[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, pOrho2, ci_cach[01;31m[Ke-[m[K>pOrho2,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K914[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, balsara, ci_cach[01;31m[Ke-[m[K>balsara,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, soundspeed, ci_cach[01;31m[Ke-[m[K>soundspeed,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K990[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, xj, cj_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K991[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, yj, cj_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K992[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, zj, cj_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K993[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, hj, cj_cach[01;31m[Ke-[m[K>h, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K994[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, mj, cj_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K995[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vxj, cj_cach[01;31m[Ke-[m[K>vx, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vyj, cj_cach[01;31m[Ke-[m[K>vy, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K997[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, vzj, cj_cach[01;31m[Ke-[m[K>vz, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K998[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, rhoj, cj_cach[01;31m[Ke-[m[K>rho, SWIFT_CACHE_ALIGNMENT);
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K999[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, grad_hj, cj_cach[01;31m[Ke-[m[K>grad_h,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K1001[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, pOrho2j, cj_cach[01;31m[Ke-[m[K>pOrho2,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K1003[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, balsaraj, cj_cach[01;31m[Ke-[m[K>balsara,
[35m[Kcache.h[m[K[36m[K:[m[K[32m[K1005[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, soundspeedj, cj_cach[01;31m[Ke-[m[K>soundspeed,
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[K * @brief Compute the inverse cube root of a singl[01;31m[Ke-[m[Kprecision floating-point
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K      9.99976591940035[01;31m[Ke-[m[K01f +
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K70[m[K[36m[K:[m[K      x * (-3.32901212909283[01;31m[Ke-[m[K01f +
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K           x * (2.24361110929912[01;31m[Ke-[m[K01f +
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K                x * (-1.88913279594895[01;31m[Ke-[m[K01f + x * 1.28384036492344[01;31m[Ke-[m[K01f)));
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K  static const float scale[3] = {8.90898718140339[01;31m[Ke-[m[K01f, 7.07106781186548[01;31m[Ke-[m[K01f,
[35m[Kcbrt.h[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K                                 5.61231024154687[01;31m[Ke-[m[K01f};
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K * @param data The current time on the integer tim[01;31m[Ke-[m[Kline
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K621[m[K[36m[K:[m[K    error("Cell in an incorrect tim[01;31m[Ke-[m[Kzone! c->hydro.ti_old=%lld ti_drift=%lld",
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K      error("part in an incorrect tim[01;31m[Ke-[m[Kzone! p->ti_drift=%lld ti_drift=%lld",
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K641[m[K[36m[K:[m[K * @param data The current time on the integer tim[01;31m[Ke-[m[Kline
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K656[m[K[36m[K:[m[K        "Cell in an incorrect tim[01;31m[Ke-[m[Kzone! c->grav.ti_old_part=%lld "
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K663[m[K[36m[K:[m[K      error("g-part in an incorrect tim[01;31m[Ke-[m[Kzone! gp->ti_drift=%lld ti_drift=%lld",
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K677[m[K[36m[K:[m[K * @param data The current time on the integer tim[01;31m[Ke-[m[Kline
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K692[m[K[36m[K:[m[K        "Cell in an incorrect tim[01;31m[Ke-[m[Kzone! c->sinks.ti_old_part=%lld "
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K          "sink-part in an incorrect tim[01;31m[Ke-[m[Kzone! sink->ti_drift=%lld "
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K * @param data The current time on the integer tim[01;31m[Ke-[m[Kline
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K730[m[K[36m[K:[m[K        "Cell in an incorrect tim[01;31m[Ke-[m[Kzone! c->stars.ti_old_part=%lld "
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K737[m[K[36m[K:[m[K      error("g-part in an incorrect tim[01;31m[Ke-[m[Kzone! gp->ti_drift=%lld ti_drift=%lld",
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K750[m[K[36m[K:[m[K * @param data The current time on the integer tim[01;31m[Ke-[m[Kline
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K        "Cell multipole in an incorrect tim[01;31m[Ke-[m[Kzone! "
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K847[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>CoM[0] = CoM[0] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K848[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>CoM[1] = CoM[1] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K849[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>CoM[2] = CoM[2] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K850[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[0] = vel[0] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K851[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[1] = vel[1] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K852[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[2] = vel[2] * mass_inv;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K855[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[0] = max_delta_vel[0];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K856[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[1] = max_delta_vel[1];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[2] = max_delta_vel[2];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K858[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[0] = min_delta_vel[0];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K859[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[1] = min_delta_vel[1];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K860[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[2] = min_delta_vel[2];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K868[m[K[36m[K:[m[K        const struct multipole *m = &cp->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K871[m[K[36m[K:[m[K        gravity_M2M(&temp, m, c->grav.multipol[01;31m[Ke-[m[K>CoM, cp->grav.multipol[01;31m[Ke-[m[K>CoM);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K872[m[K[36m[K:[m[K        gravity_multipole_add(&c->grav.multipol[01;31m[Ke-[m[K>m_pole, &temp);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K876[m[K[36m[K:[m[K            c->grav.multipol[01;31m[Ke-[m[K>CoM[0] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K            c->grav.multipol[01;31m[Ke-[m[K>CoM[1] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K880[m[K[36m[K:[m[K            c->grav.multipol[01;31m[Ke-[m[K>CoM[2] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K882[m[K[36m[K:[m[K        r_max = max(r_max, cp->grav.multipol[01;31m[Ke-[m[K>r_max + sqrt(r2));
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K886[m[K[36m[K:[m[K    const double dx = c->grav.multipol[01;31m[Ke-[m[K>CoM[0] > c->loc[0] + c->width[0] * 0.5
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K887[m[K[36m[K:[m[K                          ? c->grav.multipol[01;31m[Ke-[m[K>CoM[0] - c->loc[0]
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K888[m[K[36m[K:[m[K                          : c->loc[0] + c->width[0] - c->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K889[m[K[36m[K:[m[K    const double dy = c->grav.multipol[01;31m[Ke-[m[K>CoM[1] > c->loc[1] + c->width[1] * 0.5
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K890[m[K[36m[K:[m[K                          ? c->grav.multipol[01;31m[Ke-[m[K>CoM[1] - c->loc[1]
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K891[m[K[36m[K:[m[K                          : c->loc[1] + c->width[1] - c->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K892[m[K[36m[K:[m[K    const double dz = c->grav.multipol[01;31m[Ke-[m[K>CoM[2] > c->loc[2] + c->width[2] * 0.5
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K893[m[K[36m[K:[m[K                          ? c->grav.multipol[01;31m[Ke-[m[K>CoM[2] - c->loc[2]
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K894[m[K[36m[K:[m[K                          : c->loc[2] + c->width[2] - c->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K897[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>r_max = min(r_max, sqrt(dx * dx + dy * dy + dz * dz));
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K900[m[K[36m[K:[m[K    gravity_multipole_compute_power(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K908[m[K[36m[K:[m[K      gravity_multipole_compute_power(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K915[m[K[36m[K:[m[K      gravity_multipole_init(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[0] = c->loc[0] + c->width[0] * 0.5;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K917[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[1] = c->loc[1] + c->width[1] * 0.5;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K918[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[2] = c->loc[2] + c->width[2] * 0.5;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K919[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>r_max = 0.;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K924[m[K[36m[K:[m[K  c->grav.multipol[01;31m[Ke-[m[K>r_max_rebuild = c->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K925[m[K[36m[K:[m[K  c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[0] = c->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K926[m[K[36m[K:[m[K  c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[1] = c->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K927[m[K[36m[K:[m[K  c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[2] = c->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K952[m[K[36m[K:[m[K        M_000 += cp->grav.multipol[01;31m[Ke-[m[K>m_pole.M_000;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K955[m[K[36m[K:[m[K        num_gpart += cp->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart;
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K962[m[K[36m[K:[m[K    if (num_gpart != c->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart)
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K983[m[K[36m[K:[m[K  const double tolerance = 1[01;31m[Ke-[m[K3; /* Relative */
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K992[m[K[36m[K:[m[K    /* Brut[01;31m[Ke-[m[Kforce calculation */
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1003[m[K[36m[K:[m[K      gravity_multipole_print(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1008[m[K[36m[K:[m[K    if (!(1.1 * c->grav.multipol[01;31m[Ke-[m[K>r_max >= ma.r_max)) {
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1010[m[K[36m[K:[m[K            c->grav.multipol[01;31m[Ke-[m[K>r_max, ma.r_max);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1011[m[K[36m[K:[m[K    } else if (c->grav.multipol[01;31m[Ke-[m[K>r_max * c->grav.multipol[01;31m[Ke-[m[K>r_max >
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1013[m[K[36m[K:[m[K      error("r_max=%e larger than cell diagonal %e.", c->grav.multipol[01;31m[Ke-[m[K>r_max,
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1138[m[K[36m[K:[m[K  const int with_hydro = ([01;31m[Ke-[m[K>policy & engine_policy_hydro);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1139[m[K[36m[K:[m[K  const int with_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) ||
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1140[m[K[36m[K:[m[K                        ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1248[m[K[36m[K:[m[K * @brief Recursively checks that all particles in a cell have a tim[01;31m[Ke-[m[Kstep
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1258[m[K[36m[K:[m[K    error("Cell without assigned tim[01;31m[Ke-[m[Kstep");
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1268[m[K[36m[K:[m[K          error("Particle without assigned tim[01;31m[Ke-[m[Kbin");
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1307[m[K[36m[K:[m[K      /* Note that we use a < as the particle with the smallest tim[01;31m[Ke-[m[Kbin
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1416[m[K[36m[K:[m[K * @param use_rebuild_data Are we considering the data at the last tre[01;31m[Ke-[m[Kbuild
[35m[Kcell.c[m[K[36m[K:[m[K[32m[K1426[m[K[36m[K:[m[K  const struct gravity_props *props = [01;31m[Ke-[m[K>gravity_properties;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K158[m[K[36m[K:[m[K  if (c->stars.ti_old_part != [01;31m[Ke-[m[K>ti_current) error("Undrifted cell!");
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K        top->stars.ti_old_part != [01;31m[Ke-[m[K>ti_current) {
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K    atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K241[m[K[36m[K:[m[K    top2->stars.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K  top2->stars.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K259[m[K[36m[K:[m[K  /* Set it to the current tim[01;31m[Ke-[m[Kbin */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  sp->time_bin = [01;31m[Ke-[m[K>min_active_bin;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  sp->ti_drift = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K269[m[K[36m[K:[m[K  atomic_sub(&[01;31m[Ke-[m[K>s->nr_extra_sparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K  if (c->grav.ti_old_part != [01;31m[Ke-[m[K>ti_current) error("Undrifted cell!");
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K315[m[K[36m[K:[m[K        top->sinks.ti_old_part != [01;31m[Ke-[m[K>ti_current) {
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K336[m[K[36m[K:[m[K    atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K374[m[K[36m[K:[m[K    top2->sinks.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K377[m[K[36m[K:[m[K  top2->sinks.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K  /* Set it to the current tim[01;31m[Ke-[m[Kbin */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K  sp->time_bin = [01;31m[Ke-[m[K>min_active_bin;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K  sp->ti_drift = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K402[m[K[36m[K:[m[K  atomic_sub(&[01;31m[Ke-[m[K>s->nr_extra_sinks, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K  if (c->grav.ti_old_part != [01;31m[Ke-[m[K>ti_current) error("Undrifted cell!");
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K427[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K450[m[K[36m[K:[m[K        top->grav.ti_old_part != [01;31m[Ke-[m[K>ti_current) {
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K471[m[K[36m[K:[m[K    atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K513[m[K[36m[K:[m[K    top2->grav.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K516[m[K[36m[K:[m[K  top2->grav.ti_old_part = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K531[m[K[36m[K:[m[K  /* Set it to the current tim[01;31m[Ke-[m[Kbin */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K532[m[K[36m[K:[m[K  gp->time_bin = [01;31m[Ke-[m[K>min_active_bin;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K536[m[K[36m[K:[m[K  gp->ti_drift = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K541[m[K[36m[K:[m[K  atomic_sub(&[01;31m[Ke-[m[K>s->nr_extra_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K560[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K578[m[K[36m[K:[m[K  atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_parts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K    atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K601[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K608[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K617[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K  atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K635[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K649[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K651[m[K[36m[K:[m[K  atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_sparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K653[m[K[36m[K:[m[K    atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K674[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K688[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K690[m[K[36m[K:[m[K  atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_bparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K692[m[K[36m[K:[m[K    atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K712[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K726[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K728[m[K[36m[K:[m[K  atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_sinks, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K730[m[K[36m[K:[m[K    atomic_add(&[01;31m[Ke-[m[K>s->nr_inhibited_gparts, one);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K743[m[K[36m[K:[m[K * apart from the tim[01;31m[Ke-[m[Kbin and #gpart pointer.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K781[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K782[m[K[36m[K:[m[K  atomic_inc(&[01;31m[Ke-[m[K>s->nr_inhibited_parts);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K * apart from the tim[01;31m[Ke-[m[Kbin and #gpart pointer.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K807[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K830[m[K[36m[K:[m[K  /* Update the spac[01;31m[Ke-[m[Kwide counters */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K  atomic_inc(&[01;31m[Ke-[m[K>s->nr_inhibited_sparts);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K842[m[K[36m[K:[m[K * apart from the tim[01;31m[Ke-[m[Kbin and #gpart pointer.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K852[m[K[36m[K:[m[K * tim[01;31m[Ke-[m[Kbin as the original #part.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K881[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink things */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K883[m[K[36m[K:[m[K  gp->id_or_neg_offset = -(sp - [01;31m[Ke-[m[K>s->sparts);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K919[m[K[36m[K:[m[K * velocity and tim[01;31m[Ke-[m[Kbin as the original #part.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K925[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K956[m[K[36m[K:[m[K  sp->id = space_get_new_unique_id([01;31m[Ke-[m[K>s);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K959[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink things */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K961[m[K[36m[K:[m[K  gp->id_or_neg_offset = -(sp - [01;31m[Ke-[m[K>s->sparts);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K993[m[K[36m[K:[m[K * apart from the tim[01;31m[Ke-[m[Kbin and #gpart pointer.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1003[m[K[36m[K:[m[K * tim[01;31m[Ke-[m[Kbin as the original #part.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1008[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1032[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink things */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1034[m[K[36m[K:[m[K  gp->id_or_neg_offset = -(sp - [01;31m[Ke-[m[K>s->sinks);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1054[m[K[36m[K:[m[K  sp->r_cut = [01;31m[Ke-[m[K>sink_properties->cut_off_radius;
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1069[m[K[36m[K:[m[K * velocity and tim[01;31m[Ke-[m[Kbin as the original #sink.
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1074[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1105[m[K[36m[K:[m[K  sp->id = space_get_new_unique_id([01;31m[Ke-[m[K>s);
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1108[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink things */
[35m[Kcell_convert_part.c[m[K[36m[K:[m[K[32m[K1110[m[K[36m[K:[m[K  gp->id_or_neg_offset = -(sp - [01;31m[Ke-[m[K>s->sparts);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>lightcone_array_properties->nr_lightcones > 0) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K          lightcone_array_refine_replications([01;31m[Ke-[m[K>lightcone_array_properties, c);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1], [01;31m[Ke-[m[K>s->dim[2]};
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K  const float hydro_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K  const float hydro_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K154[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K228[m[K[36m[K:[m[K          cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_part, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K          cosmology_get_grav_kick_factor([01;31m[Ke-[m[K>cosmology, ti_old_part, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K      dt_kick_hydro = cosmology_get_hydro_kick_factor([01;31m[Ke-[m[K>cosmology, ti_old_part,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K      dt_therm = cosmology_get_therm_kick_factor([01;31m[Ke-[m[K>cosmology, ti_old_part,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K      dt_drift = (ti_current - ti_old_part) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K237[m[K[36m[K:[m[K      dt_kick_grav = (ti_current - ti_old_part) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K238[m[K[36m[K:[m[K      dt_kick_hydro = (ti_current - ti_old_part) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K      dt_therm = (ti_current - ti_old_part) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K      tracers_after_drift(p, xp, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>physical_constants,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K265[m[K[36m[K:[m[K                          with_cosmology, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K266[m[K[36m[K:[m[K                          [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K270[m[K[36m[K:[m[K      if (fabs(xp->v_full[0] * dt_drift) > [01;31m[Ke-[m[K>s->dim[0] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K          fabs(xp->v_full[1] * dt_drift) > [01;31m[Ke-[m[K>s->dim[1] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K          fabs(xp->v_full[2] * dt_drift) > [01;31m[Ke-[m[K>s->dim[2]) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K289[m[K[36m[K:[m[K          lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K          /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K296[m[K[36m[K:[m[K            if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K298[m[K[36m[K:[m[K              csds_log_part([01;31m[Ke-[m[K>csds, p, xp, e, /* log_all */ 1,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K304[m[K[36m[K:[m[K            hydro_remove_part(p, xp, [01;31m[Ke-[m[K>time);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K          if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K337[m[K[36m[K:[m[K      /* Reset the gas particl[01;31m[Ke-[m[Kcarried feedback fields */
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K342[m[K[36m[K:[m[K        hydro_init_part(p, &[01;31m[Ke-[m[K>s->hs);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K344[m[K[36m[K:[m[K        chemistry_init_part(p, [01;31m[Ke-[m[K>chemistry);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K346[m[K[36m[K:[m[K        star_formation_init_part(p, [01;31m[Ke-[m[K>star_formation);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K347[m[K[36m[K:[m[K        tracers_after_init(p, xp, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>physical_constants,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K                           with_cosmology, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K                           [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K379[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>lightcone_array_properties->nr_lightcones > 0 && !replication_list_in)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K380[m[K[36m[K:[m[K    lightcone_array_free_replications([01;31m[Ke-[m[K>lightcone_array_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1], [01;31m[Ke-[m[K>s->dim[2]};
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K399[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K401[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K  const struct gravity_props *grav_props = [01;31m[Ke-[m[K>gravity_properties;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K  const double a = [01;31m[Ke-[m[K>cosmology->a;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K  const double c_vel = [01;31m[Ke-[m[K>physical_constants->const_speed_light_c;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K  const int with_neutrinos = [01;31m[Ke-[m[K>s->with_neutrinos;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K462[m[K[36m[K:[m[K          cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_gpart, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K464[m[K[36m[K:[m[K      dt_drift = (ti_current - ti_old_gpart) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K      if (fabs(gp->v_full[0] * dt_drift_k) > [01;31m[Ke-[m[K>s->dim[0] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K489[m[K[36m[K:[m[K          fabs(gp->v_full[1] * dt_drift_k) > [01;31m[Ke-[m[K>s->dim[1] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K490[m[K[36m[K:[m[K          fabs(gp->v_full[2] * dt_drift_k) > [01;31m[Ke-[m[K>s->dim[2]) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K506[m[K[36m[K:[m[K          lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K508[m[K[36m[K:[m[K          /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K516[m[K[36m[K:[m[K              if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K518[m[K[36m[K:[m[K                csds_log_gpart([01;31m[Ke-[m[K>csds, gp, e, /* log_all */ 1,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K528[m[K[36m[K:[m[K          if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K548[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>lightcone_array_properties->nr_lightcones > 0 && !replication_list_in)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K549[m[K[36m[K:[m[K    lightcone_array_free_replications([01;31m[Ke-[m[K>lightcone_array_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K566[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K567[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1], [01;31m[Ke-[m[K>s->dim[2]};
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K568[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K569[m[K[36m[K:[m[K  const float stars_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K570[m[K[36m[K:[m[K  const float stars_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K572[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K645[m[K[36m[K:[m[K          cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_spart, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K647[m[K[36m[K:[m[K      dt_drift = (ti_current - ti_old_spart) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K665[m[K[36m[K:[m[K      if (fabs(sp->v[0] * dt_drift) > [01;31m[Ke-[m[K>s->dim[0] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K666[m[K[36m[K:[m[K          fabs(sp->v[1] * dt_drift) > [01;31m[Ke-[m[K>s->dim[1] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K667[m[K[36m[K:[m[K          fabs(sp->v[2] * dt_drift) > [01;31m[Ke-[m[K>s->dim[2]) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K680[m[K[36m[K:[m[K          lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K682[m[K[36m[K:[m[K          /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K687[m[K[36m[K:[m[K            if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K689[m[K[36m[K:[m[K              csds_log_spart([01;31m[Ke-[m[K>csds, sp, e, /* log_all */ 1, csds_flag_delete,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K698[m[K[36m[K:[m[K          if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K752[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>lightcone_array_properties->nr_lightcones > 0 && !replication_list_in)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K753[m[K[36m[K:[m[K    lightcone_array_free_replications([01;31m[Ke-[m[K>lightcone_array_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K771[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K772[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1], [01;31m[Ke-[m[K>s->dim[2]};
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K774[m[K[36m[K:[m[K  const float black_holes_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K775[m[K[36m[K:[m[K  const float black_holes_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K777[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K850[m[K[36m[K:[m[K          cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_bpart, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K852[m[K[36m[K:[m[K      dt_drift = (ti_current - ti_old_bpart) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K871[m[K[36m[K:[m[K      if (fabs(bp->v[0] * dt_drift) > [01;31m[Ke-[m[K>s->dim[0] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K872[m[K[36m[K:[m[K          fabs(bp->v[1] * dt_drift) > [01;31m[Ke-[m[K>s->dim[1] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K873[m[K[36m[K:[m[K          fabs(bp->v[2] * dt_drift) > [01;31m[Ke-[m[K>s->dim[2]) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K886[m[K[36m[K:[m[K          lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K888[m[K[36m[K:[m[K          /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K893[m[K[36m[K:[m[K            if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K          if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K949[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>lightcone_array_properties->nr_lightcones > 0 && !replication_list_in)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K950[m[K[36m[K:[m[K    lightcone_array_free_replications([01;31m[Ke-[m[K>lightcone_array_properties,
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K967[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K968[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1], [01;31m[Ke-[m[K>s->dim[2]};
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K969[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K971[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1035[m[K[36m[K:[m[K          cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_sink, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1037[m[K[36m[K:[m[K      dt_drift = (ti_current - ti_old_sink) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1055[m[K[36m[K:[m[K      if (fabs(sink->v[0] * dt_drift) > [01;31m[Ke-[m[K>s->dim[0] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1056[m[K[36m[K:[m[K          fabs(sink->v[1] * dt_drift) > [01;31m[Ke-[m[K>s->dim[1] ||
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1057[m[K[36m[K:[m[K          fabs(sink->v[2] * dt_drift) > [01;31m[Ke-[m[K>s->dim[2]) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1070[m[K[36m[K:[m[K          lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1072[m[K[36m[K:[m[K          /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1077[m[K[36m[K:[m[K            if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1086[m[K[36m[K:[m[K          if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1136[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1145[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1147[m[K[36m[K:[m[K        cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_multipole, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1149[m[K[36m[K:[m[K    dt_drift = (ti_current - ti_old_multipole) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1176[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1185[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1187[m[K[36m[K:[m[K        cosmology_get_drift_factor([01;31m[Ke-[m[K>cosmology, ti_old_multipole, ti_current);
[35m[Kcell_drift.c[m[K[36m[K:[m[K[32m[K1189[m[K[36m[K:[m[K    dt_drift = (ti_current - ti_old_multipole) * [01;31m[Ke-[m[K>time_base;
[35m[Kcell.h[m[K[36m[K:[m[K[32m[K229[m[K[36m[K:[m[K * @brief Cell information at the end of a tim[01;31m[Ke-[m[Kstep.
[35m[Kcell.h[m[K[36m[K:[m[K[32m[K419[m[K[36m[K:[m[K  /*! The task to compute tim[01;31m[Ke-[m[Ksteps */
[35m[Kcell.h[m[K[36m[K:[m[K[32m[K422[m[K[36m[K:[m[K  /*! The task to limit the tim[01;31m[Ke-[m[Kstep of inactive particles */
[35m[Kcell.h[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K  /*! The task to synchronize the tim[01;31m[Ke-[m[Kstep of inactive particles hit by
[35m[Kcell.h[m[K[36m[K:[m[K[32m[K429[m[K[36m[K:[m[K  /*! The task to recursively collect tim[01;31m[Ke-[m[Ksteps */
[35m[Kcell_pack.c[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K * @brief Pack the cell information about tim[01;31m[Ke-[m[Kstep sizes and displacements
[35m[Kcell_pack.c[m[K[36m[K:[m[K[32m[K373[m[K[36m[K:[m[K * @brief Unpack the cell information about tim[01;31m[Ke-[m[Kstep sizes and displacements
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K466[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Karrange the #part in a top-level cell such that all the extra
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K467[m[K[36m[K:[m[K * ones for on-th[01;31m[Ke-[m[Kfly creation are located at the end of the array.
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K471[m[K[36m[K:[m[K * first #part in the global array in the space structure (for r[01;31m[Ke-[m[Klinking).
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K518[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Karrange the #spart in a top-level cell such that all the extra
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K519[m[K[36m[K:[m[K * ones for on-th[01;31m[Ke-[m[Kfly creation are located at the end of the array.
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K * r[01;31m[Ke-[m[Klinking).
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K574[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Karrange the #sink in a top-level cell such that all the extra
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K575[m[K[36m[K:[m[K * ones for on-th[01;31m[Ke-[m[Kfly creation are located at the end of the array.
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K * r[01;31m[Ke-[m[Klinking).
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K630[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Karrange the #gpart in a top-level cell such that all the extra
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K631[m[K[36m[K:[m[K * ones for on-th[01;31m[Ke-[m[Kfly creation are located at the end of the array.
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K634[m[K[36m[K:[m[K * @param parts The global array of #part (for r[01;31m[Ke-[m[Klinking).
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K635[m[K[36m[K:[m[K * @param sparts The global array of #spart (for r[01;31m[Ke-[m[Klinking).
[35m[Kcell_split.c[m[K[36m[K:[m[K[32m[K636[m[K[36m[K:[m[K * @param sinks The global array of #sink (for r[01;31m[Ke-[m[Klinking).
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K620[m[K[36m[K:[m[K  /* Do we need to r[01;31m[Ke-[m[Ksort? */
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K683[m[K[36m[K:[m[K  /* Do we need to r[01;31m[Ke-[m[Ksort? */
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K710[m[K[36m[K:[m[K * @param with_timestep_limiter Are we running with tim[01;31m[Ke-[m[Kstep limiting on?
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K  const struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K786[m[K[36m[K:[m[K      /* Also activate the tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K809[m[K[36m[K:[m[K * @param with_timestep_sync Are we running with tim[01;31m[Ke-[m[Kstep synchronization on?
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K816[m[K[36m[K:[m[K  const struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K949[m[K[36m[K:[m[K * @param with_timestep_sync Are we running with tim[01;31m[Ke-[m[Kstep synchronization on?
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K954[m[K[36m[K:[m[K  const struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1047[m[K[36m[K:[m[K * @param with_timestep_sync Are we running with tim[01;31m[Ke-[m[Kstep synchronization on?
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1052[m[K[36m[K:[m[K  const struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1191[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1246[m[K[36m[K:[m[K    if (ci->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(ci, e);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1251[m[K[36m[K:[m[K    if (cj->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(cj, e);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1448[m[K[36m[K:[m[K  const struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1538[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1539[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1540[m[K[36m[K:[m[K  const int with_feedback = [01;31m[Ke-[m[K>policy & engine_policy_feedback;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1542[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1545[m[K[36m[K:[m[K  const int with_star_formation = [01;31m[Ke-[m[K>policy & engine_policy_star_formation;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1546[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks) error("TODO");
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1794[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1795[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1938[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1939[m[K[36m[K:[m[K  const int with_timestep_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K1940[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2352[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2353[m[K[36m[K:[m[K  const int with_timestep_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2354[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2640[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2641[m[K[36m[K:[m[K  const int with_timestep_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2642[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2848[m[K[36m[K:[m[K  struct engine *e = s->spac[01;31m[Ke-[m[K>e;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2849[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kcell_unskip.c[m[K[36m[K:[m[K[32m[K2853[m[K[36m[K:[m[K  if (!([01;31m[Ke-[m[K>policy & engine_policy_rt)) error("Unskipping RT tasks without RT");
[35m[Kclocks.c[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K  clock_gettime(CLOCK_REALTIME, &tim[01;31m[Ke-[m[K>time);
[35m[Kclocks.c[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  tim[01;31m[Ke-[m[K>time = getticks();
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K102[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_hydro_end_min = grp1->ti_hydro_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_hydro_beg_max = grp1->ti_hydro_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_rt_end_min = grp1->ti_rt_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_rt_beg_max = grp1->ti_rt_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_gravity_end_min = grp1->ti_gravity_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_gravity_beg_max = grp1->ti_gravity_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_stars_end_min = grp1->ti_stars_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K109[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_stars_beg_max = grp1->ti_stars_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K110[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_black_holes_end_min = grp1->ti_black_holes_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_black_holes_beg_max = grp1->ti_black_holes_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K112[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_sinks_end_min = grp1->ti_sinks_end_min;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_sinks_beg_max = grp1->ti_sinks_beg_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_end_min =
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K116[m[K[36m[K:[m[K      min5([01;31m[Ke-[m[K>ti_hydro_end_min, [01;31m[Ke-[m[K>ti_gravity_end_min, [01;31m[Ke-[m[K>ti_sinks_end_min,
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>ti_stars_end_min, [01;31m[Ke-[m[K>ti_black_holes_end_min);
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K118[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_beg_max =
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K      max5([01;31m[Ke-[m[K>ti_hydro_beg_max, [01;31m[Ke-[m[K>ti_gravity_beg_max, [01;31m[Ke-[m[K>ti_sinks_beg_max,
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K120[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>ti_stars_beg_max, [01;31m[Ke-[m[K>ti_black_holes_beg_max);
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K122[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>updates = grp1->updated;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>g_updates = grp1->g_updated;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s_updates = grp1->s_updated;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K125[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>b_updates = grp1->b_updated;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K126[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sink_updates = grp1->sink_updated;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K127[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_parts = grp1->inhibited;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K128[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_gparts = grp1->g_inhibited;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_sparts = grp1->s_inhibited;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_bparts = grp1->b_inhibited;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_sinks = grp1->sink_inhibited;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = grp1->forcerebuild;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_cells = grp1->total_nr_cells;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_tasks = grp1->total_nr_tasks;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tasks_per_cell_max = grp1->tasks_per_cell_max;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K137[m[K[36m[K:[m[K  star_formation_logger_add_to_accumulator(&[01;31m[Ke-[m[K>sfh, &grp1->sfh);
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K139[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>runtime = grp1->runtime;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>flush_lightcone_maps = grp1->flush_lightcone_maps;
[35m[Kcollectgroup.c[m[K[36m[K:[m[K[32m[K141[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>global_deadtime = grp1->deadtime;
[35m[Kcollectgroup.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  /* Times for the tim[01;31m[Ke-[m[Kstep */
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K523[m[K[36m[K:[m[K  phys_const_print_snapshot(h_file, [01;31m[Ke-[m[K>physical_constants);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K526[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro) {
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K    hydro_props_print_snapshot(h_grp, [01;31m[Ke-[m[K>hydro_properties);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K  cooling_write_flavour(h_grp, h_grp_columns, [01;31m[Ke-[m[K>cooling_func);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K547[m[K[36m[K:[m[K  feedback_write_flavour([01;31m[Ke-[m[K>feedback_props, h_grp);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K549[m[K[36m[K:[m[K                   [01;31m[Ke-[m[K>rt_props);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K553[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K557[m[K[36m[K:[m[K    gravity_props_print_snapshot(h_grp, [01;31m[Ke-[m[K>gravity_properties);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K562[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars) {
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K566[m[K[36m[K:[m[K    stars_props_print_snapshot(h_grp, h_grp_columns, [01;31m[Ke-[m[K>stars_properties);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K  cosmology_write_model(h_grp, [01;31m[Ke-[m[K>cosmology);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K587[m[K[36m[K:[m[K  parser_write_params_to_hdf5([01;31m[Ke-[m[K>parameter_file, h_grp, /*write_used=*/1);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K594[m[K[36m[K:[m[K  parser_write_params_to_hdf5([01;31m[Ke-[m[K>parameter_file, h_grp, /*write_used=*/0);
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K604[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & (1 << i))
[35m[Kcommon_io.c[m[K[36m[K:[m[K[32m[K1587[m[K[36m[K:[m[K * @brief Construct the file names for a singl[01;31m[Ke-[m[Kfile hdf5 snapshots and
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K486[m[K[36m[K:[m[K    threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool, io_copy_mapper, temp_c,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K499[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K511[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K523[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K535[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K547[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K559[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K571[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K583[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K595[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K631[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K643[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K655[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K667[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K679[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K691[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K703[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_copy.c[m[K[36m[K:[m[K[32m[K727[m[K[36m[K:[m[K      threadpool_map((struct threadpool*)&[01;31m[Ke-[m[K>threadpool,
[35m[Kcommon_io_fields.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K * @param with_fof Are we running with on-th[01;31m[Ke-[m[Kfly Fof?
[35m[Kcommon_io_fields.c[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K * @param with_stf Are we running with on-th[01;31m[Ke-[m[Kfly structure finder?
[35m[Kconst.h[m[K[36m[K:[m[K[32m[K26[m[K[36m[K:[m[K#define io_redshift_tolerance 1[01;31m[Ke-[m[K3f
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K * @brief Computes the dark-energy equation of state at a given scal[01;31m[Ke-[m[Kfactor a.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K * @param a The current scal[01;31m[Ke-[m[Kfactor
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K99[m[K[36m[K:[m[K * up to a scal[01;31m[Ke-[m[Kfactor a.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K * @param a The current scal[01;31m[Ke-[m[Kfactor.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K * @param a The current scal[01;31m[Ke-[m[Kfactor.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K * scal[01;31m[Ke-[m[Kfactor.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K * @param a Scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K226[m[K[36m[K:[m[K  /* Tim[01;31m[Ke-[m[Kstep conversion factor */
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K237[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K  /* Note: we can't use the pr[01;31m[Ke-[m[Kdefined pow_gamma_xxx() function as
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K339[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K363[m[K[36m[K:[m[K * @param a The scal[01;31m[Ke-[m[Kfactor of interest.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K429[m[K[36m[K:[m[K * without pr[01;31m[Ke-[m[Kfactors.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K  gsl_integration_qag(&F1, 0.0, 1.0, 0, 1.0[01;31m[Ke-[m[K13, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K448[m[K[36m[K:[m[K  gsl_integration_qag(&F2, 0.0, 1.0, 0, 1.0[01;31m[Ke-[m[K13, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K515[m[K[36m[K:[m[K  neutrino_find_relativistic_redshift(c, 1[01;31m[Ke-[m[K7);
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K637[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K647[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K657[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K667[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K675[m[K[36m[K:[m[K  gsl_integration_qag(&F, 0., a_begin, 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K680[m[K[36m[K:[m[K  gsl_integration_qag(&F, 0., a_end, 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K685[m[K[36m[K:[m[K  gsl_integration_qag(&F, 0., 1, 0, 1.0[01;31m[Ke-[m[K13, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K692[m[K[36m[K:[m[K    gsl_integration_qag(&F, a_begin, a_table[i], 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K  gsl_integration_qag(&F, a_begin, 1.0, 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K707[m[K[36m[K:[m[K  gsl_integration_qag(&F, a_begin, a_end, 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K * @brief Initialise the #cosmology for non-cosmological tim[01;31m[Ke-[m[Kintegration
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1297[m[K[36m[K:[m[K * @brief Compute neutrino density parameter Omega_nu at the given scal[01;31m[Ke-[m[Kfactor
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1357[m[K[36m[K:[m[K * @param ti_current The current point on the tim[01;31m[Ke-[m[Kline.
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1366[m[K[36m[K:[m[K  /* We are going to average over a number of tim[01;31m[Ke-[m[Kbins
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1386[m[K[36m[K:[m[K  gsl_integration_qag(&F, a_start, a_end, 0, 1.0[01;31m[Ke-[m[K10, GSL_workspace_size,
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1511[m[K[36m[K:[m[K  io_write_attribute_d(h_grp, "Scal[01;31m[Ke-[m[Kfactor", c->a);
[35m[Kcosmology.c[m[K[36m[K:[m[K[32m[K1563[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kinitialise the tables if using a cosmology. */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for internal energy conversion to physical
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for pressure conversion to physical */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K53[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for sound-speed conversion to physical */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for relative velocities in visc. terms */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for epsilon term in the Balsara switch */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for gravity accelerations */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K  /*! Power of the scal[01;31m[Ke-[m[Kfactor used for hydro accelerations */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K  /*! Conversion factor from internal tim[01;31m[Ke-[m[Kstep size to cosmological step */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K  /*! Scal[01;31m[Ke-[m[Kfactor at the previous tim[01;31m[Ke-[m[Kstep */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K  /*! Redshit at the previous tim[01;31m[Ke-[m[Kstep */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K  /*! Conversion factor from integer tim[01;31m[Ke-[m[Kline to \f$ d\log{a} \f$ */
[35m[Kcosmology.h[m[K[36m[K:[m[K[32m[K126[m[K[36m[K:[m[K  /*! Inverse of conversion factor from integer tim[01;31m[Ke-[m[Kline to \f$ d\log{a} \f$ */
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K109[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K679[m[K[36m[K:[m[K  limit += [01;31m[Ke-[m[K>s->nr_parts;
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K682[m[K[36m[K:[m[K  limit += [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K685[m[K[36m[K:[m[K  limit += [01;31m[Ke-[m[K>s->nr_sparts;
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K693[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K860[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K884[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nr_nodes >= 1 << 16)
[35m[Kcsds.c[m[K[36m[K:[m[K[32m[K923[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID != 0) {
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K  snprintf(fileName, FILENAME_BUFFER_SIZE, "%.100s.yml", [01;31m[Ke-[m[K>csds->base_name);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K  fprintf(f, "  BoxSize: [%g, %g, %g]\n", [01;31m[Ke-[m[K>s->dim[0], [01;31m[Ke-[m[K>s->dim[1],
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K73[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>s->dim[2]);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K75[m[K[36m[K:[m[K  fprintf(f, "  RunName: %s\n", [01;31m[Ke-[m[K>run_name);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K  fprintf(f, "  Periodic: %i\n", [01;31m[Ke-[m[K>s->periodic);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K  fprintf(f, "  NumberParts: %li\n", [01;31m[Ke-[m[K>s->nr_parts);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K  fprintf(f, "  NumberSParts: %li\n", [01;31m[Ke-[m[K>s->nr_sparts);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K  fprintf(f, "  NumberGParts: %li\n", [01;31m[Ke-[m[K>s->nr_gparts);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K  fprintf(f, "  Omega_cdm: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_cdm);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K  fprintf(f, "  Omega_lambda: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_lambda);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K  fprintf(f, "  Omega_b: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_b);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K89[m[K[36m[K:[m[K  fprintf(f, "  Omega_r: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_r);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K90[m[K[36m[K:[m[K  fprintf(f, "  Omega_k: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_k);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K  fprintf(f, "  Omega_nu_0: %g\n", [01;31m[Ke-[m[K>cosmology->Omega_nu_0);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K  fprintf(f, "  w_0: %g\n", [01;31m[Ke-[m[K>cosmology->w_0);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K  fprintf(f, "  w_a: %g\n", [01;31m[Ke-[m[K>cosmology->w_a);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K94[m[K[36m[K:[m[K  fprintf(f, "  Hubble0: %g\n", [01;31m[Ke-[m[K>cosmology->H0);
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K98[m[K[36m[K:[m[K  const struct unit_system* us = [01;31m[Ke-[m[K>internal_units;
[35m[Kcsds_io.c[m[K[36m[K:[m[K[32m[K125[m[K[36m[K:[m[K    const int value = [01;31m[Ke-[m[K>policy & (1 << i) ? 1 : 0;
[35m[Kcycle.h[m[K[36m[K:[m[K[32m[K26[m[K[36m[K:[m[K/* machin[01;31m[Ke-[m[Kdependent cycle counters code. Needs to be inlined. */
[35m[Kcycle.h[m[K[36m[K:[m[K[32m[K39[m[K[36m[K:[m[K   which returns a doubl[01;31m[Ke-[m[Kprecision variable in arbitrary units.  You
[35m[Kcycle.h[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K/* AIX v. 4+ routines to read the real-time clock or tim[01;31m[Ke-[m[Kbase register */
[35m[Kcycle.h[m[K[36m[K:[m[K[32m[K164[m[K[36m[K:[m[K/* MacOS/Mach (Darwin) tim[01;31m[Ke-[m[Kbase register interface (unlike UpTime,
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID &&
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K192[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID &&
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID &&
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID) {
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K256[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID) {
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K273[m[K[36m[K:[m[K    if (s->cells_top[k].nodeID == s->[01;31m[Ke-[m[K>nodeID) {
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID &&
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K497[m[K[36m[K:[m[K      struct task *tasks = [01;31m[Ke-[m[K>sched.tasks;
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K498[m[K[36m[K:[m[K      int nr_tasks = [01;31m[Ke-[m[K>sched.nr_tasks;
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K541[m[K[36m[K:[m[K          c->width[2], [01;31m[Ke-[m[K>step, c->hydro.count, c->grav.count, c->stars.count,
[35m[Kdebug.c[m[K[36m[K:[m[K[32m[K545[m[K[36m[K:[m[K          c->nodeID == [01;31m[Ke-[m[K>nodeID, ismpiactive, ticsum, dsum);
[35m[Kdimension.h[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K    if (Smax < 1.[01;31m[Ke-[m[K8f) {
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>snapshot_compression > 0) {
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K      h_err = H5Pset_deflate(h_prop, [01;31m[Ke-[m[K>snapshot_compression);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K249[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K414[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K470[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K471[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K472[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K473[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K474[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K476[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K477[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K481[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K487[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_output_count == 0) xmf_create_file(xmfFileName);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K497[m[K[36m[K:[m[K  xmf_write_outputheader(xmfFile, fileName, [01;31m[Ke-[m[K>time);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K514[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K515[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K516[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K517[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Redshift", DOUBLE, &[01;31m[Ke-[m[K>cosmology->z, 1);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K525[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Scal[01;31m[Ke-[m[Kfactor", DOUBLE, &[01;31m[Ke-[m[K>cosmology->a, 1);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K527[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K535[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K536[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K540[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K598[m[K[36m[K:[m[K  ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K683[m[K[36m[K:[m[K            (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K694[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>verbose);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K  xmf_write_outputfooter(xmfFile, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>time);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K751[m[K[36m[K:[m[K  const struct part* parts = [01;31m[Ke-[m[K>s->parts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K752[m[K[36m[K:[m[K  const struct xpart* xparts = [01;31m[Ke-[m[K>s->xparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K753[m[K[36m[K:[m[K  const struct gpart* gparts = [01;31m[Ke-[m[K>s->gparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K754[m[K[36m[K:[m[K  const struct sink* sinks = [01;31m[Ke-[m[K>s->sinks;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K755[m[K[36m[K:[m[K  const struct spart* sparts = [01;31m[Ke-[m[K>s->sparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K756[m[K[36m[K:[m[K  const struct bpart* bparts = [01;31m[Ke-[m[K>s->bparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K  struct output_list* output_list = [01;31m[Ke-[m[K>output_list_snapshots;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K761[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K762[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K763[m[K[36m[K:[m[K  const int with_DM_background = [01;31m[Ke-[m[K>s->with_DM_background;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K764[m[K[36m[K:[m[K  const int with_neutrinos = [01;31m[Ke-[m[K>s->with_neutrinos;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K767[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K768[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K774[m[K[36m[K:[m[K  const size_t Ntot = [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K775[m[K[36m[K:[m[K  const size_t Ngas = [01;31m[Ke-[m[K>s->nr_parts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K776[m[K[36m[K:[m[K  const size_t Nsinks = [01;31m[Ke-[m[K>s->nr_sinks;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K777[m[K[36m[K:[m[K  const size_t Nstars = [01;31m[Ke-[m[K>s->nr_sparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K778[m[K[36m[K:[m[K  const size_t Nblackholes = [01;31m[Ke-[m[K>s->nr_bparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K795[m[K[36m[K:[m[K  } else if ([01;31m[Ke-[m[K>snapshot_invoke_stf) {
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K796[m[K[36m[K:[m[K    snap_count = [01;31m[Ke-[m[K>stf_output_count;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K799[m[K[36m[K:[m[K    snap_count = [01;31m[Ke-[m[K>snapshot_output_count;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K812[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>snapshot_subdir, [01;31m[Ke-[m[K>snapshot_base_name,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K816[m[K[36m[K:[m[K      fileName, xmfFileName, output_list, [01;31m[Ke-[m[K>snapshot_invoke_stf,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K817[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>stf_output_count, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>snapshot_subdir,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K818[m[K[36m[K:[m[K      snapshot_subdir_name, [01;31m[Ke-[m[K>snapshot_base_name, snapshot_base_name);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K821[m[K[36m[K:[m[K  if (strnlen([01;31m[Ke-[m[K>snapshot_subdir, PARSER_MAX_LINE_SIZE) > 0) {
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K858[m[K[36m[K:[m[K      output_options, current_selection_name, [01;31m[Ke-[m[K>snapshot_subsample,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K859[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>snapshot_subsample_fraction, subsample, subsample_fraction);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K873[m[K[36m[K:[m[K    Ngas_written = io_count_gas_to_write([01;31m[Ke-[m[K>s, /*subsample=*/1,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K875[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts - [01;31m[Ke-[m[K>s->nr_inhibited_parts - [01;31m[Ke-[m[K>s->nr_extra_parts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K883[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_stars],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K884[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K887[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sparts - [01;31m[Ke-[m[K>s->nr_inhibited_sparts - [01;31m[Ke-[m[K>s->nr_extra_sparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K892[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_black_hole],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K893[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K896[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts - [01;31m[Ke-[m[K>s->nr_inhibited_bparts - [01;31m[Ke-[m[K>s->nr_extra_bparts;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K901[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_sink],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K905[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sinks - [01;31m[Ke-[m[K>s->nr_inhibited_sinks - [01;31m[Ke-[m[K>s->nr_extra_sinks;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K910[m[K[36m[K:[m[K      subsample_fraction[swift_type_dark_matter], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K914[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter_background],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K923[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_neutrino],
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K924[m[K[36m[K:[m[K        subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K945[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_lustre_OST_count != 0) {
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K948[m[K[36m[K:[m[K            ([01;31m[Ke-[m[K>nodeID % [01;31m[Ke-[m[K>snapshot_lustre_OST_count), fileName);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K970[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K971[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K972[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K973[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K980[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Redshift", DOUBLE, &[01;31m[Ke-[m[K>cosmology->z, 1);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K981[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Scal[01;31m[Ke-[m[Kfactor", DOUBLE, &[01;31m[Ke-[m[K>cosmology->a, 1);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K983[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K994[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K997[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1001[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1042[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1064[m[K[36m[K:[m[K  ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1078[m[K[36m[K:[m[K  io_write_cell_offsets(h_grp, [01;31m[Ke-[m[K>s->cdim, [01;31m[Ke-[m[K>s->dim, [01;31m[Ke-[m[K>s->cells_top,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1079[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->width, mpi_rank,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1081[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>snapshot_output_count, N_total, global_offsets,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1157[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ngas, Ngas_written);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1174[m[K[36m[K:[m[K          io_select_dm_fields(gparts, [01;31m[Ke-[m[K>s->gpart_group_data, with_fof,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1200[m[K[36m[K:[m[K              gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1203[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_written, with_stf);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1234[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1238[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_background, with_stf);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1268[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1270[m[K[36m[K:[m[K            subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1302[m[K[36m[K:[m[K              subsample_fraction[swift_type_sink], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1335[m[K[36m[K:[m[K              subsample_fraction[swift_type_stars], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1369[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Nblackholes, Nblackholes_written);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1386[m[K[36m[K:[m[K            (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1397[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>verbose);
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1469[m[K[36m[K:[m[K  io_write_cell_offsets(h_grp_cells, [01;31m[Ke-[m[K>s->cdim, [01;31m[Ke-[m[K>s->dim, [01;31m[Ke-[m[K>s->cells_top,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1470[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->width, mpi_rank,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1472[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>snapshot_output_count, N_total, global_offsets,
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1489[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_output_count++;
[35m[Kdistributed_io.c[m[K[36m[K:[m[K[32m[K1490[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_invoke_stf) [01;31m[Ke-[m[K>stf_output_count++;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K * @param dt_drift The drift tim[01;31m[Ke-[m[Kstep.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K * @param ti_old Integer start of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K * @param ti_current Integer end of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K    id = [01;31m[Ke-[m[K>s->parts[-gp->id_or_neg_offset].id;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K    id = [01;31m[Ke-[m[K>s->sparts[-gp->id_or_neg_offset].id;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K    id = [01;31m[Ke-[m[K>s->bparts[-gp->id_or_neg_offset].id;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K * @param dt_drift The drift tim[01;31m[Ke-[m[Kstep
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K * @param dt_kick_hydro The kick tim[01;31m[Ke-[m[Kstep for hydro accelerations.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K * @param dt_therm The drift tim[01;31m[Ke-[m[Kstep for thermodynamic quantities.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K * @param ti_old Integer start of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K * @param ti_current Integer end of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K  const struct entropy_floor_properties *floor = [01;31m[Ke-[m[K>entropy_floor;
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K * @param dt_drift The drift tim[01;31m[Ke-[m[Kstep.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K232[m[K[36m[K:[m[K * @param ti_old Integer start of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K * @param ti_current Integer end of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K299[m[K[36m[K:[m[K * @param dt_drift The drift tim[01;31m[Ke-[m[Kstep.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K * @param ti_old Integer start of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K * @param ti_current Integer end of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K * @param dt_drift The drift tim[01;31m[Ke-[m[Kstep.
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K367[m[K[36m[K:[m[K * @param ti_old Integer start of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kdrift.h[m[K[36m[K:[m[K[32m[K368[m[K[36m[K:[m[K * @param ti_current Integer end of tim[01;31m[Ke-[m[Kstep (for debugging checks).
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K                                     "tim[01;31m[Ke-[m[Kstep limiter",
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K                                     "tim[01;31m[Ke-[m[Kstep sync",
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K162[m[K[36m[K:[m[K  const size_t ind = atomic_inc(&[01;31m[Ke-[m[K>nr_links);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K163[m[K[36m[K:[m[K  if (ind >= [01;31m[Ke-[m[K>size_links) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K  struct link *res = &[01;31m[Ke-[m[K>links[ind];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0 || [01;31m[Ke-[m[K>verbose) message("repartitioning space");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K192[m[K[36m[K:[m[K  space_check_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current, /*check_multipoles=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerepart = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nr_nodes == 1) return;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>step > 3 && [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>trigger <= 1.f) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K  partition_repartition([01;31m[Ke-[m[K>reparttype, [01;31m[Ke-[m[K>nodeID, [01;31m[Ke-[m[K>nr_nodes, [01;31m[Ke-[m[K>s,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>sched.tasks, [01;31m[Ke-[m[K>sched.nr_tasks);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>s->cells_top != NULL) space_free_cells([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K222[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) scheduler_report_task_times(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>nr_threads);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K225[m[K[36m[K:[m[K  scheduler_free_tasks(&[01;31m[Ke-[m[K>sched);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K229[m[K[36m[K:[m[K  space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K     how many particles go from where to where, then r[01;31m[Ke-[m[Kallocating
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K243[m[K[36m[K:[m[K  /* Tell the engine it should r[01;31m[Ke-[m[Kbuild whenever possible */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K247[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_repartition;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K249[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K253[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>type != REPART_NONE)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerepart = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restarting) opened = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>step - [01;31m[Ke-[m[K>last_repartition >= 2 && ![01;31m[Ke-[m[K>restarting) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>type != REPART_NONE) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>trigger > 1 ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K          ([01;31m[Ke-[m[K>step == 2 && [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>use_fixed_costs)) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>trigger > 1) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K288[m[K[36m[K:[m[K          if (([01;31m[Ke-[m[K>step % (int)[01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>trigger) == 0) [01;31m[Ke-[m[K>forcerepart = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>forcerepart = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>use_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>updates > 1 &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K         [01;31m[Ke-[m[K>updates >= [01;31m[Ke-[m[K>total_nr_parts * [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>minfrac) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K        ([01;31m[Ke-[m[K>g_updates > 1 &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K         [01;31m[Ke-[m[K>g_updates >= [01;31m[Ke-[m[K>total_nr_gparts * [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>minfrac)) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K306[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>use_fixed_costs > 1) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K307[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>use_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K309[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>use_ticks = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K319[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>usertime_last_step, [01;31m[Ke-[m[K>systime_last_step, (double)resident,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K320[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>local_deadtime / ([01;31m[Ke-[m[K>nr_threads * [01;31m[Ke-[m[K>wallclock_time)};
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K      double timemems[[01;31m[Ke-[m[K>nr_nodes * 4];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K324[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K345[m[K[36m[K:[m[K        for (int k = 4; k < [01;31m[Ke-[m[K>nr_nodes * 4; k += 4) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K        double umean = usum / (double)[01;31m[Ke-[m[K>nr_nodes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K        double smean = ssum / (double)[01;31m[Ke-[m[K>nr_nodes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K        double tmean = tsum / (double)[01;31m[Ke-[m[K>nr_nodes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K367[m[K[36m[K:[m[K        double mmean = msum / (double)[01;31m[Ke-[m[K>nr_nodes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K371[m[K[36m[K:[m[K        double abs_trigger = fabs([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>trigger);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K373[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>type != REPART_NONE) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K378[m[K[36m[K:[m[K              if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>forcerepart = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K              if ([01;31m[Ke-[m[K>verbose && [01;31m[Ke-[m[K>reparttyp[01;31m[Ke-[m[K>type != REPART_NONE)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K391[m[K[36m[K:[m[K          if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K        for (int k = 0; k < [01;31m[Ke-[m[K>nr_nodes * 4; k += 4) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K430[m[K[36m[K:[m[K          fprintf(timelog, "%d %d %f %f %f %f\n", [01;31m[Ke-[m[K>step, k / 4, timemems[k],
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K          fprintf(memlog, "%d %d %ld\n", [01;31m[Ke-[m[K>step, k / 4, (long)timemems[k + 2]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K437[m[K[36m[K:[m[K        fprintf(timelog, "# %d mean times: %f %f %f\n", [01;31m[Ke-[m[K>step, umean, smean,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>step, balance, abs_trigger, (smaxtime - smintime) / smean,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K447[m[K[36m[K:[m[K        fprintf(memlog, "# %d mean resident memory: %f, balance: %f\n", [01;31m[Ke-[m[K>step,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K453[m[K[36m[K:[m[K      MPI_Bcast(&[01;31m[Ke-[m[K>forcerepart, 1, MPI_INT, 0, MPI_COMM_WORLD);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K457[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>forcerepart) [01;31m[Ke-[m[K>last_repartition = [01;31m[Ke-[m[K>step;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K460[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K475[m[K[36m[K:[m[K  const int with_gravity = [01;31m[Ke-[m[K>policy & engine_policy_self_gravity;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K479[m[K[36m[K:[m[K  proxy_cells_exchange([01;31m[Ke-[m[K>proxies, [01;31m[Ke-[m[K>nr_proxies, [01;31m[Ke-[m[K>s, with_gravity);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K481[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K503[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>s->nr_cells; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K504[m[K[36m[K:[m[K    const struct gravity_tensors *m = &[01;31m[Ke-[m[K>s->multipoles_top[i];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K505[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->cells_top[i].nodeID == engine_rank) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K507[m[K[36m[K:[m[K        if (m->CoM[0] < 0. || m->CoM[0] > [01;31m[Ke-[m[K>s->dim[0])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K509[m[K[36m[K:[m[K        if (m->CoM[1] < 0. || m->CoM[1] > [01;31m[Ke-[m[K>s->dim[1])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K511[m[K[36m[K:[m[K        if (m->CoM[2] < 0. || m->CoM[2] > [01;31m[Ke-[m[K>s->dim[2])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K528[m[K[36m[K:[m[K   * We use our hom[01;31m[Ke-[m[Kmade reduction operation that simply performs a XOR
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K  int err = MPI_Allreduce(MPI_IN_PLACE, [01;31m[Ke-[m[K>s->multipoles_top, [01;31m[Ke-[m[K>s->nr_cells,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K543[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>s->nr_cells; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K    const struct gravity_tensors *m = &[01;31m[Ke-[m[K>s->multipoles_top[i];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K550[m[K[36m[K:[m[K      if (m->CoM[0] < 0. || m->CoM[0] > [01;31m[Ke-[m[K>s->dim[0])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K552[m[K[36m[K:[m[K      if (m->CoM[1] < 0. || m->CoM[1] > [01;31m[Ke-[m[K>s->dim[1])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K554[m[K[36m[K:[m[K      if (m->CoM[2] < 0. || m->CoM[2] > [01;31m[Ke-[m[K>s->dim[2])
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K558[m[K[36m[K:[m[K  if (counter != [01;31m[Ke-[m[K>total_nr_gparts)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K562[m[K[36m[K:[m[K        counter, [01;31m[Ke-[m[K>total_nr_gparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K565[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K586[m[K[36m[K:[m[K  for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K589[m[K[36m[K:[m[K    const struct proxy *p = &[01;31m[Ke-[m[K>proxies[pid];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K  for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K630[m[K[36m[K:[m[K    const struct proxy *p = &[01;31m[Ke-[m[K>proxies[pid];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K682[m[K[36m[K:[m[K  for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K685[m[K[36m[K:[m[K    const struct proxy *p = &[01;31m[Ke-[m[K>proxies[pid];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K695[m[K[36m[K:[m[K      if (p->cells_in[k]->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart !=
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K698[m[K[36m[K:[m[K              p->cells_in[k]->grav.multipol[01;31m[Ke-[m[K>m_pole.M_000,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K699[m[K[36m[K:[m[K              p->cells_in[k]->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K719[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K745[m[K[36m[K:[m[K  const int nr_proxies = [01;31m[Ke-[m[K>nr_proxies;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K  const int with_hydro = [01;31m[Ke-[m[K>policy & engine_policy_hydro;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K747[m[K[36m[K:[m[K  const int with_stars = [01;31m[Ke-[m[K>policy & engine_policy_stars;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K748[m[K[36m[K:[m[K  const int with_black_holes = [01;31m[Ke-[m[K>policy & engine_policy_black_holes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K749[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K752[m[K[36m[K:[m[K  /* Count the number of particles we need to import and r[01;31m[Ke-[m[Kallocate
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K    for (int j = 0; j < [01;31m[Ke-[m[K>proxies[k].nr_cells_in; j++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[k].cells_in_type[j] & proxy_cell_type_hydro) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K        count_parts_in += cell_count_parts_for_tasks([01;31m[Ke-[m[K>proxies[k].cells_in[j]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K763[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[k].cells_in_type[j] & proxy_cell_type_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K            cell_count_gparts_for_tasks([01;31m[Ke-[m[K>proxies[k].cells_in[j]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K770[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>proxies[k].cells_in[j]->stars.count + space_extra_sparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K      count_bparts_in += [01;31m[Ke-[m[K>proxies[k].cells_in[j]->black_holes.count;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K788[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K845[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K861[m[K[36m[K:[m[K          "R[01;31m[Ke-[m[Kallocations %zd/%zd/%zd/%zd part/gpart/spart/bpart "
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K884[m[K[36m[K:[m[K    for (int j = 0; j < [01;31m[Ke-[m[K>proxies[k].nr_cells_in; j++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K886[m[K[36m[K:[m[K      if (!fof && [01;31m[Ke-[m[K>proxies[k].cells_in_type[j] & proxy_cell_type_hydro) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K889[m[K[36m[K:[m[K            cell_link_foreign_parts([01;31m[Ke-[m[K>proxies[k].cells_in[j], parts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K893[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[k].cells_in_type[j] & proxy_cell_type_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K896[m[K[36m[K:[m[K            cell_link_foreign_gparts([01;31m[Ke-[m[K>proxies[k].cells_in[j], gparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K903[m[K[36m[K:[m[K        cell_link_sparts([01;31m[Ke-[m[K>proxies[k].cells_in[j], sparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K904[m[K[36m[K:[m[K        sparts = &sparts[[01;31m[Ke-[m[K>proxies[k].cells_in[j]->stars.count +
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K911[m[K[36m[K:[m[K        cell_link_bparts([01;31m[Ke-[m[K>proxies[k].cells_in[j], bparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K912[m[K[36m[K:[m[K        bparts = &bparts[[01;31m[Ke-[m[K>proxies[k].cells_in[j]->black_holes.count];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K923[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K964[m[K[36m[K:[m[K  const struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K970[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0 && [01;31m[Ke-[m[K>total_nr_tasks > 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K974[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>nodeID, clocks_get_timesincestart(), [01;31m[Ke-[m[K>total_nr_tasks,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K975[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>total_nr_cells);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K980[m[K[36m[K:[m[K  float tasks_per_cell = (float)nr_tasks / (float)[01;31m[Ke-[m[K>s->tot_cells;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K987[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0 && [01;31m[Ke-[m[K>total_nr_tasks > 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K989[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>tasks_per_cell_max * engine_tasks_per_cell_margin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1000[m[K[36m[K:[m[K  threadpool_map((struct threadpool *)&[01;31m[Ke-[m[K>threadpool,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1006[m[K[36m[K:[m[K         [01;31m[Ke-[m[K>nodeID, clocks_get_timesincestart(), taskID_names[0], counts[0]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K  message("nr_parts = %zu.", [01;31m[Ke-[m[K>s->nr_parts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1016[m[K[36m[K:[m[K  message("nr_gparts = %zu.", [01;31m[Ke-[m[K>s->nr_gparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1017[m[K[36m[K:[m[K  message("nr_sink = %zu.", [01;31m[Ke-[m[K>s->nr_sinks);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1018[m[K[36m[K:[m[K  message("nr_sparts = %zu.", [01;31m[Ke-[m[K>s->nr_sparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1019[m[K[36m[K:[m[K  message("nr_bparts = %zu.", [01;31m[Ke-[m[K>s->nr_bparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1021[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1030[m[K[36m[K:[m[K * If [01;31m[Ke-[m[K>tasks_per_cell is set greater than 0.0 then that value is used
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1040[m[K[36m[K:[m[K  float tasks_per_cell = [01;31m[Ke-[m[K>tasks_per_cell;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1042[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1044[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>tasks_per_cell, (int)([01;31m[Ke-[m[K>s->tot_cells * tasks_per_cell));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1045[m[K[36m[K:[m[K    return (int)([01;31m[Ke-[m[K>s->tot_cells * tasks_per_cell);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1055[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1057[m[K[36m[K:[m[K       26/2 force pairs, 1 drift, 3 ghosts, 2 kicks, 1 tim[01;31m[Ke-[m[Kstep,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1073[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1077[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1084[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1087[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1090[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cooling) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1094[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_star_formation) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1097[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1099[m[K[36m[K:[m[K       26/2 feedback pairs, 1 drift, 3 ghosts, 2 kicks, 1 tim[01;31m[Ke-[m[Kstep,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1108[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1109[m[K[36m[K:[m[K    /* 1 drift, 2 kicks, 1 tim[01;31m[Ke-[m[Kstep, 1 sink formation */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1111[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_stars) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1116[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_fof) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1121[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1125[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1141[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>s->nr_cells; k++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1142[m[K[36m[K:[m[K    struct cell *c = &[01;31m[Ke-[m[K>s->cells_top[k];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1163[m[K[36m[K:[m[K    ntop = [01;31m[Ke-[m[K>s->nr_cells;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1167[m[K[36m[K:[m[K  int ntop = [01;31m[Ke-[m[K>s->nr_cells;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1168[m[K[36m[K:[m[K  int ncells = [01;31m[Ke-[m[K>s->tot_cells;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1175[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1196[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1197[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restarting = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1200[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose && !repartitioned)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1201[m[K[36m[K:[m[K    scheduler_report_task_times(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>nr_threads);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1204[m[K[36m[K:[m[K  scheduler_free_tasks(&[01;31m[Ke-[m[K>sched);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1208[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>free_foreign_when_rebuilding)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1209[m[K[36m[K:[m[K    space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1212[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kbuild the space. */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1213[m[K[36m[K:[m[K  space_rebuild([01;31m[Ke-[m[K>s, repartitioned, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1216[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1219[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->tot_cells,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1220[m[K[36m[K:[m[K        ([01;31m[Ke-[m[K>s->nr_cells + [01;31m[Ke-[m[K>s->tot_cells) * sizeof(struct cell) /
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1224[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose && ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity))
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1228[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->tot_cells,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1229[m[K[36m[K:[m[K        ([01;31m[Ke-[m[K>s->nr_cells + [01;31m[Ke-[m[K>s->tot_cells) * sizeof(struct gravity_tensors) /
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1233[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1237[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_parts, [01;31m[Ke-[m[K>s->size_gparts, [01;31m[Ke-[m[K>s->size_sparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1238[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_sinks, [01;31m[Ke-[m[K>s->size_bparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1239[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_parts * sizeof(struct part) / (1024 * 1024),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1240[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_gparts * sizeof(struct gpart) / (1024 * 1024),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1241[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_sparts * sizeof(struct spart) / (1024 * 1024),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1242[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_sinks * sizeof(struct sink) / (1024 * 1024),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1243[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->size_bparts * sizeof(struct bpart) / (1024 * 1024));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1245[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1249[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts, [01;31m[Ke-[m[K>s->nr_gparts, [01;31m[Ke-[m[K>s->nr_sparts, [01;31m[Ke-[m[K>s->nr_sinks,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1250[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1251[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts ? [01;31m[Ke-[m[K>s->nr_parts / ((double)[01;31m[Ke-[m[K>s->size_parts) : 0.,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1252[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_gparts ? [01;31m[Ke-[m[K>s->nr_gparts / ((double)[01;31m[Ke-[m[K>s->size_gparts) : 0.,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1253[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sparts ? [01;31m[Ke-[m[K>s->nr_sparts / ((double)[01;31m[Ke-[m[K>s->size_sparts) : 0.,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1254[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sinks ? [01;31m[Ke-[m[K>s->nr_sinks / ((double)[01;31m[Ke-[m[K>s->size_sinks) : 0.,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1255[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts ? [01;31m[Ke-[m[K>s->nr_bparts / ((double)[01;31m[Ke-[m[K>s->size_bparts) : 0.);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1261[m[K[36m[K:[m[K      (long long)([01;31m[Ke-[m[K>s->nr_parts - [01;31m[Ke-[m[K>s->nr_extra_parts),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1262[m[K[36m[K:[m[K      (long long)([01;31m[Ke-[m[K>s->nr_gparts - [01;31m[Ke-[m[K>s->nr_extra_gparts),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1263[m[K[36m[K:[m[K      (long long)([01;31m[Ke-[m[K>s->nr_sparts - [01;31m[Ke-[m[K>s->nr_extra_sparts),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1264[m[K[36m[K:[m[K      (long long)([01;31m[Ke-[m[K>s->nr_sinks - [01;31m[Ke-[m[K>s->nr_extra_sinks),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1265[m[K[36m[K:[m[K      (long long)([01;31m[Ke-[m[K>s->nr_bparts - [01;31m[Ke-[m[K>s->nr_extra_bparts)};
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1270[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_parts = num_particles[0];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1271[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_gparts = num_particles[1];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1272[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_sparts = num_particles[2];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1273[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_sinks = num_particles[3];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1274[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_bparts = num_particles[4];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1277[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_parts = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1278[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_gparts = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1279[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_sparts = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1280[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_sinks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1281[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_inhibited_bparts = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1283[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1288[m[K[36m[K:[m[K  part_verify_links([01;31m[Ke-[m[K>s->parts, [01;31m[Ke-[m[K>s->gparts, [01;31m[Ke-[m[K>s->sinks, [01;31m[Ke-[m[K>s->sparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1289[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->bparts, [01;31m[Ke-[m[K>s->nr_parts, [01;31m[Ke-[m[K>s->nr_gparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1290[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->nr_sinks, [01;31m[Ke-[m[K>s->nr_sparts, [01;31m[Ke-[m[K>s->nr_bparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1291[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1295[m[K[36m[K:[m[K  if (clean_smoothing_length_values) space_sanitize([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1300[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) engine_exchange_top_multipoles(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1302[m[K[36m[K:[m[K  space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1310[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1313[m[K[36m[K:[m[K    for (int i = 0; i < [01;31m[Ke-[m[K>s->nr_cells; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1314[m[K[36m[K:[m[K      const struct gravity_tensors *m = &[01;31m[Ke-[m[K>s->multipoles_top[i];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1317[m[K[36m[K:[m[K    if (counter != [01;31m[Ke-[m[K>total_nr_gparts)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1322[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kbuild the tasks. */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1327[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>free_foreign_when_rebuilding)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1332[m[K[36m[K:[m[K  space_list_useful_top_level_cells([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1338[m[K[36m[K:[m[K  space_check_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1339[m[K[36m[K:[m[K                          [01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1341[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1342[m[K[36m[K:[m[K    for (int k = 0; k < [01;31m[Ke-[m[K>s->nr_local_cells; k++)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1343[m[K[36m[K:[m[K      cell_check_foreign_multipole(&[01;31m[Ke-[m[K>s->cells_top[[01;31m[Ke-[m[K>s->local_cells_top[k]]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1346[m[K[36m[K:[m[K  space_check_sort_flags([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1349[m[K[36m[K:[m[K  space_check_unskip_flags([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1357[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) engine_print_task_counts(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1360[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>updates_since_rebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1361[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>g_updates_since_rebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1362[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s_updates_since_rebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1363[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sink_updates_since_rebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1364[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>b_updates_since_rebuild = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1367[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_rebuild;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1369[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1375[m[K[36m[K:[m[K * @brief Prepare the #engine by r[01;31m[Ke-[m[Kbuilding the cells and tasks.
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1390[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>forcerebuild && ![01;31m[Ke-[m[K>forcerepart && ![01;31m[Ke-[m[K>restarting) engine_unskip(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1395[m[K[36m[K:[m[K  MPI_Allreduce(MPI_IN_PLACE, &[01;31m[Ke-[m[K>forcerebuild, 1, MPI_INT, MPI_MAX,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1399[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1405[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_fof && [01;31m[Ke-[m[K>forcerebuild && ![01;31m[Ke-[m[K>forcerepart &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1406[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>run_fof && [01;31m[Ke-[m[K>fof_properties->seed_black_holes_enabled) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1412[m[K[36m[K:[m[K    engine_fof(e, [01;31m[Ke-[m[K>dump_catalogue_when_seeding, /*dump_debug=*/0,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1415[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>dump_catalogue_when_seeding) [01;31m[Ke-[m[K>snapshot_output_count++;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1420[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>restarting && [01;31m[Ke-[m[K>forcerebuild && ![01;31m[Ke-[m[K>forcerepart && [01;31m[Ke-[m[K>step > 1) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1430[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>forcerepart) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1437[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1438[m[K[36m[K:[m[K      pm_mesh_free([01;31m[Ke-[m[K>mesh);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1445[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1446[m[K[36m[K:[m[K      pm_mesh_allocate([01;31m[Ke-[m[K>mesh);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1450[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>forcerebuild) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1453[m[K[36m[K:[m[K    if (![01;31m[Ke-[m[K>restarting && !drifted_all) engine_drift_all(e, /*drift_mpole=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1462[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>forcerepart || [01;31m[Ke-[m[K>forcerebuild) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1466[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->cells_top != NULL)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1467[m[K[36m[K:[m[K      space_check_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1468[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1472[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Krank the tasks every now and then. XXX this never executes. */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1473[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>tasks_age % engine_tasksreweight == 1) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1474[m[K[36m[K:[m[K    scheduler_reweight(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1476[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tasks_age += 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1480[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1495[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>wait_barrier);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1498[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>run_barrier);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1514[m[K[36m[K:[m[K  space_check_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current, /*chek_mpoles=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1517[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1518[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1520[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1523[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1526[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1527[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1529[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1532[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1540[m[K[36m[K:[m[K  stats_collect([01;31m[Ke-[m[K>s, &stats);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1558[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1559[m[K[36m[K:[m[K    stats_write_to_file([01;31m[Ke-[m[K>file_stats, &global_stats, [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>cosmology->a,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1560[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>cosmology->z, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1563[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_statistics;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1565[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1577[m[K[36m[K:[m[K  struct task *tasks = [01;31m[Ke-[m[K>sched.tasks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1578[m[K[36m[K:[m[K  const int nr_tasks = [01;31m[Ke-[m[K>sched.nr_tasks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1640[m[K[36m[K:[m[K  space_map_cells_pre([01;31m[Ke-[m[K>s, 1, cell_clear_drift_flags, NULL);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1641[m[K[36m[K:[m[K  space_map_cells_pre([01;31m[Ke-[m[K>s, 1, cell_clear_limiter_flags, NULL);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1651[m[K[36m[K:[m[K  struct task *tasks = [01;31m[Ke-[m[K>sched.tasks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1652[m[K[36m[K:[m[K  const int nr_tasks = [01;31m[Ke-[m[K>sched.nr_tasks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1666[m[K[36m[K:[m[K  space_map_cells_pre([01;31m[Ke-[m[K>s, 1, cell_clear_drift_flags, NULL);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1679[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset all the cell task counters to 0 */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1680[m[K[36m[K:[m[K  space_reset_task_counters([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1684[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_threads; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1685[m[K[36m[K:[m[K    runner_reset_active_time(&[01;31m[Ke-[m[K>runners[i]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1689[m[K[36m[K:[m[K  atomic_inc(&[01;31m[Ke-[m[K>sched.waiting);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1692[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>run_barrier);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1695[m[K[36m[K:[m[K  scheduler_start(&[01;31m[Ke-[m[K>sched);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1698[m[K[36m[K:[m[K  pthread_mutex_lock(&[01;31m[Ke-[m[K>sched.sleep_mutex);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1699[m[K[36m[K:[m[K  atomic_dec(&[01;31m[Ke-[m[K>sched.waiting);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1700[m[K[36m[K:[m[K  pthread_cond_broadcast(&[01;31m[Ke-[m[K>sched.sleep_cond);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1701[m[K[36m[K:[m[K  pthread_mutex_unlock(&[01;31m[Ke-[m[K>sched.sleep_mutex);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1704[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>wait_barrier);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1707[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.total_ticks += getticks() - tic;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1711[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_threads; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1712[m[K[36m[K:[m[K    active_time += runner_get_active_time(&[01;31m[Ke-[m[K>runners[i]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1714[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.active_ticks += active_time;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1715[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.waiting_ticks += getticks() - tic;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1717[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1732[m[K[36m[K:[m[K  space_first_init_parts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1733[m[K[36m[K:[m[K  space_first_init_gparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1734[m[K[36m[K:[m[K  space_first_init_sparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1735[m[K[36m[K:[m[K  space_first_init_bparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1736[m[K[36m[K:[m[K  space_first_init_sinks([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1738[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1750[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_parts_id = space_get_max_parts_id([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1753[m[K[36m[K:[m[K  MPI_Allreduce(MPI_IN_PLACE, &[01;31m[Ke-[m[K>max_parts_id, 1, MPI_LONG_LONG_INT, MPI_MAX,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1760[m[K[36m[K:[m[K * regular tim[01;31m[Ke-[m[Ksteps.
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1767[m[K[36m[K:[m[K  if (!([01;31m[Ke-[m[K>policy & engine_policy_rt)) return;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1774[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step, [01;31m[Ke-[m[K>min_active_bin_subcycle, [01;31m[Ke-[m[K>max_active_bin_subcycle, [01;31m[Ke-[m[K>rt_updates);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1778[m[K[36m[K:[m[K  integertime_t ti_old_store = [01;31m[Ke-[m[K>ti_old;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1779[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_old = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1781[m[K[36m[K:[m[K  const integertime_t rt_step_size = [01;31m[Ke-[m[K>ti_rt_end_min - [01;31m[Ke-[m[K>ti_old;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1787[m[K[36m[K:[m[K  const int nr_rt_cycles = ([01;31m[Ke-[m[K>ti_end_min - [01;31m[Ke-[m[K>ti_old) / rt_step_size;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1795[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>rt_updates = 0ll;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1796[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_current_subcycle = [01;31m[Ke-[m[K>ti_current + sub_cycle * rt_step_size;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1797[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>max_active_bin_subcycle = get_max_active_bin([01;31m[Ke-[m[K>ti_current_subcycle);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1798[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>min_active_bin_subcycle = get_min_active_bin(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1799[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>ti_current_subcycle, [01;31m[Ke-[m[K>ti_current_subcycle - rt_step_size);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1802[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) 
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1804[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>ti_current_subcycle * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1805[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_old =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1806[m[K[36m[K:[m[K        ([01;31m[Ke-[m[K>ti_current_subcycle - rt_step_size) * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1807[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_step = rt_step_size * [01;31m[Ke-[m[K>time_base;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1812[m[K[36m[K:[m[K    message("step %6d cycle %3d time=%13.6e     min_active_bin=%d max_active_bin=%d rt_updates=%18lld", [01;31m[Ke-[m[K>step, sub_cycle,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1813[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>min_active_bin, [01;31m[Ke-[m[K>max_active_bin, [01;31m[Ke-[m[K>rt_updates);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1818[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>rt_updates = 0ll;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1819[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_old = ti_old_store;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1820[m[K[36m[K:[m[K  /* [01;31m[Ke-[m[K>ti_current = -1; we NEVER update [01;31m[Ke-[m[K>ti_current */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1821[m[K[36m[K:[m[K  /* [01;31m[Ke-[m[K>max_active_bin = get_max_active_bin([01;31m[Ke-[m[K>ti_end_min); */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1822[m[K[36m[K:[m[K  /* [01;31m[Ke-[m[K>min_active_bin = get_min_active_bin([01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_old); */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1838[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1844[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.active_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1845[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.waiting_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1848[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1849[m[K[36m[K:[m[K    gravity_props_update([01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1852[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1853[m[K[36m[K:[m[K    hydro_props_update([01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>gravity_properties,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1854[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1857[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) message("Setting particles to a valid state...");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1860[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1867[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1870[m[K[36m[K:[m[K    pm_mesh_compute_potential([01;31m[Ke-[m[K>mesh, [01;31m[Ke-[m[K>s, &[01;31m[Ke-[m[K>threadpool, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1872[m[K[36m[K:[m[K    /* Compute mesh tim[01;31m[Ke-[m[Kstep length */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1875[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>step_props |= engine_step_prop_mesh;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1882[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) engine_print_task_counts(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1885[m[K[36m[K:[m[K  space_init_parts(s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1886[m[K[36m[K:[m[K  space_init_gparts(s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1887[m[K[36m[K:[m[K  space_init_sparts(s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1888[m[K[36m[K:[m[K  space_init_bparts(s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1889[m[K[36m[K:[m[K  space_init_sinks(s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1892[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_cooling) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1893[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_temperature))
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1894[m[K[36m[K:[m[K    cooling_update([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1897[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1899[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1900[m[K[36m[K:[m[K      csds_log_timestamp([01;31m[Ke-[m[K>csds, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>cosmology->a,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1901[m[K[36m[K:[m[K                         &[01;31m[Ke-[m[K>csds->timestamp_offset);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1903[m[K[36m[K:[m[K      csds_log_timestamp([01;31m[Ke-[m[K>csds, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1904[m[K[36m[K:[m[K                         &[01;31m[Ke-[m[K>csds->timestamp_offset);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1908[m[K[36m[K:[m[K    csds_ensure_size([01;31m[Ke-[m[K>csds, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1909[m[K[36m[K:[m[K    csds_write_description([01;31m[Ke-[m[K>csds, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1919[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce hydro calculation for some parts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1920[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1921[m[K[36m[K:[m[K    hydro_exact_density_compute([01;31m[Ke-[m[K>s, e, /*check_force=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1924[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1925[m[K[36m[K:[m[K    hydro_exact_density_check([01;31m[Ke-[m[K>s, e, /*rel_tol=*/1[01;31m[Ke-[m[K3, /*check_force=*/0);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1931[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) message("Converting internal energy variable.");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1933[m[K[36m[K:[m[K    space_convert_quantities([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1944[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1945[m[K[36m[K:[m[K    space_convert_rt_quantities([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1948[m[K[36m[K:[m[K  space_collect_mean_masses([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1953[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1954[m[K[36m[K:[m[K    for (int i = 0; i < [01;31m[Ke-[m[K>s->nr_cells; ++i)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1955[m[K[36m[K:[m[K      num_gpart_mpole += [01;31m[Ke-[m[K>s->cells_top[i].grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1956[m[K[36m[K:[m[K    if (num_gpart_mpole != [01;31m[Ke-[m[K>total_nr_gparts)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1961[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>total_nr_gparts, num_gpart_mpole);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1965[m[K[36m[K:[m[K  /* Now time to get ready for the first tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1966[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) message("Running initial fake tim[01;31m[Ke-[m[Kstep.");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1969[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[K    gravity_props_update_MAC_choice([01;31m[Ke-[m[K>gravity_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1979[m[K[36m[K:[m[K  space_init_parts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1980[m[K[36m[K:[m[K  space_init_gparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1981[m[K[36m[K:[m[K  space_init_sparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1982[m[K[36m[K:[m[K  space_init_bparts([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1983[m[K[36m[K:[m[K  space_init_sinks([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1986[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) engine_print_task_counts(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1989[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce gravity calculation for some gparts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1990[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1991[m[K[36m[K:[m[K    gravity_exact_force_compute([01;31m[Ke-[m[K>s, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1994[m[K[36m[K:[m[K  scheduler_write_dependencies(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>verbose, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1995[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) scheduler_write_task_level(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K1997[m[K[36m[K:[m[K  /* Run the 0th tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2003[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce hydro calculation for some parts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2004[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2005[m[K[36m[K:[m[K    hydro_exact_density_compute([01;31m[Ke-[m[K>s, e, /*check_force=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2008[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2009[m[K[36m[K:[m[K    hydro_exact_density_check([01;31m[Ke-[m[K>s, e, /*rel_tol=*/1[01;31m[Ke-[m[K3, /*check_force=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2013[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce stars calculation for some parts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2014[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars) stars_exact_density_compute([01;31m[Ke-[m[K>s, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2017[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2018[m[K[36m[K:[m[K    stars_exact_density_check([01;31m[Ke-[m[K>s, e, /*rel_tol=*/1[01;31m[Ke-[m[K3);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2023[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2024[m[K[36m[K:[m[K    gravity_exact_force_check([01;31m[Ke-[m[K>s, e, 1[01;31m[Ke-[m[K1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2029[m[K[36m[K:[m[K  space_check_limiter([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2030[m[K[36m[K:[m[K  space_check_swallow([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2034[m[K[36m[K:[m[K  const ticks deadticks = ([01;31m[Ke-[m[K>nr_threads * [01;31m[Ke-[m[K>sched.deadtime.waiting_ticks) -
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2035[m[K[36m[K:[m[K                          [01;31m[Ke-[m[K>sched.deadtime.active_ticks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2036[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>local_deadtime = clocks_from_ticks(deadticks);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2038[m[K[36m[K:[m[K  /* Recover the (integer) end of the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2051[m[K[36m[K:[m[K      /* Ignore fake buffer particles for on-th[01;31m[Ke-[m[Kfly creation */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2056[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2077[m[K[36m[K:[m[K      /* Ignore fake buffer particles for on-th[01;31m[Ke-[m[Kfly creation */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2082[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2149[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2150[m[K[36m[K:[m[K    space_convert_rt_quantities_after_zeroth_step([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2156[m[K[36m[K:[m[K  space_check_timesteps([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2157[m[K[36m[K:[m[K  part_verify_links([01;31m[Ke-[m[K>s->parts, [01;31m[Ke-[m[K>s->gparts, [01;31m[Ke-[m[K>s->sinks, [01;31m[Ke-[m[K>s->sparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2158[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->bparts, [01;31m[Ke-[m[K>s->nr_parts, [01;31m[Ke-[m[K>s->nr_gparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2159[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->nr_sinks, [01;31m[Ke-[m[K>s->nr_sparts, [01;31m[Ke-[m[K>s->nr_bparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2160[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2167[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2168[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2169[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>wallclock_time = (float)clocks_diff(&time1, &time2);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2172[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>force_checks_snapshot_flag = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2175[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) message("took %.3f %s.", [01;31m[Ke-[m[K>wallclock_time, clocks_getunit());
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2191[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.active_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2192[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.deadtime.waiting_ticks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2199[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tic_step = getticks();
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2201[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2203[m[K[36m[K:[m[K    const double dead_time = [01;31m[Ke-[m[K>global_deadtime / ([01;31m[Ke-[m[K>nr_nodes * [01;31m[Ke-[m[K>nr_threads);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2211[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>step, [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>cosmology->a, [01;31m[Ke-[m[K>cosmology->z, [01;31m[Ke-[m[K>time_step,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2212[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>min_active_bin, [01;31m[Ke-[m[K>max_active_bin, [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2213[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s_updates, [01;31m[Ke-[m[K>sink_updates, [01;31m[Ke-[m[K>b_updates, [01;31m[Ke-[m[K>wallclock_time,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2214[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>step_props, dead_time);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2220[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_star_formation) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2222[m[K[36m[K:[m[K      star_formation_logger_write_to_log_file([01;31m[Ke-[m[K>sfh_logger, [01;31m[Ke-[m[K>time,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2223[m[K[36m[K:[m[K                                              [01;31m[Ke-[m[K>cosmology->a, [01;31m[Ke-[m[K>cosmology->z,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2224[m[K[36m[K:[m[K                                              [01;31m[Ke-[m[K>sfh, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2227[m[K[36m[K:[m[K      fflush([01;31m[Ke-[m[K>sfh_logger);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2229[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>step % 32 == 0) fflush([01;31m[Ke-[m[K>sfh_logger);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2233[m[K[36m[K:[m[K    if (![01;31m[Ke-[m[K>restarting)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2235[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>file_timesteps,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2238[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step, [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>cosmology->a, [01;31m[Ke-[m[K>cosmology->z, [01;31m[Ke-[m[K>time_step,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2239[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>min_active_bin, [01;31m[Ke-[m[K>max_active_bin, [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2240[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>s_updates, [01;31m[Ke-[m[K>sink_updates, [01;31m[Ke-[m[K>b_updates, [01;31m[Ke-[m[K>wallclock_time,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2241[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step_props, dead_time);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2243[m[K[36m[K:[m[K    fflush([01;31m[Ke-[m[K>file_timesteps);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2246[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2252[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restarting) space_rebuild([01;31m[Ke-[m[K>s, 0, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2255[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_old = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2256[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_current = [01;31m[Ke-[m[K>ti_end_min;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2257[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_active_bin = get_max_active_bin([01;31m[Ke-[m[K>ti_end_min);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2258[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>min_active_bin = get_min_active_bin([01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>ti_old);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2259[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step += 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2260[m[K[36m[K:[m[K  engine_current_step = [01;31m[Ke-[m[K>step;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2261[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props = engine_step_prop_none;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2265[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_active_bin_subcycle = get_max_active_bin([01;31m[Ke-[m[K>ti_end_min);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2266[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>min_active_bin_subcycle = get_min_active_bin([01;31m[Ke-[m[K>ti_end_min, [01;31m[Ke-[m[K>ti_current_subcycle); 
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2267[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_current_subcycle = [01;31m[Ke-[m[K>ti_end_min; 
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2270[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restarting) engine_drift_all(e, /*drift_mpole=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2272[m[K[36m[K:[m[K  /* Get the physical value of the time and tim[01;31m[Ke-[m[Kstep size */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2273[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2274[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_old = [01;31m[Ke-[m[K>time;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2275[m[K[36m[K:[m[K    cosmology_update([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2276[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>cosmology->time;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2277[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_step = [01;31m[Ke-[m[K>time - [01;31m[Ke-[m[K>time_old;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2279[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2280[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_old = [01;31m[Ke-[m[K>ti_old * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2281[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_step = ([01;31m[Ke-[m[K>ti_current - [01;31m[Ke-[m[K>ti_old) * [01;31m[Ke-[m[K>time_base;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2287[m[K[36m[K:[m[K  lightcone_array_prepare_for_step([01;31m[Ke-[m[K>lightcone_array_properties, [01;31m[Ke-[m[K>cosmology,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2288[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>ti_earliest_undrifted, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2292[m[K[36m[K:[m[K  /* OK, we now know what the next end of tim[01;31m[Ke-[m[Kstep is */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2298[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_cooling) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2299[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_temperature))
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2300[m[K[36m[K:[m[K    cooling_update([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2303[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2304[m[K[36m[K:[m[K    gravity_props_update([01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2307[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2308[m[K[36m[K:[m[K    hydro_props_update([01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>gravity_properties,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2309[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2311[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2315[m[K[36m[K:[m[K  /* Trigger a tre[01;31m[Ke-[m[Krebuild if we passed the frequency threshold */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2316[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2317[m[K[36m[K:[m[K      ((double)[01;31m[Ke-[m[K>g_updates_since_rebuild >
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2318[m[K[36m[K:[m[K       ((double)[01;31m[Ke-[m[K>total_nr_gparts) * [01;31m[Ke-[m[K>gravity_properties->rebuild_frequency))
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2319[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2322[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_fof && ![01;31m[Ke-[m[K>restarting) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2323[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_fof && [01;31m[Ke-[m[K>ti_next_fof > 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2324[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>run_fof = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2325[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2329[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2330[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>mesh->ti_end_mesh_next == [01;31m[Ke-[m[K>ti_current)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2331[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2334[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>ti_current + ([01;31m[Ke-[m[K>ti_current - [01;31m[Ke-[m[K>ti_old) > [01;31m[Ke-[m[K>ti_next_snapshot &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2335[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_snapshot > 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2336[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_fof) && [01;31m[Ke-[m[K>snapshot_invoke_fof) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2337[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2342[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2344[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2345[m[K[36m[K:[m[K      csds_log_timestamp([01;31m[Ke-[m[K>csds, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>cosmology->a,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2346[m[K[36m[K:[m[K                         &[01;31m[Ke-[m[K>csds->timestamp_offset);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2348[m[K[36m[K:[m[K      csds_log_timestamp([01;31m[Ke-[m[K>csds, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2349[m[K[36m[K:[m[K                         &[01;31m[Ke-[m[K>csds->timestamp_offset);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2353[m[K[36m[K:[m[K    csds_ensure_size([01;31m[Ke-[m[K>csds, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2358[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_drift_all && ![01;31m[Ke-[m[K>forcerebuild)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2362[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && ![01;31m[Ke-[m[K>forcerebuild) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2364[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_reconstruct_mpoles)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2380[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) engine_print_task_counts(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2384[m[K[36m[K:[m[K    // dumpCells("cells", 1, 0, 0, 0, [01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>nodeID, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2389[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2390[m[K[36m[K:[m[K    for (int i = 0; i < [01;31m[Ke-[m[K>s->nr_cells; ++i)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2391[m[K[36m[K:[m[K      num_gpart_mpole += [01;31m[Ke-[m[K>s->cells_top[i].grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2392[m[K[36m[K:[m[K    if (num_gpart_mpole != [01;31m[Ke-[m[K>total_nr_gparts)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2396[m[K[36m[K:[m[K          num_gpart_mpole, [01;31m[Ke-[m[K>total_nr_gparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2403[m[K[36m[K:[m[K  rt_debugging_checks_start_of_step(e, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2408[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>force_checks_only_all_active) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2409[m[K[36m[K:[m[K    size_t nr_gparts = [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2410[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>all_gparts_active = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2414[m[K[36m[K:[m[K      struct gpart *gp = &[01;31m[Ke-[m[K>s->gparts[i];
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2418[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>all_gparts_active = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2425[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2427[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>all_gparts_active && [01;31m[Ke-[m[K>force_checks_only_all_active) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2428[m[K[36m[K:[m[K        ![01;31m[Ke-[m[K>force_checks_only_all_active) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2430[m[K[36m[K:[m[K      if (([01;31m[Ke-[m[K>force_checks_snapshot_flag &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2431[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>force_checks_only_at_snapshots) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2432[m[K[36m[K:[m[K          ![01;31m[Ke-[m[K>force_checks_only_at_snapshots) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2435[m[K[36m[K:[m[K        gravity_exact_force_compute([01;31m[Ke-[m[K>s, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2441[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kcompute the mesh forces */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2442[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2443[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>mesh->ti_end_mesh_next == [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2449[m[K[36m[K:[m[K    pm_mesh_compute_potential([01;31m[Ke-[m[K>mesh, [01;31m[Ke-[m[K>s, &[01;31m[Ke-[m[K>threadpool, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2451[m[K[36m[K:[m[K    /* Check whether we need to update the mesh tim[01;31m[Ke-[m[Kstep length */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2454[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>step_props |= engine_step_prop_mesh;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2465[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>sched.frequency_dependency != 0 &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2466[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>step % [01;31m[Ke-[m[K>sched.frequency_dependency == 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2467[m[K[36m[K:[m[K    scheduler_write_dependencies(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>verbose, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2470[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>sched.frequency_task_levels != 0 &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2471[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>step % [01;31m[Ke-[m[K>sched.frequency_task_levels == 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2472[m[K[36m[K:[m[K    scheduler_write_task_level(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>step);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2484[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>usertime_last_step = end_usertime - start_usertime;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2485[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>systime_last_step = end_systime - start_systime;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2489[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce hydro calculation for some parts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2490[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2491[m[K[36m[K:[m[K    hydro_exact_density_compute([01;31m[Ke-[m[K>s, e, /*check_force=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2494[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2495[m[K[36m[K:[m[K    hydro_exact_density_check([01;31m[Ke-[m[K>s, e, /*rel_tol=*/1[01;31m[Ke-[m[K3, /*check_force=*/1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2499[m[K[36m[K:[m[K  /* Run the brut[01;31m[Ke-[m[Kforce stars calculation for some parts */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2500[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars) stars_exact_density_compute([01;31m[Ke-[m[K>s, e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2503[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_stars)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2504[m[K[36m[K:[m[K    stars_exact_density_check([01;31m[Ke-[m[K>s, e, /*rel_tol=*/1[01;31m[Ke-[m[K2);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2509[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2511[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>all_gparts_active && [01;31m[Ke-[m[K>force_checks_only_all_active) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2512[m[K[36m[K:[m[K        ![01;31m[Ke-[m[K>force_checks_only_all_active) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2514[m[K[36m[K:[m[K      if (([01;31m[Ke-[m[K>force_checks_snapshot_flag &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2515[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>force_checks_only_at_snapshots) ||
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2516[m[K[36m[K:[m[K          ![01;31m[Ke-[m[K>force_checks_only_at_snapshots) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2519[m[K[36m[K:[m[K        gravity_exact_force_check([01;31m[Ke-[m[K>s, e, 1[01;31m[Ke-[m[K1);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2522[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>force_checks_snapshot_flag = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2530[m[K[36m[K:[m[K  space_check_limiter([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2531[m[K[36m[K:[m[K  space_check_sort_flags([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2532[m[K[36m[K:[m[K  space_check_swallow([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2535[m[K[36m[K:[m[K  space_check_unskip_flags([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2539[m[K[36m[K:[m[K  const ticks deadticks = ([01;31m[Ke-[m[K>nr_threads * [01;31m[Ke-[m[K>sched.deadtime.waiting_ticks) -
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2540[m[K[36m[K:[m[K                          [01;31m[Ke-[m[K>sched.deadtime.active_ticks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2541[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>local_deadtime = clocks_from_ticks(deadticks);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2543[m[K[36m[K:[m[K  /* Collect information about the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2545[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = [01;31m[Ke-[m[K>collect_group1.forcerebuild;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2546[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>updates_since_rebuild += [01;31m[Ke-[m[K>collect_group1.updated;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2547[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>g_updates_since_rebuild += [01;31m[Ke-[m[K>collect_group1.g_updated;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2548[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s_updates_since_rebuild += [01;31m[Ke-[m[K>collect_group1.s_updated;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2549[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sink_updates_since_rebuild += [01;31m[Ke-[m[K>collect_group1.sink_updated;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2550[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>b_updates_since_rebuild += [01;31m[Ke-[m[K>collect_group1.b_updated;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2553[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>collect_group1.updated == [01;31m[Ke-[m[K>total_nr_parts) &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2554[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>collect_group1.g_updated == [01;31m[Ke-[m[K>total_nr_gparts) &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2555[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>collect_group1.s_updated == [01;31m[Ke-[m[K>total_nr_sparts) &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2556[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>collect_group1.sink_updated == [01;31m[Ke-[m[K>total_nr_sinks) &&
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2557[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>collect_group1.b_updated == [01;31m[Ke-[m[K>total_nr_bparts))
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2558[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_earliest_undrifted = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2561[m[K[36m[K:[m[K  /* TODO: reset [01;31m[Ke-[m[K>max_active_timebin only when subcycling RT since
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2563[m[K[36m[K:[m[K  /* [01;31m[Ke-[m[K>max_active_bin = get_max_active_bin([01;31m[Ke-[m[K>ti_end_min); */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2564[m[K[36m[K:[m[K  /* Verify that all cells have correct tim[01;31m[Ke-[m[Kstep information */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2565[m[K[36m[K:[m[K  space_check_timesteps([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2567[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>ti_end_min == [01;31m[Ke-[m[K>ti_current && [01;31m[Ke-[m[K>ti_end_min < max_nr_timesteps)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2568[m[K[36m[K:[m[K    error("Obtained a tim[01;31m[Ke-[m[Kstep of size 0");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2578[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds && [01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2580[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.csds_file_size_gb);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2589[m[K[36m[K:[m[K  const int flush = [01;31m[Ke-[m[K>flush_lightcone_maps;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2590[m[K[36m[K:[m[K  lightcone_array_flush([01;31m[Ke-[m[K>lightcone_array_properties, &([01;31m[Ke-[m[K>threadpool),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2591[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2597[m[K[36m[K:[m[K  engine_dump_restarts(e, 0, [01;31m[Ke-[m[K>restart_onexit && engine_is_done(e));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2604[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2605[m[K[36m[K:[m[K    rt_debugging_checks_end_of_step(e, [01;31m[Ke-[m[K>verbose);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2612[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>wallclock_time = (float)clocks_diff(&time1, &time2);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2615[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>toc_step = getticks();
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2622[m[K[36m[K:[m[K  return !([01;31m[Ke-[m[K>ti_current < max_nr_timesteps);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2633[m[K[36m[K:[m[K    if (c != NULL && c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2636[m[K[36m[K:[m[K      cell_make_multipoles(c, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>gravity_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2651[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2652[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2654[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2657[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2661[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_reconstruct_multipoles_mapper,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2662[m[K[36m[K:[m[K                 [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2665[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2682[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2685[m[K[36m[K:[m[K  partition_initial_partition(initial_partition, [01;31m[Ke-[m[K>nodeID, [01;31m[Ke-[m[K>nr_nodes, s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2692[m[K[36m[K:[m[K  const int with_csds = [01;31m[Ke-[m[K>policy & engine_policy_csds;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2693[m[K[36m[K:[m[K  if (with_csds) [01;31m[Ke-[m[K>policy &= ~engine_policy_csds;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2699[m[K[36m[K:[m[K  if (with_csds) [01;31m[Ke-[m[K>policy |= engine_policy_csds;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2701[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2717[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>total_nr_sparts > 1e5) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2723[m[K[36m[K:[m[K  size_t *n_sparts = (size_t *)malloc([01;31m[Ke-[m[K>nr_nodes * sizeof(size_t));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2725[m[K[36m[K:[m[K  int err = MPI_Allgather(&[01;31m[Ke-[m[K>s->nr_sparts_foreign, 1, MPI_UNSIGNED_LONG,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2731[m[K[36m[K:[m[K  int *n_sparts_int = (int *)malloc([01;31m[Ke-[m[K>nr_nodes * sizeof(int));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2732[m[K[36m[K:[m[K  int *displs = (int *)malloc([01;31m[Ke-[m[K>nr_nodes * sizeof(int));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2733[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_nodes; i++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2742[m[K[36m[K:[m[K  err = MPI_Allgatherv([01;31m[Ke-[m[K>s->sparts_foreign, [01;31m[Ke-[m[K>s->nr_sparts_foreign,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2748[m[K[36m[K:[m[K  for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_sparts_foreign; i++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2749[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>s->sparts_foreign[i].num_ngb_feedback = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2753[m[K[36m[K:[m[K  struct spart *local_sparts = [01;31m[Ke-[m[K>s->sparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2754[m[K[36m[K:[m[K  for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_sparts; i++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2963[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s = s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2964[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>policy = policy;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2965[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2966[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_parts = Ngas;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2967[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_gparts = Ngparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2968[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_sparts = Nstars;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2969[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_sinks = Nsinks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2970[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_bparts = Nblackholes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2971[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_DM_background_gparts = Nbackground_gparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2972[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_neutrino_gparts = Nnuparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2973[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>proxy_ind = NULL;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2974[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_proxies = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2975[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>reparttype = reparttype;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2976[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_old = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2977[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_current = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2978[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_earliest_undrifted = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2979[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_step = 0.;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2980[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_base = 0.;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2981[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_base_inv = 0.;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2982[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_begin = 0.;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2983[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_end = 0.;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2984[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_active_bin = num_time_bins;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2985[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>min_active_bin = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2986[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_current_subcycle = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2987[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_active_bin_subcycle = num_time_bins;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2988[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>min_active_bin_subcycle = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2989[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>internal_units = internal_units;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2990[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_list_snapshots = NULL;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2991[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>a_first_snapshot =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2993[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_first_snapshot =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2995[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>delta_time_snapshot =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2997[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_next_snapshot = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2998[m[K[36m[K:[m[K  parser_get_param_string(params, "Snapshots:basename", [01;31m[Ke-[m[K>snapshot_base_name);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K2999[m[K[36m[K:[m[K  parser_get_opt_param_string(params, "Snapshots:subdir", [01;31m[Ke-[m[K>snapshot_subdir,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3002[m[K[36m[K:[m[K                                 swift_type_count, [01;31m[Ke-[m[K>snapshot_subsample);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3005[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>snapshot_subsample_fraction);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3006[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_run_on_dump =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3008[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_run_on_dump) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3010[m[K[36m[K:[m[K                            [01;31m[Ke-[m[K>snapshot_dump_command);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3012[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_compression =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3014[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_distributed =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3016[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_lustre_OST_count =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3018[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_invoke_stf =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3020[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_invoke_fof =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3022[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_use_delta_from_edge =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3024[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_use_delta_from_edge) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3025[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>snapshot_delta_from_edge =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3028[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>dump_catalogue_when_seeding =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3030[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_units = (struct unit_system *)malloc(sizeof(struct unit_system));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3031[m[K[36m[K:[m[K  units_init_default([01;31m[Ke-[m[K>snapshot_units, params, "Snapshots", internal_units);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3032[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>free_foreign_when_dumping_restart = parser_get_opt_param_int(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3034[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>free_foreign_when_rebuilding = parser_get_opt_param_int(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3036[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_output_count = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3037[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stf_output_count = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3038[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>los_output_count = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3039[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>dt_min = parser_get_param_double(params, "TimeIntegration:dt_min");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3040[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>dt_max = parser_get_param_double(params, "TimeIntegration:dt_max");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3041[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>dt_max_RMS_displacement = FLT_MAX;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3042[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_RMS_displacement_factor = parser_get_opt_param_double(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3044[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_RMS_dt_use_only_gas = parser_get_opt_param_int(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3046[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>dt_kick_grav_mesh_for_io = 0.f;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3047[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>a_first_statistics =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3049[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time_first_statistics =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3051[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>delta_time_statistics =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3053[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_next_stats = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3054[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_next_stf = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3055[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_next_fof = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3056[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>verbose = verbose;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3057[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>wallclock_time = 0.f;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3058[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>physical_constants = physical_constants;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3059[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>cosmology = cosmo;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3060[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>hydro_properties = hydro;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3061[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>entropy_floor = entropy_floor;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3062[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>gravity_properties = gravity;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3063[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stars_properties = stars;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3064[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>black_holes_properties = black_holes;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3065[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sink_properties = sinks;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3066[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>neutrino_properties = neutrinos;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3067[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>neutrino_response = neutrino_response;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3068[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh = mesh;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3069[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>external_potential = potential;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3070[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>cooling_func = cooling_func;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3071[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>star_formation = starform;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3072[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>feedback_props = feedback;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3073[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>pressure_floor_props = pressure_floor;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3074[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>rt_props = rt;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3075[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>chemistry = chemistry;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3076[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>io_extra_props = io_extra_props;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3077[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>fof_properties = fof_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3078[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>parameter_file = params;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3079[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_options = output_options;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3080[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stf_this_timestep = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3081[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>los_properties = los_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3082[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>lightcone_array_properties = lightcone_array_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3083[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ics_metadata = ics_metadata;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3085[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>usertime_last_step = 0.0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3086[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>systime_last_step = 0.0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3087[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>last_repartition = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3089[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_cells = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3090[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>total_nr_tasks = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3093[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>force_checks_only_all_active =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3095[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>force_checks_only_at_snapshots =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3103[m[K[36m[K:[m[K  memset([01;31m[Ke-[m[K>run_name, 0, PARSER_MAX_LINE_SIZE);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3104[m[K[36m[K:[m[K  parser_get_opt_param_string(params, "MetaData:run_name", [01;31m[Ke-[m[K>run_name,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3106[m[K[36m[K:[m[K  if (strlen([01;31m[Ke-[m[K>run_name) == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3111[m[K[36m[K:[m[K  if (!([01;31m[Ke-[m[K>policy & engine_policy_cosmology)) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3112[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_begin =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3114[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_end = parser_get_param_double(params, "TimeIntegration:time_end");
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3115[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_old = [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3116[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3118[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_base = ([01;31m[Ke-[m[K>time_end - [01;31m[Ke-[m[K>time_begin) / max_nr_timesteps;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3119[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_base_inv = 1.0 / [01;31m[Ke-[m[K>time_base;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3120[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_current = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3123[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_begin = [01;31m[Ke-[m[K>cosmology->time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3124[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_end = [01;31m[Ke-[m[K>cosmology->time_end;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3125[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_old = [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3126[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>time_begin;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3129[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_base = [01;31m[Ke-[m[K>cosmology->time_base;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3130[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_base_inv = [01;31m[Ke-[m[K>cosmology->time_base_inv;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3131[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_current = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3135[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3137[m[K[36m[K:[m[K                            [01;31m[Ke-[m[K>stf_base_name);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3139[m[K[36m[K:[m[K                                [01;31m[Ke-[m[K>stf_subdir_per_output,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3142[m[K[36m[K:[m[K                            [01;31m[Ke-[m[K>stf_config_file_name);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3144[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_first_stf_output =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3146[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>a_first_stf_output = parser_get_opt_param_double(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3148[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>delta_time_stf =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3153[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_line_of_sight) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3154[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_first_los =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3156[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>a_first_los = parser_get_opt_param_double(
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3158[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>delta_time_los =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3163[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_fof) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3165[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>time_first_fof_call =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3167[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>a_first_fof_call =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3169[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>delta_time_fof =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3172[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>snapshot_invoke_fof)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3177[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_star_formation) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3178[m[K[36m[K:[m[K    star_formation_logger_accumulator_init(&[01;31m[Ke-[m[K>sfh);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3184[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>neutrino_mass_conversion_factor =
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3186[m[K[36m[K:[m[K                             neutrino_volume, [01;31m[Ke-[m[K>total_nr_neutrino_gparts);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3188[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>neutrino_mass_conversion_factor = 0.f;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3199[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3200[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>csds = (struct csds_writer *)malloc(sizeof(struct csds_writer));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3201[m[K[36m[K:[m[K    csds_init([01;31m[Ke-[m[K>csds, e, params);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3214[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3218[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>policy & (1 << k)) printf(" '%s' ", engine_policy_names[k + 1]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3226[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & (1 << k)) printf(" '%s' ", engine_policy_names[k + 1]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3233[m[K[36m[K:[m[K * @brief Computes the maximal tim[01;31m[Ke-[m[Kstep allowed by the max RMS displacement
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3243[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3244[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3249[m[K[36m[K:[m[K  const float G_newton = [01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3255[m[K[36m[K:[m[K    float min_mass[swift_type_count] = {[01;31m[Ke-[m[K>s->min_part_mass,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3256[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->min_gpart_mass,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3258[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->min_sink_mass,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3259[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->min_spart_mass,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3260[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->min_bpart_mass,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3271[m[K[36m[K:[m[K    for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_parts; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3272[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>s->parts[i].time_bin >= num_time_bins) continue;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3274[m[K[36m[K:[m[K          min(min_part_mass_check, hydro_get_mass(&[01;31m[Ke-[m[K>s->parts[i]));
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3281[m[K[36m[K:[m[K    float vel_norm[swift_type_count] = {[01;31m[Ke-[m[K>s->sum_part_vel_norm,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3282[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->sum_gpart_vel_norm,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3284[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->sum_sink_vel_norm,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3285[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->sum_spart_vel_norm,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3286[m[K[36m[K:[m[K                                        [01;31m[Ke-[m[K>s->sum_spart_vel_norm,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3295[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>total_nr_parts + [01;31m[Ke-[m[K>total_nr_sparts + [01;31m[Ke-[m[K>total_nr_bparts;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3297[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>total_nr_gparts - [01;31m[Ke-[m[K>total_nr_DM_background_gparts -
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3298[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>total_nr_neutrino_gparts - total_nr_baryons;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3300[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_parts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3302[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_DM_background_gparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3303[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_sinks,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3304[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_sparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3305[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_bparts,
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3306[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>total_nr_neutrino_gparts};
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3320[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3321[m[K[36m[K:[m[K      r_s = [01;31m[Ke-[m[K>mesh->r_s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3339[m[K[36m[K:[m[K      /* Tim[01;31m[Ke-[m[Kstep based on maximum displacement */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3348[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>max_RMS_dt_use_only_gas)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3359[m[K[36m[K:[m[K      /* Tim[01;31m[Ke-[m[Kstep based on maximum displacement */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3367[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>dt_max_RMS_displacement = dt * [01;31m[Ke-[m[K>max_RMS_displacement_factor;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3369[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3370[m[K[36m[K:[m[K      message("max_dt_RMS_displacement = %e", [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3373[m[K[36m[K:[m[K  /* Now, update the mesh tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3375[m[K[36m[K:[m[K  /* Store the previous tim[01;31m[Ke-[m[Kstep size */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3376[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh->ti_end_mesh_last = [01;31m[Ke-[m[K>mesh->ti_end_mesh_next;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3377[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh->ti_beg_mesh_last = [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3379[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>mesh->ti_end_mesh_last - [01;31m[Ke-[m[K>mesh->ti_beg_mesh_last;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3382[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>step > 1 && [01;31m[Ke-[m[K>mesh->ti_end_mesh_last != [01;31m[Ke-[m[K>ti_current)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3386[m[K[36m[K:[m[K  /* What is the allowed tim[01;31m[Ke-[m[Kstep size
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3388[m[K[36m[K:[m[K  double dt_mesh = [01;31m[Ke-[m[K>dt_max_RMS_displacement * [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3389[m[K[36m[K:[m[K  dt_mesh = min(dt_mesh, [01;31m[Ke-[m[K>dt_max);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3392[m[K[36m[K:[m[K  integertime_t new_dti = (integertime_t)(dt_mesh * [01;31m[Ke-[m[K>time_base_inv);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3394[m[K[36m[K:[m[K  /* Find the max integer tim[01;31m[Ke-[m[Kstep on the timeline below new_dti */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3400[m[K[36m[K:[m[K  const integertime_t current_dti = [01;31m[Ke-[m[K>step > 0 ? old_dti : max_nr_timesteps;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3402[m[K[36m[K:[m[K    if ((max_nr_timesteps - [01;31m[Ke-[m[K>ti_current) % new_dti > 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3407[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3408[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh->ti_end_mesh_next = [01;31m[Ke-[m[K>ti_current + new_dti;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3412[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose && new_dti != old_dti)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3413[m[K[36m[K:[m[K    message("Mesh tim[01;31m[Ke-[m[Kstep changed to %e (tim[01;31m[Ke-[m[Kbin %d)",
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3414[m[K[36m[K:[m[K            get_timestep(bin, [01;31m[Ke-[m[K>time_base), bin);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3416[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3430[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props = engine_step_prop_done;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3431[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>run_barrier);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3434[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_threads; k++) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3435[m[K[36m[K:[m[K    if (pthread_join([01;31m[Ke-[m[K>runners[k].thread, /*retval=*/NULL) != 0)
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3438[m[K[36m[K:[m[K    cache_clean(&[01;31m[Ke-[m[K>runners[k].ci_cache);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3439[m[K[36m[K:[m[K    cache_clean(&[01;31m[Ke-[m[K>runners[k].cj_cache);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3441[m[K[36m[K:[m[K    gravity_cache_clean(&[01;31m[Ke-[m[K>runners[k].ci_gravity_cache);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3442[m[K[36m[K:[m[K    gravity_cache_clean(&[01;31m[Ke-[m[K>runners[k].cj_gravity_cache);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3444[m[K[36m[K:[m[K  swift_free("runners", [01;31m[Ke-[m[K>runners);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3445[m[K[36m[K:[m[K  free([01;31m[Ke-[m[K>snapshot_units);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3447[m[K[36m[K:[m[K  output_list_clean(&[01;31m[Ke-[m[K>output_list_snapshots);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3448[m[K[36m[K:[m[K  output_list_clean(&[01;31m[Ke-[m[K>output_list_stats);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3449[m[K[36m[K:[m[K  output_list_clean(&[01;31m[Ke-[m[K>output_list_stf);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3450[m[K[36m[K:[m[K  output_list_clean(&[01;31m[Ke-[m[K>output_list_los);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3452[m[K[36m[K:[m[K  output_options_clean([01;31m[Ke-[m[K>output_options);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3454[m[K[36m[K:[m[K  ic_info_clean([01;31m[Ke-[m[K>ics_metadata);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3456[m[K[36m[K:[m[K  swift_free("links", [01;31m[Ke-[m[K>links);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3458[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3459[m[K[36m[K:[m[K    csds_free([01;31m[Ke-[m[K>csds);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3460[m[K[36m[K:[m[K    free([01;31m[Ke-[m[K>csds);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3463[m[K[36m[K:[m[K  scheduler_clean(&[01;31m[Ke-[m[K>sched);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3464[m[K[36m[K:[m[K  space_clean([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3465[m[K[36m[K:[m[K  threadpool_clean(&[01;31m[Ke-[m[K>threadpool);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3467[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_proxies; ++i) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3468[m[K[36m[K:[m[K    proxy_clean(&[01;31m[Ke-[m[K>proxies[i]);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3470[m[K[36m[K:[m[K  free([01;31m[Ke-[m[K>proxy_ind);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3471[m[K[36m[K:[m[K  free([01;31m[Ke-[m[K>proxies);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3483[m[K[36m[K:[m[K  if (!fof && [01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3484[m[K[36m[K:[m[K    fclose([01;31m[Ke-[m[K>file_timesteps);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3485[m[K[36m[K:[m[K    fclose([01;31m[Ke-[m[K>file_stats);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3487[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_star_formation) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3488[m[K[36m[K:[m[K      fclose([01;31m[Ke-[m[K>sfh_logger);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3495[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>parameter_file);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3496[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>output_options);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3497[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>external_potential);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3498[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>black_holes_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3499[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>pressure_floor_props);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3500[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>rt_props);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3501[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>sink_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3502[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>stars_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3503[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>gravity_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3504[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>neutrino_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3505[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>hydro_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3506[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>physical_constants);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3507[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>internal_units);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3508[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3509[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>mesh);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3510[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>chemistry);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3511[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>entropy_floor);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3512[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>cooling_func);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3513[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>star_formation);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3514[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>feedback_props);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3515[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>io_extra_props);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3517[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>fof_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3519[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>los_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3520[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>lightcone_array_properties);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3521[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>ics_metadata);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3523[m[K[36m[K:[m[K    free((void *)[01;31m[Ke-[m[K>reparttype);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3525[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>output_list_snapshots) free((void *)[01;31m[Ke-[m[K>output_list_snapshots);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3526[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>output_list_stats) free((void *)[01;31m[Ke-[m[K>output_list_stats);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3527[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>output_list_stf) free((void *)[01;31m[Ke-[m[K>output_list_stf);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3528[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>output_list_los) free((void *)[01;31m[Ke-[m[K>output_list_los);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3530[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_csds) free((void *)[01;31m[Ke-[m[K>csds);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3532[m[K[36m[K:[m[K    free([01;31m[Ke-[m[K>s);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3546[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restart_max_tasks = engine_estimate_nr_tasks(e);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3551[m[K[36m[K:[m[K  space_struct_dump([01;31m[Ke-[m[K>s, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3552[m[K[36m[K:[m[K  units_struct_dump([01;31m[Ke-[m[K>internal_units, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3553[m[K[36m[K:[m[K  units_struct_dump([01;31m[Ke-[m[K>snapshot_units, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3554[m[K[36m[K:[m[K  cosmology_struct_dump([01;31m[Ke-[m[K>cosmology, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3558[m[K[36m[K:[m[K  partition_store_celllist([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>reparttype);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3559[m[K[36m[K:[m[K  partition_struct_dump([01;31m[Ke-[m[K>reparttype, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3562[m[K[36m[K:[m[K  phys_const_struct_dump([01;31m[Ke-[m[K>physical_constants, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3563[m[K[36m[K:[m[K  hydro_props_struct_dump([01;31m[Ke-[m[K>hydro_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3564[m[K[36m[K:[m[K  entropy_floor_struct_dump([01;31m[Ke-[m[K>entropy_floor, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3565[m[K[36m[K:[m[K  gravity_props_struct_dump([01;31m[Ke-[m[K>gravity_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3566[m[K[36m[K:[m[K  stars_props_struct_dump([01;31m[Ke-[m[K>stars_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3567[m[K[36m[K:[m[K  pm_mesh_struct_dump([01;31m[Ke-[m[K>mesh, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3568[m[K[36m[K:[m[K  potential_struct_dump([01;31m[Ke-[m[K>external_potential, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3569[m[K[36m[K:[m[K  cooling_struct_dump([01;31m[Ke-[m[K>cooling_func, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3570[m[K[36m[K:[m[K  starformation_struct_dump([01;31m[Ke-[m[K>star_formation, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3571[m[K[36m[K:[m[K  feedback_struct_dump([01;31m[Ke-[m[K>feedback_props, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3572[m[K[36m[K:[m[K  pressure_floor_struct_dump([01;31m[Ke-[m[K>pressure_floor_props, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3573[m[K[36m[K:[m[K  rt_struct_dump([01;31m[Ke-[m[K>rt_props, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3574[m[K[36m[K:[m[K  black_holes_struct_dump([01;31m[Ke-[m[K>black_holes_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3575[m[K[36m[K:[m[K  sink_struct_dump([01;31m[Ke-[m[K>sink_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3576[m[K[36m[K:[m[K  neutrino_struct_dump([01;31m[Ke-[m[K>neutrino_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3577[m[K[36m[K:[m[K  neutrino_response_struct_dump([01;31m[Ke-[m[K>neutrino_response, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3578[m[K[36m[K:[m[K  chemistry_struct_dump([01;31m[Ke-[m[K>chemistry, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3579[m[K[36m[K:[m[K  extra_io_struct_dump([01;31m[Ke-[m[K>io_extra_props, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3581[m[K[36m[K:[m[K  fof_struct_dump([01;31m[Ke-[m[K>fof_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3583[m[K[36m[K:[m[K  los_struct_dump([01;31m[Ke-[m[K>los_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3584[m[K[36m[K:[m[K  lightcone_array_struct_dump([01;31m[Ke-[m[K>lightcone_array_properties, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3585[m[K[36m[K:[m[K  ic_info_struct_dump([01;31m[Ke-[m[K>ics_metadata, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3586[m[K[36m[K:[m[K  parser_struct_dump([01;31m[Ke-[m[K>parameter_file, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3587[m[K[36m[K:[m[K  output_options_struct_dump([01;31m[Ke-[m[K>output_options, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3590[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3591[m[K[36m[K:[m[K    csds_struct_dump([01;31m[Ke-[m[K>csds, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3597[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kcreate an engine struct and its contents from the given FILE
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3609[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kinitializations as necessary for our struct and its members. */
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3610[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.tasks = NULL;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3611[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.tasks_ind = NULL;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3612[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.tid_active = NULL;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3613[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.size = 0;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3619[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s = s;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3625[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>internal_units = internal_us;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3630[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_units = snap_us;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3634[m[K[36m[K:[m[K  cosmology_struct_restore([01;31m[Ke-[m[K>policy & engine_policy_cosmology, cosmo, stream);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3635[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>cosmology = cosmo;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3641[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>reparttype = reparttype;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3647[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>physical_constants = physical_constants;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3652[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>hydro_properties = hydro_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3658[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>entropy_floor = entropy_floor;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3663[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>gravity_properties = gravity_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3668[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stars_properties = stars_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3672[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>mesh = mesh;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3677[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>external_potential = external_potential;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3682[m[K[36m[K:[m[K  cooling_struct_restore(cooling_func, stream, [01;31m[Ke-[m[K>cosmology);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3683[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>cooling_func = cooling_func;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3688[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>star_formation = star_formation;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3693[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>feedback_props = feedback_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3699[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>pressure_floor_props = pressure_floor_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3704[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>rt_props = rt_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3709[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>black_holes_properties = black_holes_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3714[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sink_properties = sink_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3719[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>neutrino_properties = neutrino_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3724[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>neutrino_response = neutrino_response;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3730[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>chemistry = chemistry;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3735[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>io_extra_props = extra_io_props;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3741[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>fof_properties = fof_props;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3747[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>los_properties = los_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3753[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>lightcone_array_properties = lightcone_array_properties;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3758[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ics_metadata = ics_metadata;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3763[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>parameter_file = parameter_file;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3768[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_options = output_options;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3771[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3775[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>csds = log;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3780[m[K[36m[K:[m[K  eos_init(&eos, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>snapshot_units, [01;31m[Ke-[m[K>parameter_file);
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3784[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine.c[m[K[36m[K:[m[K[32m[K3785[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerepart = 0;
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[K * @brief Data collected from the cells at the end of a tim[01;31m[Ke-[m[Kstep
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K99[m[K[36m[K:[m[K      if (c->hydro.ti_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K      if (c->hydro.ti_rt_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K      if (c->grav.ti_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K      if (c->stars.ti_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K      if (c->sinks.ti_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K      if (c->black_holes.ti_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K161[m[K[36m[K:[m[K    if (ti_hydro_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K165[m[K[36m[K:[m[K    if (ti_rt_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K    if (ti_gravity_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K    if (ti_stars_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K    if (ti_sinks_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K183[m[K[36m[K:[m[K    if (ti_black_holes_end_min > [01;31m[Ke-[m[K>ti_current)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K * @brief Collects the next tim[01;31m[Ke-[m[Kstep and rebuild flag.
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K * The next tim[01;31m[Ke-[m[Kstep is determined by making each super-cell recurse to
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K * Note that the results are stored in [01;31m[Ke-[m[K>collect_group1 struct not in the
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K213[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K227[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_csds)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K229[m[K[36m[K:[m[K        csds_logfile_writer_get_current_filesize_used_gb(&[01;31m[Ke-[m[K>csds->logfile);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K238[m[K[36m[K:[m[K      lightcone_array_trigger_map_update([01;31m[Ke-[m[K>lightcone_array_properties);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K  data.deadtime = [01;31m[Ke-[m[K>local_deadtime;
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K246[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_collect_end_of_step_mapper,
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K250[m[K[36m[K:[m[K  /* Get the number of inhibited particles from the spac[01;31m[Ke-[m[Kwide counters
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K   * since these have been updated atomically during the tim[01;31m[Ke-[m[Ksteps. */
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K      &[01;31m[Ke-[m[K>collect_group1, data.updated, data.g_updated, data.s_updated,
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K267[m[K[36m[K:[m[K      data.ti_black_holes_beg_max, [01;31m[Ke-[m[K>forcerebuild, [01;31m[Ke-[m[K>s->tot_cells,
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>sched.nr_tasks, (float)[01;31m[Ke-[m[K>sched.nr_tasks / (float)[01;31m[Ke-[m[K>s->tot_cells,
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K  collectgroup1_reduce(&[01;31m[Ke-[m[K>collect_group1);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K    if (in_i[0] != (long long)[01;31m[Ke-[m[K>collect_group1.ti_hydro_end_min)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K289[m[K[36m[K:[m[K            in_i[0], [01;31m[Ke-[m[K>collect_group1.ti_hydro_end_min);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K    if (in_i[1] != (long long)[01;31m[Ke-[m[K>collect_group1.ti_gravity_end_min)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K            in_i[1], [01;31m[Ke-[m[K>collect_group1.ti_gravity_end_min);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K    if (in_ll[0] != (long long)[01;31m[Ke-[m[K>collect_group1.updated)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K304[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.updated);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K305[m[K[36m[K:[m[K    if (in_ll[1] != (long long)[01;31m[Ke-[m[K>collect_group1.g_updated)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K307[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.g_updated);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K308[m[K[36m[K:[m[K    if (in_ll[2] != (long long)[01;31m[Ke-[m[K>collect_group1.s_updated)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.s_updated);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K311[m[K[36m[K:[m[K    if (in_ll[3] != (long long)[01;31m[Ke-[m[K>collect_group1.b_updated)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K313[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.b_updated);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K322[m[K[36m[K:[m[K    if (in_ll[0] != (long long)[01;31m[Ke-[m[K>collect_group1.inhibited)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K324[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.inhibited);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K325[m[K[36m[K:[m[K    if (in_ll[1] != (long long)[01;31m[Ke-[m[K>collect_group1.g_inhibited)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K327[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.g_inhibited);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K328[m[K[36m[K:[m[K    if (in_ll[2] != (long long)[01;31m[Ke-[m[K>collect_group1.s_inhibited)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K330[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.s_inhibited);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K    if (in_ll[3] != (long long)[01;31m[Ke-[m[K>collect_group1.b_inhibited)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K333[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>collect_group1.b_inhibited);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K336[m[K[36m[K:[m[K    if (MPI_Allreduce(&[01;31m[Ke-[m[K>forcerebuild, &buff, 1, MPI_INT, MPI_MAX,
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K339[m[K[36m[K:[m[K    if (!!buff != !![01;31m[Ke-[m[K>collect_group1.forcerebuild)
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K343[m[K[36m[K:[m[K          buff, [01;31m[Ke-[m[K>collect_group1.forcerebuild);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K  if (apply) collectgroup1_apply(&[01;31m[Ke-[m[K>collect_group1, e);
[35m[Kengine_collect_end_of_step.c[m[K[36m[K:[m[K[32m[K351[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), ".dump.%d", [01;31m[Ke-[m[K>nodeID);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K75[m[K[36m[K:[m[K      message("Dumping engine tasks in step: %d", [01;31m[Ke-[m[K>step);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K      memuse_log_dump_error([01;31m[Ke-[m[K>nodeID);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K      mpiuse_log_dump_error([01;31m[Ke-[m[K>nodeID);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), ".dump.%d", [01;31m[Ke-[m[K>nodeID);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nodeID = nodeID;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_threads = nr_task_threads;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K171[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_pool_threads = nr_pool_threads;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K172[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_nodes = nr_nodes;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>proxy_ind = NULL;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K174[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_proxies = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerebuild = 1;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K176[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>forcerepart = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K177[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restarting = restart;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K178[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props = engine_step_prop_none;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>links = NULL;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_links = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K181[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>file_stats = NULL;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>file_timesteps = NULL;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K183[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sfh_logger = NULL;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>verbose = verbose;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>wallclock_time = 0.f;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restart_dump = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K187[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restart_file = restart_file;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restart_next = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K189[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>restart_dt = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K190[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>run_fof = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) message("Running simulation '%s'.", [01;31m[Ke-[m[K>run_name);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K      parser_get_opt_param_int(params, "Scheduler:nr_queues", [01;31m[Ke-[m[K>nr_threads);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K  if (nr_queues <= 0) nr_queues = [01;31m[Ke-[m[K>nr_threads;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K207[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>s->nr_queues = nr_queues;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.frequency_dependency = parser_get_opt_param_int(
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>sched.frequency_dependency < 0) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K217[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.frequency_task_levels = parser_get_opt_param_int(
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>sched.frequency_task_levels < 0) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_cputight) != engine_policy_cputight) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>policy |= engine_policy_mpi;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>proxies = (struct proxy *)calloc(sizeof(struct proxy),
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K353[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>nr_proxies = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>syncredist =
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K        fprintf(ranklog, "%d %d %s\n", [01;31m[Ke-[m[K>step, i,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K  if (!fof && [01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>file_stats = fopen(energyfileName, mode);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K418[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>file_stats == NULL)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K      stats_write_file_header([01;31m[Ke-[m[K>file_stats, [01;31m[Ke-[m[K>internal_units,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>physical_constants);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>file_timesteps = fopen(timestepsfileName, mode);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>file_timesteps == NULL)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K440[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>file_timesteps,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K447[m[K[36m[K:[m[K          compiler_version(), [01;31m[Ke-[m[K>nr_threads, [01;31m[Ke-[m[K>nr_nodes, SPH_IMPLEMENTATION,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K448[m[K[36m[K:[m[K          kernel_name, [01;31m[Ke-[m[K>hydro_properties->target_neighbours,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K449[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->delta_neighbours,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K450[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->eta_neighbours, configuration_options(),
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K454[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>file_timesteps,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K462[m[K[36m[K:[m[K      fprintf([01;31m[Ke-[m[K>file_timesteps,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K465[m[K[36m[K:[m[K              "Step", "Time", "Scal[01;31m[Ke-[m[Kfactor", "Redshift", "Tim[01;31m[Ke-[m[Kstep",
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K466[m[K[36m[K:[m[K              "Tim[01;31m[Ke-[m[Kbins", "Updates", "g-Updates", "s-Updates", "Sink-Updates",
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K469[m[K[36m[K:[m[K      fflush([01;31m[Ke-[m[K>file_timesteps);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K473[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_star_formation) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K474[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>sfh_logger = fopen("SFR.txt", mode);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K475[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>sfh_logger == NULL)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K479[m[K[36m[K:[m[K        star_formation_logger_init_log_file([01;31m[Ke-[m[K>sfh_logger, [01;31m[Ke-[m[K>internal_units,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K480[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>physical_constants);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K481[m[K[36m[K:[m[K        fflush([01;31m[Ke-[m[K>sfh_logger);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K492[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_hydro) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K493[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) hydro_props_print([01;31m[Ke-[m[K>hydro_properties);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K494[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) entropy_floor_print([01;31m[Ke-[m[K>entropy_floor);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K498[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K499[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) gravity_props_print([01;31m[Ke-[m[K>gravity_properties);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K502[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_stars)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K503[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) stars_props_print([01;31m[Ke-[m[K>stars_properties);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K506[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>time_begin >= [01;31m[Ke-[m[K>time_end)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K510[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>time_end, [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K512[m[K[36m[K:[m[K    /* Check we have sensible tim[01;31m[Ke-[m[Kstep values */
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K513[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>dt_min > [01;31m[Ke-[m[K>dt_max)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K515[m[K[36m[K:[m[K          "Minimal tim[01;31m[Ke-[m[Kstep size (%e) must be smaller than maximal tim[01;31m[Ke-[m[Kstep "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K517[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>dt_min, [01;31m[Ke-[m[K>dt_max);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K519[m[K[36m[K:[m[K    /* Info about tim[01;31m[Ke-[m[Ksteps */
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K520[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K521[m[K[36m[K:[m[K      message("Absolute minimal timestep size: %e", [01;31m[Ke-[m[K>time_base);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K523[m[K[36m[K:[m[K      float dt_min = [01;31m[Ke-[m[K>time_end - [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K      while (dt_min > [01;31m[Ke-[m[K>dt_min) dt_min /= 2.f;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K526[m[K[36m[K:[m[K      message("Minimal timestep size (on tim[01;31m[Ke-[m[Kline): %e", dt_min);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K528[m[K[36m[K:[m[K      float dt_max = [01;31m[Ke-[m[K>time_end - [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K529[m[K[36m[K:[m[K      while (dt_max > [01;31m[Ke-[m[K>dt_max) dt_max /= 2.f;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K531[m[K[36m[K:[m[K      message("Maximal timestep size (on tim[01;31m[Ke-[m[Kline): %e", dt_max);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K534[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>dt_min < [01;31m[Ke-[m[K>time_base && [01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K536[m[K[36m[K:[m[K          "Minimal tim[01;31m[Ke-[m[Kstep size smaller than the absolute possible minimum "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K538[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>time_base);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K540[m[K[36m[K:[m[K    if (!([01;31m[Ke-[m[K>policy & engine_policy_cosmology))
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K541[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>dt_max > ([01;31m[Ke-[m[K>time_end - [01;31m[Ke-[m[K>time_begin) && [01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K542[m[K[36m[K:[m[K        error("Maximal tim[01;31m[Ke-[m[Kstep size larger than the simulation run time t=%e",
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K543[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>time_end - [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K545[m[K[36m[K:[m[K    /* Read (or r[01;31m[Ke-[m[Kread the list of outputs */
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K546[m[K[36m[K:[m[K    engine_init_output_lists(e, params, [01;31m[Ke-[m[K>output_options);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K549[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K551[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>delta_time_snapshot <= 1.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K553[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>delta_time_snapshot);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K555[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>delta_time_statistics <= 1.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K557[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>delta_time_statistics);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K559[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>a_first_snapshot < [01;31m[Ke-[m[K>cosmology->a_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K561[m[K[36m[K:[m[K            "Scal[01;31m[Ke-[m[Kfactor of first snapshot (%e) must be after the simulation "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K563[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>a_first_snapshot, [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K565[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>a_first_statistics < [01;31m[Ke-[m[K>cosmology->a_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K567[m[K[36m[K:[m[K            "Scal[01;31m[Ke-[m[Kfactor of first stats output (%e) must be after the "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K569[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>a_first_statistics, [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K571[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K573[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>delta_time_stf == -1. && ![01;31m[Ke-[m[K>snapshot_invoke_stf)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>a_first_stf_output < [01;31m[Ke-[m[K>cosmology->a_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K578[m[K[36m[K:[m[K              "Scal[01;31m[Ke-[m[Kfactor of first stf output (%e) must be after the "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>a_first_stf_output, [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K583[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>policy & engine_policy_fof &&
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K584[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>fof_properties->seed_black_holes_enabled) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K586[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>delta_time_fof <= 1.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K587[m[K[36m[K:[m[K          error("Time between FOF (%e) must be > 1.", [01;31m[Ke-[m[K>delta_time_fof);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K589[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>a_first_fof_call < [01;31m[Ke-[m[K>cosmology->a_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K591[m[K[36m[K:[m[K              "Scal[01;31m[Ke-[m[Kfactor of first fof call (%e) must be after the "
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K593[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>a_first_fof_call, [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K598[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>delta_time_snapshot <= 0.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K600[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>delta_time_snapshot);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K602[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>delta_time_statistics <= 0.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K604[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>delta_time_statistics);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>time_first_snapshot < [01;31m[Ke-[m[K>time_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K611[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>time_first_snapshot, [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K613[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>time_first_statistics < [01;31m[Ke-[m[K>time_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K617[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>time_first_statistics, [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K621[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>delta_time_stf == -1. && ![01;31m[Ke-[m[K>snapshot_invoke_stf)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K624[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>delta_time_stf <= 0. && [01;31m[Ke-[m[K>delta_time_stf != -1.)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K625[m[K[36m[K:[m[K          error("Time between STF (%e) must be positive.", [01;31m[Ke-[m[K>delta_time_stf);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>time_first_stf_output < [01;31m[Ke-[m[K>time_begin)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K630[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>time_first_stf_output, [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K635[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>total_mass = 0.;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K636[m[K[36m[K:[m[K    for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_gparts; ++i)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K637[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>total_mass += [01;31m[Ke-[m[K>s->gparts[i].mass;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K641[m[K[36m[K:[m[K    MPI_Allreduce(MPI_IN_PLACE, &[01;31m[Ke-[m[K>total_mass, 1, MPI_DOUBLE, MPI_SUM,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K646[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_csds) && [01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K659[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_line_of_sight) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K664[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K669[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_fof &&
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K670[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>fof_properties->seed_black_holes_enabled) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K675[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>snapshot_invoke_stf &&
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K676[m[K[36m[K:[m[K        !([01;31m[Ke-[m[K>policy & engine_policy_structure_finding)) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K684[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_dump = parser_get_opt_param_int(params, "Restarts:enable", 1);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K687[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_save = parser_get_opt_param_int(params, "Restarts:save", 1);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K691[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_onexit = parser_get_opt_param_int(params, "Restarts:onexit", 0);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K694[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_lustre_OST_count =
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>restart_dump)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K706[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose && [01;31m[Ke-[m[K>restart_onexit)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K712[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_dt = clocks_to_ticks(dhours * 60.0 * 60.0 * 1000.0);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K716[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>restart_next = getticks() + [01;31m[Ke-[m[K>restart_dt;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K738[m[K[36m[K:[m[K  threadpool_init(&[01;31m[Ke-[m[K>threadpool, nr_pool_threads);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K739[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K743[m[K[36m[K:[m[K  if (swift_barrier_init(&[01;31m[Ke-[m[K>wait_barrier, NULL, [01;31m[Ke-[m[K>nr_threads + 1) != 0 ||
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K744[m[K[36m[K:[m[K      swift_barrier_init(&[01;31m[Ke-[m[K>run_barrier, NULL, [01;31m[Ke-[m[K>nr_threads + 1) != 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K751[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tasks_per_cell =
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K753[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tasks_per_cell_max = 0.0f;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K    maxtasks = [01;31m[Ke-[m[K>restart_max_tasks;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K762[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>links_per_tasks =
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K766[m[K[36m[K:[m[K  scheduler_init(&[01;31m[Ke-[m[K>sched, [01;31m[Ke-[m[K>s, maxtasks, nr_queues,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K767[m[K[36m[K:[m[K                 ([01;31m[Ke-[m[K>policy & scheduler_flag_steal), [01;31m[Ke-[m[K>nodeID, &[01;31m[Ke-[m[K>threadpool);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>sched.mpi_message_limit =
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K809[m[K[36m[K:[m[K    if (!([01;31m[Ke-[m[K>policy & engine_policy_star_formation ||
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K810[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>policy & engine_policy_sinks) ||
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K830[m[K[36m[K:[m[K  if (swift_memalign("runners", (void **)&[01;31m[Ke-[m[K>runners, SWIFT_CACHE_ALIGNMENT,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>nr_threads * sizeof(struct runner)) != 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K834[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_threads; k++) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K835[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].id = k;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K836[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].e = e;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K837[m[K[36m[K:[m[K    if (pthread_create(&[01;31m[Ke-[m[K>runners[k].thread, NULL, &runner_main,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K838[m[K[36m[K:[m[K                       &[01;31m[Ke-[m[K>runners[k]) != 0)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K843[m[K[36m[K:[m[K        ([01;31m[Ke-[m[K>policy & engine_policy_setaffinity) == engine_policy_setaffinity) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K848[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>runners[k].cpuid = cpuid[coreid];
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K850[m[K[36m[K:[m[K      if (nr_queues < [01;31m[Ke-[m[K>nr_threads)
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K851[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>runners[k].qid = cpuid[coreid] * nr_queues / nr_affinity_cores;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K853[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>runners[k].qid = k;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K855[m[K[36m[K:[m[K      /* Set the cpu mask to zero | [01;31m[Ke-[m[K>id. */
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K860[m[K[36m[K:[m[K      if (pthread_setaffinity_np([01;31m[Ke-[m[K>runners[k].thread, sizeof(cpu_set_t),
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K868[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>runners[k].cpuid = k;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K869[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>runners[k].qid = k * nr_queues / [01;31m[Ke-[m[K>nr_threads;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K873[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].ci_gravity_cache.count = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K874[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].cj_gravity_cache.count = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K875[m[K[36m[K:[m[K    gravity_cache_init(&[01;31m[Ke-[m[K>runners[k].ci_gravity_cache, space_splitsize);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K876[m[K[36m[K:[m[K    gravity_cache_init(&[01;31m[Ke-[m[K>runners[k].cj_gravity_cache, space_splitsize);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].ci_cache.count = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K879[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>runners[k].cj_cache.count = 0;
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K880[m[K[36m[K:[m[K    cache_init(&[01;31m[Ke-[m[K>runners[k].ci_cache, CACHE_SIZE);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K881[m[K[36m[K:[m[K    cache_init(&[01;31m[Ke-[m[K>runners[k].cj_cache, CACHE_SIZE);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K886[m[K[36m[K:[m[K        message("runner %i on cpuid=%i with qid=%i.", [01;31m[Ke-[m[K>runners[k].id,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K887[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>runners[k].cpuid, [01;31m[Ke-[m[K>runners[k].qid);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K889[m[K[36m[K:[m[K        message("runner %i using qid=%i no cpuid.", [01;31m[Ke-[m[K>runners[k].id,
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K890[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>runners[k].qid);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K895[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_csds) && !restart) {
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K897[m[K[36m[K:[m[K    csds_write_file_header([01;31m[Ke-[m[K>csds);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K903[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) velociraptor_init(e);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K920[m[K[36m[K:[m[K  swift_barrier_wait(&[01;31m[Ke-[m[K>wait_barrier);
[35m[Kengine_config.c[m[K[36m[K:[m[K[32m[K922[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K120[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K139[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K187[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K216[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K235[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K283[m[K[36m[K:[m[K  const int restarting = [01;31m[Ke-[m[K>restarting;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K328[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K341[m[K[36m[K:[m[K  lightcone_array_prepare_for_step([01;31m[Ke-[m[K>lightcone_array_properties, [01;31m[Ke-[m[K>cosmology,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K342[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>ti_earliest_undrifted, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K345[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>restarting) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_parts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_part_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K351[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_top, [01;31m[Ke-[m[K>s->nr_local_cells, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K354[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_gparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_gpart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_top, [01;31m[Ke-[m[K>s->nr_local_cells, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K359[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_sparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K360[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_spart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K361[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_top, [01;31m[Ke-[m[K>s->nr_local_cells, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_sinks > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_sink_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_top, [01;31m[Ke-[m[K>s->nr_local_cells, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K369[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_bparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K370[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_bpart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K371[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_top, [01;31m[Ke-[m[K>s->nr_local_cells, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K374[m[K[36m[K:[m[K    if (drift_mpoles && ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K375[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_multipole_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K376[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->local_cells_with_tasks_top,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K377[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->nr_local_cells_with_tasks, sizeof(int),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K386[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_parts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K387[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_part_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K388[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K391[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_sparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_spart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K396[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_sinks > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_sink_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K401[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_bparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K402[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_bpart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->nr_gparts > 0) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K407[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_gpart_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K408[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K411[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K412[m[K[36m[K:[m[K      threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_all_multipole_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K413[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K419[m[K[36m[K:[m[K  space_synchronize_particle_positions([01;31m[Ke-[m[K>s);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K      drift_mpoles && ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity));
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K426[m[K[36m[K:[m[K  part_verify_links([01;31m[Ke-[m[K>s->parts, [01;31m[Ke-[m[K>s->gparts, [01;31m[Ke-[m[K>s->sinks, [01;31m[Ke-[m[K>s->sparts,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K427[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->bparts, [01;31m[Ke-[m[K>s->nr_parts, [01;31m[Ke-[m[K>s->nr_gparts,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>s->nr_sinks, [01;31m[Ke-[m[K>s->nr_sparts, [01;31m[Ke-[m[K>s->nr_bparts,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K429[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>verbose);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_earliest_undrifted = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K435[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K  lightcone_array_flush([01;31m[Ke-[m[K>lightcone_array_properties, &[01;31m[Ke-[m[K>threadpool,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K468[m[K[36m[K:[m[K      if (c->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(c, e);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K482[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_drift_top_multipoles_mapper,
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K483[m[K[36m[K:[m[K                 [01;31m[Ke-[m[K>s->cells_top, [01;31m[Ke-[m[K>s->nr_cells, sizeof(struct cell),
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K  space_check_top_multipoles_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine_drift.c[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K122[m[K[36m[K:[m[K    space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear pointers=*/1);
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K128[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>total_nr_parts + [01;31m[Ke-[m[K>total_nr_sparts + [01;31m[Ke-[m[K>total_nr_bparts;
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>total_nr_gparts - [01;31m[Ke-[m[K>total_nr_DM_background_gparts -
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>total_nr_neutrino_gparts - total_nr_baryons;
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K  fof_allocate([01;31m[Ke-[m[K>s, total_nr_dmparts, [01;31m[Ke-[m[K>fof_properties);
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) engine_print_task_counts(e);
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K  fof_search_tree([01;31m[Ke-[m[K>fof_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>s, dump_results,
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K155[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>run_fof = 0;
[35m[Kengine_fof.c[m[K[36m[K:[m[K[32m[K158[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_fof;
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K94[m[K[36m[K:[m[K * @brief The different unusual events that can take place in a tim[01;31m[Ke-[m[Kstep.
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K164[m[K[36m[K:[m[K  /* Maximum tim[01;31m[Ke-[m[Kstep allowed by the RMS condition in cosmology runs. */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K  /* Dimensionless factor for the RMS tim[01;31m[Ke-[m[Kstep condition. */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K209[m[K[36m[K:[m[K  /* Minimal hydro ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K  /* Maximal hydro ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K215[m[K[36m[K:[m[K  /* Maximal hydro ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K218[m[K[36m[K:[m[K  /* Minimal rt ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K221[m[K[36m[K:[m[K  /* Maximal rt ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K  /* Minimal gravity ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K227[m[K[36m[K:[m[K  /* Maximal gravity ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K  /* Maximal gravity ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K  /* Minimal stars ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K  /* Maximal stars ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K  /* Maximal stars ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K242[m[K[36m[K:[m[K  /* Minimal black holes ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K245[m[K[36m[K:[m[K  /* Maximal black holes ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K248[m[K[36m[K:[m[K  /* Maximal black holes ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K  /* Minimal sinks ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K254[m[K[36m[K:[m[K  /* Maximal sinks ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  /* Maximal sinks ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  /* Minimal overall ti_end for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K  /* Maximal overall ti_beg for the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K  /* Wallclock time of the last tim[01;31m[Ke-[m[Kstep */
[35m[Kengine.h[m[K[36m[K:[m[K[32m[K577[m[K[36m[K:[m[K  /* Tim[01;31m[Ke-[m[Kintegration mesh kick to apply to the particle velocities for
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restart_dump) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K    int dump = ((tic > [01;31m[Ke-[m[K>restart_next) || force);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K70[m[K[36m[K:[m[K        /* Flush the tim[01;31m[Ke-[m[Kstep file to avoid gaps in case of crashes
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K        fflush([01;31m[Ke-[m[K>file_timesteps);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K      restart_remove_previous([01;31m[Ke-[m[K>restart_file);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K      lightcone_array_flush([01;31m[Ke-[m[K>lightcone_array_properties, &([01;31m[Ke-[m[K>threadpool),
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K                            [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K97[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>free_foreign_when_dumping_restart)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K98[m[K[36m[K:[m[K        space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/1);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K101[m[K[36m[K:[m[K      restart_write(e, [01;31m[Ke-[m[K>restart_file);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K110[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>free_foreign_when_dumping_restart)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>restart_next += [01;31m[Ke-[m[K>restart_dt;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K122[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>step_props |= engine_step_prop_restarts;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K141[m[K[36m[K:[m[K  space_check_drift_point([01;31m[Ke-[m[K>s, [01;31m[Ke-[m[K>ti_current, /* check_mpole=*/0);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K144[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K145[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K154[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K156[m[K[36m[K:[m[K              exp([01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K159[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>ti_current * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K  /* Get tim[01;31m[Ke-[m[Kstep since the last mesh kick */
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K    const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K171[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>dt_kick_grav_mesh_for_io =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K172[m[K[36m[K:[m[K        kick_get_grav_kick_dt([01;31m[Ke-[m[K>mesh->ti_beg_mesh_next, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>time_base, with_cosmology, [01;31m[Ke-[m[K>cosmology) -
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K176[m[K[36m[K:[m[K            ([01;31m[Ke-[m[K>mesh->ti_beg_mesh_next + [01;31m[Ke-[m[K>mesh->ti_end_mesh_next) / 2,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K177[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>time_base, with_cosmology, [01;31m[Ke-[m[K>cosmology);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_distributed) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K    write_output_distributed(e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, [01;31m[Ke-[m[K>nodeID,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K187[m[K[36m[K:[m[K                             [01;31m[Ke-[m[K>nr_nodes, MPI_COMM_WORLD, MPI_INFO_NULL);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K191[m[K[36m[K:[m[K    write_output_parallel(e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, [01;31m[Ke-[m[K>nodeID,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K192[m[K[36m[K:[m[K                          [01;31m[Ke-[m[K>nr_nodes, MPI_COMM_WORLD, MPI_INFO_NULL);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K    write_output_serial(e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, [01;31m[Ke-[m[K>nodeID,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K195[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>nr_nodes, MPI_COMM_WORLD, MPI_INFO_NULL);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K  write_output_single(e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K207[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K225[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_run_on_dump) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K    snprintf(dump_command_buf, buf_size, "%s %s %04d", [01;31m[Ke-[m[K>snapshot_dump_command,
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K232[m[K[36m[K:[m[K             [01;31m[Ke-[m[K>snapshot_base_name, [01;31m[Ke-[m[K>snapshot_output_count - 1);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K253[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K254[m[K[36m[K:[m[K  const int with_los = ([01;31m[Ke-[m[K>policy & engine_policy_line_of_sight);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K255[m[K[36m[K:[m[K  const int with_fof = ([01;31m[Ke-[m[K>policy & engine_policy_fof);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K   * before the next tim[01;31m[Ke-[m[Kstep */
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stf_this_timestep = 0;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_stats && [01;31m[Ke-[m[K>ti_next_stats > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_stats < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K276[m[K[36m[K:[m[K      ti_output = [01;31m[Ke-[m[K>ti_next_stats;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_snapshot && [01;31m[Ke-[m[K>ti_next_snapshot > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K283[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_snapshot < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K      ti_output = [01;31m[Ke-[m[K>ti_next_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_stf && [01;31m[Ke-[m[K>ti_next_stf > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_next_stf < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K        ti_output = [01;31m[Ke-[m[K>ti_next_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_los && [01;31m[Ke-[m[K>ti_next_los > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_next_los < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K        ti_output = [01;31m[Ke-[m[K>ti_next_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K311[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K317[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_current = ti_output;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K318[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>max_active_bin = 0;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K320[m[K[36m[K:[m[K      cosmology_update([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time = [01;31m[Ke-[m[K>cosmology->time;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K323[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time = ti_output * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K336[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>force_checks_snapshot_flag = 1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K340[m[K[36m[K:[m[K        if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K341[m[K[36m[K:[m[K          pm_mesh_free([01;31m[Ke-[m[K>mesh);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K346[m[K[36m[K:[m[K        space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/1);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K        if (with_fof && [01;31m[Ke-[m[K>snapshot_invoke_fof) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K        if (with_stf && [01;31m[Ke-[m[K>snapshot_invoke_stf && ![01;31m[Ke-[m[K>stf_this_timestep) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K360[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step_props |= engine_step_prop_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K372[m[K[36m[K:[m[K        if (with_stf && [01;31m[Ke-[m[K>snapshot_invoke_stf && [01;31m[Ke-[m[K>s->gpart_group_data) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K374[m[K[36m[K:[m[K          swift_free("gpart_group_data", [01;31m[Ke-[m[K>s->gpart_group_data);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K375[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>s->gpart_group_data = NULL;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K380[m[K[36m[K:[m[K        if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K          pm_mesh_allocate([01;31m[Ke-[m[K>mesh);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K        if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K          pm_mesh_free([01;31m[Ke-[m[K>mesh);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K        space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear_cell_pointers=*/1);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K411[m[K[36m[K:[m[K        if (![01;31m[Ke-[m[K>stf_this_timestep) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K413[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step_props |= engine_step_prop_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K        if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) && [01;31m[Ke-[m[K>s->periodic)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K418[m[K[36m[K:[m[K          pm_mesh_allocate([01;31m[Ke-[m[K>mesh);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K453[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_stats && [01;31m[Ke-[m[K>ti_next_stats > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K454[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_next_stats < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K455[m[K[36m[K:[m[K        ti_output = [01;31m[Ke-[m[K>ti_next_stats;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K461[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_snapshot && [01;31m[Ke-[m[K>ti_next_snapshot > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K462[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_next_snapshot < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K463[m[K[36m[K:[m[K        ti_output = [01;31m[Ke-[m[K>ti_next_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K470[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_stf && [01;31m[Ke-[m[K>ti_next_stf > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K471[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>ti_next_stf < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K472[m[K[36m[K:[m[K          ti_output = [01;31m[Ke-[m[K>ti_next_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K480[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>ti_end_min > [01;31m[Ke-[m[K>ti_next_los && [01;31m[Ke-[m[K>ti_next_los > 0) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K481[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>ti_next_los < ti_output) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K482[m[K[36m[K:[m[K          ti_output = [01;31m[Ke-[m[K>ti_next_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>ti_current = ti_current;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K492[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K493[m[K[36m[K:[m[K    cosmology_update([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>ti_current);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K494[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_active_bin = max_active_bin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K495[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>time = time;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K506[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_snapshots) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K507[m[K[36m[K:[m[K    output_list_read_next_time([01;31m[Ke-[m[K>output_list_snapshots, e, "snapshots",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K508[m[K[36m[K:[m[K                               &[01;31m[Ke-[m[K>ti_next_snapshot);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K514[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K515[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end * [01;31m[Ke-[m[K>delta_time_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K517[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end + [01;31m[Ke-[m[K>delta_time_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K521[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K522[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>a_first_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>time_first_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K531[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_snapshot = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_snapshot = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K536[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_snapshot > [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K541[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K542[m[K[36m[K:[m[K      time *= [01;31m[Ke-[m[K>delta_time_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K      time += [01;31m[Ke-[m[K>delta_time_snapshot;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K549[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_next_snapshot = -1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K550[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("No further output time.");
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K554[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K556[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_snapshot * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K557[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K561[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_next_snapshot * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K562[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K575[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_stats) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K    output_list_read_next_time([01;31m[Ke-[m[K>output_list_stats, e, "stats",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K577[m[K[36m[K:[m[K                               &[01;31m[Ke-[m[K>ti_next_stats);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K583[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K584[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end * [01;31m[Ke-[m[K>delta_time_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K586[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end + [01;31m[Ke-[m[K>delta_time_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K590[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K591[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>a_first_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K593[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>time_first_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K599[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K600[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_stats = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K602[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_stats = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_stats > [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K610[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K611[m[K[36m[K:[m[K      time *= [01;31m[Ke-[m[K>delta_time_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K613[m[K[36m[K:[m[K      time += [01;31m[Ke-[m[K>delta_time_statistics;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K618[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_next_stats = -1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("No further output time.");
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K623[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K625[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_stats * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K626[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K631[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_next_stats * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K632[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K646[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_los) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K647[m[K[36m[K:[m[K    output_list_read_next_time([01;31m[Ke-[m[K>output_list_los, e, "line of sights",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K648[m[K[36m[K:[m[K                               &[01;31m[Ke-[m[K>ti_next_los);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K654[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K655[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end * [01;31m[Ke-[m[K>delta_time_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K657[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end + [01;31m[Ke-[m[K>delta_time_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K661[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K662[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>a_first_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K664[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>time_first_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K670[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K671[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_los = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K673[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_los = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K676[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_los > [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K681[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K682[m[K[36m[K:[m[K      time *= [01;31m[Ke-[m[K>delta_time_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K684[m[K[36m[K:[m[K      time += [01;31m[Ke-[m[K>delta_time_los;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K689[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_next_los = -1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K690[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("No further LOS output time.");
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K694[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K696[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_los * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K697[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K702[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_next_los * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K703[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K717[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_stf) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K718[m[K[36m[K:[m[K    output_list_read_next_time([01;31m[Ke-[m[K>output_list_stf, e, "stf", &[01;31m[Ke-[m[K>ti_next_stf);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K724[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K725[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end * [01;31m[Ke-[m[K>delta_time_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K727[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end + [01;31m[Ke-[m[K>delta_time_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K731[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K732[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>a_first_stf_output;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K734[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>time_first_stf_output;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K740[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K741[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_stf = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K743[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_stf = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_stf > [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K751[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K752[m[K[36m[K:[m[K      time *= [01;31m[Ke-[m[K>delta_time_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K754[m[K[36m[K:[m[K      time += [01;31m[Ke-[m[K>delta_time_stf;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_next_stf = -1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("No further output time.");
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K764[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K766[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_stf * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K767[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K770[m[K[36m[K:[m[K      const float next_stf_time = [01;31m[Ke-[m[K>ti_next_stf * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K771[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K786[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K787[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end * [01;31m[Ke-[m[K>delta_time_fof;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K789[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end + [01;31m[Ke-[m[K>delta_time_fof;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K794[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>a_first_fof_call;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K796[m[K[36m[K:[m[K    time = [01;31m[Ke-[m[K>time_first_fof_call;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K802[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K803[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_fof = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K805[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>ti_next_fof = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K808[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>ti_next_fof > [01;31m[Ke-[m[K>ti_current) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K813[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K814[m[K[36m[K:[m[K      time *= [01;31m[Ke-[m[K>delta_time_fof;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K816[m[K[36m[K:[m[K      time += [01;31m[Ke-[m[K>delta_time_fof;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K821[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>ti_next_fof = -1;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K822[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("No further FoF time.");
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K826[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K828[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_fof * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K829[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose) message("Next FoF time set to a=%e.", next_fof_time);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K      const float next_fof_time = [01;31m[Ke-[m[K>ti_next_fof * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K832[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose) message("Next FoF time set to t=%e.", next_fof_time);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K847[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_list_snapshots = NULL;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K848[m[K[36m[K:[m[K  output_list_init(&[01;31m[Ke-[m[K>output_list_snapshots, e, "Snapshots",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K849[m[K[36m[K:[m[K                   &[01;31m[Ke-[m[K>delta_time_snapshot);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K851[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_snapshots) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K856[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>output_list_snapshots->select_output_on)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K      output_list_check_selection([01;31m[Ke-[m[K>output_list_snapshots, output_options);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K861[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K862[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>a_first_snapshot =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K863[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_snapshot * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K865[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time_first_snapshot =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K866[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_next_snapshot * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K870[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_list_stats = NULL;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K871[m[K[36m[K:[m[K  output_list_init(&[01;31m[Ke-[m[K>output_list_stats, e, "Statistics",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K872[m[K[36m[K:[m[K                   &[01;31m[Ke-[m[K>delta_time_statistics);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K874[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_stats) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K877[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>a_first_statistics =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K879[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_stats * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K881[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time_first_statistics =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K882[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_next_stats * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K886[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_list_stf = NULL;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K887[m[K[36m[K:[m[K  output_list_init(&[01;31m[Ke-[m[K>output_list_stf, e, "StructureFinding",
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K888[m[K[36m[K:[m[K                   &[01;31m[Ke-[m[K>delta_time_stf);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K890[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_stf) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K893[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K894[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>a_first_stf_output =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K895[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_stf * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K897[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time_first_stf_output = [01;31m[Ke-[m[K>ti_next_stf * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K901[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>output_list_los = NULL;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K  output_list_init(&[01;31m[Ke-[m[K>output_list_los, e, "LineOfSight", &[01;31m[Ke-[m[K>delta_time_los);
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K904[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>output_list_los) {
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K907[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology)
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K908[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>a_first_los =
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K          exp([01;31m[Ke-[m[K>ti_next_los * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Kengine_io.c[m[K[36m[K:[m[K[32m[K911[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time_first_los = [01;31m[Ke-[m[K>ti_next_los * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K * @param with_limiter Are we running with the tim[01;31m[Ke-[m[Kstep limiter?
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K * @param with_sync Are we running with tim[01;31m[Ke-[m[Kstep synchronization?
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks && [01;31m[Ke-[m[K>policy & engine_policy_stars) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K407[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K502[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K578[m[K[36m[K:[m[K * @param tend The top-level tim[01;31m[Ke-[m[Kstep communication #task.
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K581[m[K[36m[K:[m[K * @param with_limiter Are we running with the tim[01;31m[Ke-[m[Kstep limiter?
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K582[m[K[36m[K:[m[K * @param with_sync Are we running with tim[01;31m[Ke-[m[Kstep synchronization?
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K592[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K736[m[K[36m[K:[m[K * @param tend The top-level tim[01;31m[Ke-[m[Kstep communication #task.
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K745[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks && [01;31m[Ke-[m[K>policy & engine_policy_stars) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K751[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K805[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) error("Local cell!");
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K867[m[K[36m[K:[m[K * @param tend The top-level tim[01;31m[Ke-[m[Kstep communication #task.
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K877[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K911[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) error("Local cell!");
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K * @param tend The top-level tim[01;31m[Ke-[m[Kstep communication #task.
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K967[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K * @param tend The top-level tim[01;31m[Ke-[m[Kstep communication #task.
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1022[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1092[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1093[m[K[36m[K:[m[K  const int with_sinks = ([01;31m[Ke-[m[K>policy & engine_policy_sinks);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1094[m[K[36m[K:[m[K  const int with_stars = ([01;31m[Ke-[m[K>policy & engine_policy_stars);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1095[m[K[36m[K:[m[K  const int with_star_formation = ([01;31m[Ke-[m[K>policy & engine_policy_star_formation);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1098[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1099[m[K[36m[K:[m[K  const int with_timestep_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1101[m[K[36m[K:[m[K  const int with_csds = [01;31m[Ke-[m[K>policy & engine_policy_csds;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1105[m[K[36m[K:[m[K  if (c->top == c && c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1136[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1146[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>neutrino_properties->use_delta_f) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1171[m[K[36m[K:[m[K      /* Add the tim[01;31m[Ke-[m[Kstep calculation task and its dependency */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1193[m[K[36m[K:[m[K      /* Tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1204[m[K[36m[K:[m[K      /* Tim[01;31m[Ke-[m[Kstep synchronization */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1243[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1244[m[K[36m[K:[m[K  const int is_self_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1246[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_stars) && !([01;31m[Ke-[m[K>policy & engine_policy_hydro);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1252[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1313[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1353[m[K[36m[K:[m[K    struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1380[m[K[36m[K:[m[K    struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1411[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1412[m[K[36m[K:[m[K  const int with_stars = ([01;31m[Ke-[m[K>policy & engine_policy_stars);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1413[m[K[36m[K:[m[K  const int with_sinks = ([01;31m[Ke-[m[K>policy & engine_policy_sinks);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1414[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1415[m[K[36m[K:[m[K  const int with_cooling = ([01;31m[Ke-[m[K>policy & engine_policy_cooling);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1416[m[K[36m[K:[m[K  const int with_star_formation = ([01;31m[Ke-[m[K>policy & engine_policy_star_formation);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1418[m[K[36m[K:[m[K  const int with_black_holes = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1419[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1421[m[K[36m[K:[m[K  const int with_csds = ([01;31m[Ke-[m[K>policy & engine_policy_csds);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1427[m[K[36m[K:[m[K  if ((c->nodeID == [01;31m[Ke-[m[K>nodeID) && (star_resort_cell == NULL) &&
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1433[m[K[36m[K:[m[K      /* Record this is the level where we r[01;31m[Ke-[m[Ksort */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1447[m[K[36m[K:[m[K      /* Record this is the level where we r[01;31m[Ke-[m[Ksort */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1477[m[K[36m[K:[m[K    if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1730[m[K[36m[K:[m[K  const int with_hydro = ([01;31m[Ke-[m[K>policy & engine_policy_hydro);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1731[m[K[36m[K:[m[K  const int with_self_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1732[m[K[36m[K:[m[K  const int with_ext_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1759[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1760[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1761[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1766[m[K[36m[K:[m[K  const double theta_crit = [01;31m[Ke-[m[K>gravity_properties->theta_crit;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1767[m[K[36m[K:[m[K  const double max_distance = [01;31m[Ke-[m[K>mesh->r_cut_max;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1870[m[K[36m[K:[m[K              const int proxy_id = [01;31m[Ke-[m[K>proxy_ind[cj->nodeID];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1874[m[K[36m[K:[m[K              const struct proxy *p = &[01;31m[Ke-[m[K>proxies[proxy_id];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1890[m[K[36m[K:[m[K              const int proxy_id = [01;31m[Ke-[m[K>proxy_ind[ci->nodeID];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1894[m[K[36m[K:[m[K              const struct proxy *p = &[01;31m[Ke-[m[K>proxies[proxy_id];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1924[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1925[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1926[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K1957[m[K[36m[K:[m[K  struct scheduler *const sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2043[m[K[36m[K:[m[K      /* Multipol[01;31m[Ke-[m[Kmultipole interaction of progenies */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2061[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2062[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2233[m[K[36m[K:[m[K * @param with_limiter Do we have a tim[01;31m[Ke-[m[Kstep limiter ?
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2286[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2287[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2288[m[K[36m[K:[m[K  const int with_cooling = ([01;31m[Ke-[m[K>policy & engine_policy_cooling);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2290[m[K[36m[K:[m[K      ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2291[m[K[36m[K:[m[K  const int with_timestep_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2292[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2293[m[K[36m[K:[m[K  const int with_black_holes = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2294[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2295[m[K[36m[K:[m[K  const int with_sink = ([01;31m[Ke-[m[K>policy & engine_policy_sinks);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2356[m[K[36m[K:[m[K      /* the task for the tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K2619[m[K[36m[K:[m[K      /* and the task for the tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3116[m[K[36m[K:[m[K      /* and the task for the tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3394[m[K[36m[K:[m[K      /* and the task for the tim[01;31m[Ke-[m[Kstep limiter */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3904[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3905[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3906[m[K[36m[K:[m[K  const int with_stars = ([01;31m[Ke-[m[K>policy & engine_policy_stars);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3907[m[K[36m[K:[m[K  const int with_sinks = ([01;31m[Ke-[m[K>policy & engine_policy_sinks);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3908[m[K[36m[K:[m[K  const int with_black_holes = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3910[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3911[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3912[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3981[m[K[36m[K:[m[K            const int proxy_id = [01;31m[Ke-[m[K>proxy_ind[cj->nodeID];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3985[m[K[36m[K:[m[K            const struct proxy *p = &[01;31m[Ke-[m[K>proxies[proxy_id];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K3999[m[K[36m[K:[m[K            const int proxy_id = [01;31m[Ke-[m[K>proxy_ind[ci->nodeID];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4003[m[K[36m[K:[m[K            const struct proxy *p = &[01;31m[Ke-[m[K>proxies[proxy_id];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4032[m[K[36m[K:[m[K  const int with_star_formation = ([01;31m[Ke-[m[K>policy & engine_policy_star_formation);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4033[m[K[36m[K:[m[K  const int with_limiter = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4034[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4035[m[K[36m[K:[m[K  const int with_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4039[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4053[m[K[36m[K:[m[K          &[01;31m[Ke-[m[K>sched, task_type_send, task_subtype_tend, ci->mpi.tag, 0, ci, cj);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4054[m[K[36m[K:[m[K      scheduler_addunlock(&[01;31m[Ke-[m[K>sched, ci->timestep_collect, tend);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4061[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_hydro) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4070[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_feedback) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4077[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_black_holes) &&
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4086[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) &&
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4090[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_rt) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4100[m[K[36m[K:[m[K  const int with_star_formation = ([01;31m[Ke-[m[K>policy & engine_policy_star_formation);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4101[m[K[36m[K:[m[K  const int with_limiter = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4102[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4103[m[K[36m[K:[m[K  const int with_black_holes = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4104[m[K[36m[K:[m[K  const int with_sync = ([01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4108[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4121[m[K[36m[K:[m[K      tend = scheduler_addtask(&[01;31m[Ke-[m[K>sched, task_type_recv, task_subtype_tend,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4129[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_hydro) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4139[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_feedback) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4146[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_black_holes) &&
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4155[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) &&
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4161[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_rt) && (type & proxy_cell_type_hydro))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4186[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4187[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4188[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4252[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4253[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4256[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restarting) error("Running FOF on a restart step!");
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4259[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_fof)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4260[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_make_fofloop_tasks_mapper, NULL,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4263[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4270[m[K[36m[K:[m[K  scheduler_splittasks(sched, /*fof_tasks=*/1, [01;31m[Ke-[m[K>verbose);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4272[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4278[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>sched.nr_tasks; ++i) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4279[m[K[36m[K:[m[K    const struct task *t = &[01;31m[Ke-[m[K>sched.tasks[i];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4285[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4288[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>sched.nr_tasks, [01;31m[Ke-[m[K>sched.size,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4289[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>sched.nr_tasks / (float)[01;31m[Ke-[m[K>sched.size,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4290[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>sched.size * sizeof(struct task) / (1024 * 1024));
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4292[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4304[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4305[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4310[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the scheduler. */
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4316[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4317[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_make_hydroloop_tasks_mapper, NULL,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4320[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4327[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4328[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_make_self_gravity_tasks_mapper, NULL,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4332[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4337[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4340[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>sched.nr_tasks == 0 && (s->nr_gparts > 0 || s->nr_parts > 0))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4346[m[K[36m[K:[m[K  scheduler_splittasks(sched, /*fof_tasks=*/0, [01;31m[Ke-[m[K>verbose);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4348[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4354[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>sched.nr_tasks; ++i) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4355[m[K[36m[K:[m[K    const struct task *t = &[01;31m[Ke-[m[K>sched.tasks[i];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4361[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>links != NULL) swift_free("links", [01;31m[Ke-[m[K>links);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4362[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>size_links = [01;31m[Ke-[m[K>sched.nr_tasks * [01;31m[Ke-[m[K>links_per_tasks;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4365[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>size_links < [01;31m[Ke-[m[K>nr_links * engine_rebuild_link_alloc_margin)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4366[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>size_links = [01;31m[Ke-[m[K>nr_links * engine_rebuild_link_alloc_margin;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4369[m[K[36m[K:[m[K  if (([01;31m[Ke-[m[K>links = (struct link *)swift_malloc(
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4370[m[K[36m[K:[m[K           "links", sizeof(struct link) * [01;31m[Ke-[m[K>size_links)) == NULL)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4372[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_links = 0;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4379[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_count_and_link_tasks_mapper,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4383[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4389[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the tag counter. MPI tags are defined for top-level cells in
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4397[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, cell_set_super_mapper, cells, nr_cells,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4400[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4405[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_make_hierarchical_tasks_mapper, cells,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4413[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_hydro) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4420[m[K[36m[K:[m[K    /* threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_make_extra_hydroloop_tasks_mapper,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4425[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4432[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & (engine_policy_self_gravity | engine_policy_external_gravity))
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4435[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4443[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_mpi) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4450[m[K[36m[K:[m[K    for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4451[m[K[36m[K:[m[K      max_num_send_cells += [01;31m[Ke-[m[K>proxies[pid].nr_cells_out;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4458[m[K[36m[K:[m[K    for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4461[m[K[36m[K:[m[K      struct proxy *p = &[01;31m[Ke-[m[K>proxies[pid];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4470[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_addtasks_send_mapper,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4477[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4484[m[K[36m[K:[m[K    proxy_tags_exchange([01;31m[Ke-[m[K>proxies, [01;31m[Ke-[m[K>nr_proxies, s);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4486[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4495[m[K[36m[K:[m[K    for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4496[m[K[36m[K:[m[K      max_num_recv_cells += [01;31m[Ke-[m[K>proxies[pid].nr_cells_in;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4502[m[K[36m[K:[m[K    for (int pid = 0; pid < [01;31m[Ke-[m[K>nr_proxies; pid++) {
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4505[m[K[36m[K:[m[K      struct proxy *p = &[01;31m[Ke-[m[K>proxies[pid];
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4511[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_addtasks_recv_mapper,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4517[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4528[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4531[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>sched.nr_tasks, [01;31m[Ke-[m[K>sched.size,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4532[m[K[36m[K:[m[K        (float)[01;31m[Ke-[m[K>sched.nr_tasks / (float)[01;31m[Ke-[m[K>sched.size,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4533[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>sched.size * sizeof(struct task) / (1024 * 1024));
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4536[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4539[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>nr_links, [01;31m[Ke-[m[K>size_links, (float)[01;31m[Ke-[m[K>nr_links / (float)[01;31m[Ke-[m[K>size_links,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4540[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>size_links * sizeof(struct link) / (1024 * 1024));
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4543[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4545[m[K[36m[K:[m[K            (float)[01;31m[Ke-[m[K>sched.nr_tasks / s->tot_cells,
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4546[m[K[36m[K:[m[K            (float)[01;31m[Ke-[m[K>nr_links / [01;31m[Ke-[m[K>sched.nr_tasks);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4553[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4562[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4567[m[K[36m[K:[m[K  scheduler_reweight(sched, [01;31m[Ke-[m[K>verbose);
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4570[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>tasks_age = 0;
[35m[Kengine_maketasks.c[m[K[36m[K:[m[K[32m[K4572[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K73[m[K[36m[K:[m[K  const int with_timestep_limiter = [01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[K  const int with_timestep_sync = [01;31m[Ke-[m[K>policy & engine_policy_timestep_sync;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K75[m[K[36m[K:[m[K  const int with_sinks = [01;31m[Ke-[m[K>policy & engine_policy_sinks;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K  const int with_stars = [01;31m[Ke-[m[K>policy & engine_policy_stars;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K  const int with_star_formation = ([01;31m[Ke-[m[K>policy & engine_policy_star_formation);
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K  const int with_feedback = [01;31m[Ke-[m[K>policy & engine_policy_feedback;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K    /* Singl[01;31m[Ke-[m[Kcell task? */
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K1396[m[K[36m[K:[m[K    /* Tim[01;31m[Ke-[m[Kstep or tim[01;31m[Ke-[m[Kstep collection? */
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K1477[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K1482[m[K[36m[K:[m[K  size_t extra_data[3] = {(size_t)e, (size_t)rebuild_space, (size_t)&[01;31m[Ke-[m[K>sched};
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K1483[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_marktasks_mapper, s->tasks, s->nr_tasks,
[35m[Kengine_marktasks.c[m[K[36m[K:[m[K[32m[K1487[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K53[m[K[36m[K:[m[K  struct proxy *proxies = [01;31m[Ke-[m[K>proxies;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K  const int with_hydro = ([01;31m[Ke-[m[K>policy & engine_policy_hydro);
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K  const int with_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K  const double theta_crit = [01;31m[Ke-[m[K>gravity_properties->theta_crit;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K  const double theta_crit_inv = 1. / [01;31m[Ke-[m[K>gravity_properties->theta_crit;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  const double max_mesh_dist = [01;31m[Ke-[m[K>mesh->r_cut_max;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>proxy_ind == NULL)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>proxy_ind = (int *)malloc(sizeof(int) * [01;31m[Ke-[m[K>nr_nodes)) == NULL)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_nodes; k++) [01;31m[Ke-[m[K>proxy_ind[k] = -1;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K84[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>nr_proxies = 0;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K229[m[K[36m[K:[m[K                int proxy_id = [01;31m[Ke-[m[K>proxy_ind[cells[cjd].nodeID];
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K                  if ([01;31m[Ke-[m[K>nr_proxies == engine_maxproxies)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K235[m[K[36m[K:[m[K                  proxy_init(&proxies[[01;31m[Ke-[m[K>nr_proxies], [01;31m[Ke-[m[K>nodeID,
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>proxy_ind[cells[cjd].nodeID] = [01;31m[Ke-[m[K>nr_proxies;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K                  proxy_id = [01;31m[Ke-[m[K>nr_proxies;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K241[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>nr_proxies += 1;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K                int proxy_id = [01;31m[Ke-[m[K>proxy_ind[cells[cid].nodeID];
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K265[m[K[36m[K:[m[K                  if ([01;31m[Ke-[m[K>nr_proxies == engine_maxproxies)
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K269[m[K[36m[K:[m[K                  proxy_init(&proxies[[01;31m[Ke-[m[K>nr_proxies], [01;31m[Ke-[m[K>nodeID,
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K273[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>proxy_ind[cells[cid].nodeID] = [01;31m[Ke-[m[K>nr_proxies;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K                  proxy_id = [01;31m[Ke-[m[K>nr_proxies;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>nr_proxies += 1;
[35m[Kengine_proxy.c[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K469[m[K[36m[K:[m[K        /* R[01;31m[Ke-[m[Klink */
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K480[m[K[36m[K:[m[K        /* R[01;31m[Ke-[m[Klink */
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K        /* R[01;31m[Ke-[m[Klink */
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_sinks) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K528[m[K[36m[K:[m[K  const int nr_nodes = [01;31m[Ke-[m[K>nr_nodes;
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K529[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K673[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_dest_mapper_part, parts,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K712[m[K[36m[K:[m[K  /* We will need to r[01;31m[Ke-[m[Klink the gpart partners of parts, so save their
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K721[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_savelink_mapper_part,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K740[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_dest_mapper_spart, sparts,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K779[m[K[36m[K:[m[K  /* We need to r[01;31m[Ke-[m[Klink the gpart partners of sparts. */
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K787[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_savelink_mapper_spart,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K806[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_dest_mapper_bpart, bparts,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K845[m[K[36m[K:[m[K  /* We need to r[01;31m[Ke-[m[Klink the gpart partners of bparts. */
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K853[m[K[36m[K:[m[K    threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_savelink_mapper_bpart,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K872[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_dest_mapper_gpart, gparts,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K935[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K936[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K987[m[K[36m[K:[m[K  const int initial_redistribute = [01;31m[Ke-[m[K>ti_current == 0;
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K988[m[K[36m[K:[m[K  if (!initial_redistribute && [01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1008[m[K[36m[K:[m[K      csds_log_parts([01;31m[Ke-[m[K>csds, &parts[part_offset], &xparts[part_offset],
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1013[m[K[36m[K:[m[K      csds_log_sparts([01;31m[Ke-[m[K>csds, &sparts[spart_offset], s_counts[c_ind], e,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1017[m[K[36m[K:[m[K      csds_log_gparts([01;31m[Ke-[m[K>csds, &gparts[gpart_offset], g_counts[c_ind], e,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1040[m[K[36m[K:[m[K      part_align, part_mpi_type, nr_nodes, nodeID, [01;31m[Ke-[m[K>syncredist);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1049[m[K[36m[K:[m[K      xpart_align, xpart_mpi_type, nr_nodes, nodeID, [01;31m[Ke-[m[K>syncredist);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1057[m[K[36m[K:[m[K                             gpart_mpi_type, nr_nodes, nodeID, [01;31m[Ke-[m[K>syncredist);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1067[m[K[36m[K:[m[K                             spart_mpi_type, nr_nodes, nodeID, [01;31m[Ke-[m[K>syncredist);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1077[m[K[36m[K:[m[K                             bpart_mpi_type, nr_nodes, nodeID, [01;31m[Ke-[m[K>syncredist);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1087[m[K[36m[K:[m[K  if (!initial_redistribute && [01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1106[m[K[36m[K:[m[K      csds_log_parts([01;31m[Ke-[m[K>csds, &s->parts[part_offset], &s->xparts[part_offset],
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1111[m[K[36m[K:[m[K      csds_log_sparts([01;31m[Ke-[m[K>csds, &s->sparts[spart_offset], s_counts[c_ind], e,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1115[m[K[36m[K:[m[K      csds_log_gparts([01;31m[Ke-[m[K>csds, &s->gparts[gpart_offset], g_counts[c_ind], e,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1144[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_redistribute_relink_mapper, nodes,
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1192[m[K[36m[K:[m[K                    nr_bparts_new, [01;31m[Ke-[m[K>verbose);
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1197[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1215[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>step_props |= engine_step_prop_redistribute;
[35m[Kengine_redistribute.c[m[K[36m[K:[m[K[32m[K1217[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K  const int with_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) ||
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K116[m[K[36m[K:[m[K                           ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K  unsigned int seedp = (unsigned int)offset + [01;31m[Ke-[m[K>ti_current % INT_MAX;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Klink everything */
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K195[m[K[36m[K:[m[K      const double delta_x = random_unit_interval(p->id, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K      const double delta_y = random_unit_interval(p->id, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K      const double delta_z = random_unit_interval(p->id, [01;31m[Ke-[m[K>ti_current,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K * This is done on a nod[01;31m[Ke-[m[Kby-node basis. No MPI required here.
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K281[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>hydro_properties->particle_splitting) return;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>s->nr_parts == 0) return;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K288[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K289[m[K[36m[K:[m[K  const int with_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) ||
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K                           ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>hydro_properties->particle_splitting_mass_threshold;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K  const int generate_random_ids = [01;31m[Ke-[m[K>hydro_properties->generate_random_ids;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K305[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_split_gas_particle_count_mapper,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K  if (data_count.max_id > [01;31m[Ke-[m[K>max_parts_id) {
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K  offset_id += [01;31m[Ke-[m[K>max_parts_id + 1;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K332[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>max_parts_id = offset_id + expected_count_id;
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K  MPI_Bcast(&[01;31m[Ke-[m[K>max_parts_id, 1, MPI_LONG_LONG_INT, [01;31m[Ke-[m[K>nr_nodes - 1,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K344[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("Reallocating the part array!");
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K394[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) message("Reallocating the gpart array!");
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K413[m[K[36m[K:[m[K                                    &[01;31m[Ke-[m[K>threadpool);
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K422[m[K[36m[K:[m[K                    s->nr_bparts, [01;31m[Ke-[m[K>verbose);
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K437[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_split_gas_particle_split_mapper,
[35m[Kengine_split_particles.c[m[K[36m[K:[m[K[32m[K458[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the proxies. */
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>proxies[k].nr_parts_out = 0;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>proxies[k].nr_gparts_out = 0;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>proxies[k].nr_sparts_out = 0;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K82[m[K[36m[K:[m[K    [01;31m[Ke-[m[K>proxies[k].nr_bparts_out = 0;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K    const int node_id = [01;31m[Ke-[m[K>s->cells_top[ind_part[k]].nodeID;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K    if (node_id < 0 || node_id >= [01;31m[Ke-[m[K>nr_nodes)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K    const int pid = [01;31m[Ke-[m[K>proxy_ind[node_id];
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Klink the associated gpart with the buffer offset of the part. */
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K          -[01;31m[Ke-[m[K>proxies[pid].nr_parts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K    proxy_parts_load(&[01;31m[Ke-[m[K>proxies[pid], &s->parts[offset_parts + k],
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K      csds_log_part([01;31m[Ke-[m[K>csds, &s->parts[offset_parts + k],
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K137[m[K[36m[K:[m[K    const int node_id = [01;31m[Ke-[m[K>s->cells_top[ind_spart[k]].nodeID;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K138[m[K[36m[K:[m[K    if (node_id < 0 || node_id >= [01;31m[Ke-[m[K>nr_nodes)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K    const int pid = [01;31m[Ke-[m[K>proxy_ind[node_id];
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Klink the associated gpart with the buffer offset of the spart. */
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K          -[01;31m[Ke-[m[K>proxies[pid].nr_sparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K162[m[K[36m[K:[m[K    proxy_sparts_load(&[01;31m[Ke-[m[K>proxies[pid], &s->sparts[offset_sparts + k], 1);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K165[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K      csds_log_spart([01;31m[Ke-[m[K>csds, &s->sparts[offset_sparts + k], e,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K    const int node_id = [01;31m[Ke-[m[K>s->cells_top[ind_bpart[k]].nodeID;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K181[m[K[36m[K:[m[K    if (node_id < 0 || node_id >= [01;31m[Ke-[m[K>nr_nodes)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K183[m[K[36m[K:[m[K    const int pid = [01;31m[Ke-[m[K>proxy_ind[node_id];
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K193[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Klink the associated gpart with the buffer offset of the bpart. */
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K          -[01;31m[Ke-[m[K>proxies[pid].nr_bparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K205[m[K[36m[K:[m[K    proxy_bparts_load(&[01;31m[Ke-[m[K>proxies[pid], &s->bparts[offset_bparts + k], 1);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K221[m[K[36m[K:[m[K    const int node_id = [01;31m[Ke-[m[K>s->cells_top[ind_gpart[k]].nodeID;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K222[m[K[36m[K:[m[K    if (node_id < 0 || node_id >= [01;31m[Ke-[m[K>nr_nodes)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K    const int pid = [01;31m[Ke-[m[K>proxy_ind[node_id];
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K    proxy_gparts_load(&[01;31m[Ke-[m[K>proxies[pid], &s->gparts[offset_gparts + k], 1);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K    if (([01;31m[Ke-[m[K>policy & engine_policy_csds) &&
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K248[m[K[36m[K:[m[K      csds_log_gpart([01;31m[Ke-[m[K>csds, &s->gparts[offset_gparts + k], e,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K258[m[K[36m[K:[m[K    proxy_parts_exchange_first(&[01;31m[Ke-[m[K>proxies[k]);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K259[m[K[36m[K:[m[K    reqs_in[k] = [01;31m[Ke-[m[K>proxies[k].req_parts_count_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K    reqs_out[k] = [01;31m[Ke-[m[K>proxies[k].req_parts_count_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K266[m[K[36m[K:[m[K    if (MPI_Waitany([01;31m[Ke-[m[K>nr_proxies, reqs_in, &pid, MPI_STATUS_IGNORE) !=
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K    proxy_parts_exchange_second(&[01;31m[Ke-[m[K>proxies[pid]);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K  if (MPI_Waitall([01;31m[Ke-[m[K>nr_proxies, reqs_out, MPI_STATUSES_IGNORE) != MPI_SUCCESS)
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K    count_parts_in += [01;31m[Ke-[m[K>proxies[k].nr_parts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K    count_gparts_in += [01;31m[Ke-[m[K>proxies[k].nr_gparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K    count_sparts_in += [01;31m[Ke-[m[K>proxies[k].nr_sparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K288[m[K[36m[K:[m[K    count_bparts_in += [01;31m[Ke-[m[K>proxies[k].nr_bparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K384[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_parts_in > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K      reqs_in[5 * k] = [01;31m[Ke-[m[K>proxies[k].req_parts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K386[m[K[36m[K:[m[K      reqs_in[5 * k + 1] = [01;31m[Ke-[m[K>proxies[k].req_xparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K391[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_gparts_in > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K      reqs_in[5 * k + 2] = [01;31m[Ke-[m[K>proxies[k].req_gparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_sparts_in > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K      reqs_in[5 * k + 3] = [01;31m[Ke-[m[K>proxies[k].req_sparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_bparts_in > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K      reqs_in[5 * k + 4] = [01;31m[Ke-[m[K>proxies[k].req_bparts_in;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_parts_out > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K411[m[K[36m[K:[m[K      reqs_out[5 * k] = [01;31m[Ke-[m[K>proxies[k].req_parts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K412[m[K[36m[K:[m[K      reqs_out[5 * k + 1] = [01;31m[Ke-[m[K>proxies[k].req_xparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_gparts_out > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K418[m[K[36m[K:[m[K      reqs_out[5 * k + 2] = [01;31m[Ke-[m[K>proxies[k].req_gparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_sparts_out > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K      reqs_out[5 * k + 3] = [01;31m[Ke-[m[K>proxies[k].req_sparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K429[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>proxies[k].nr_bparts_out > 0) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K430[m[K[36m[K:[m[K      reqs_out[5 * k + 4] = [01;31m[Ke-[m[K>proxies[k].req_bparts_out;
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K    if ((err = MPI_Waitany(5 * [01;31m[Ke-[m[K>nr_proxies, reqs_in, &pid,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K460[m[K[36m[K:[m[K      struct proxy *prox = &[01;31m[Ke-[m[K>proxies[pid / 5];
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K473[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>policy & engine_policy_csds) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K480[m[K[36m[K:[m[K        csds_log_parts([01;31m[Ke-[m[K>csds, parts, xparts, prox->nr_parts_in, e,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K485[m[K[36m[K:[m[K        csds_log_sparts([01;31m[Ke-[m[K>csds, sparts, prox->nr_sparts_in, e,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K490[m[K[36m[K:[m[K        csds_log_gparts([01;31m[Ke-[m[K>csds, gparts, prox->nr_gparts_in, e,
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K506[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Klink the gparts. */
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K538[m[K[36m[K:[m[K    if (MPI_Waitall(5 * [01;31m[Ke-[m[K>nr_proxies, reqs_out, MPI_STATUSES_IGNORE) !=
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K543[m[K[36m[K:[m[K  for (int k = 0; k < [01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K    proxy_free_particle_buffers(&[01;31m[Ke-[m[K>proxies[k]);
[35m[Kengine_strays.c[m[K[36m[K:[m[K[32m[K547[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K102[m[K[36m[K:[m[K  const int forcerebuild = cell_unskip_hydro_tasks(c, &[01;31m[Ke-[m[K>sched);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K  if (forcerebuild) atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K      c, &[01;31m[Ke-[m[K>sched, with_star_formation, with_star_formation_sink);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K  if (forcerebuild) atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K178[m[K[36m[K:[m[K  const int forcerebuild = cell_unskip_black_holes_tasks(c, &[01;31m[Ke-[m[K>sched);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K  if (forcerebuild) atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K  const int forcerebuild = cell_unskip_sinks_tasks(c, &[01;31m[Ke-[m[K>sched);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K  if (forcerebuild) atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K242[m[K[36m[K:[m[K  cell_unskip_gravity_tasks(c, &[01;31m[Ke-[m[K>sched);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  if (!([01;31m[Ke-[m[K>policy & engine_policy_rt))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K278[m[K[36m[K:[m[K  const int forcerebuild = cell_unskip_rt_tasks(c, &[01;31m[Ke-[m[K>sched, sub_cycle);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K  if (forcerebuild) atomic_inc(&[01;31m[Ke-[m[K>forcerebuild);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K298[m[K[36m[K:[m[K  struct cell *const cells_top = [01;31m[Ke-[m[K>s->cells_top;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K  const int with_sinks = [01;31m[Ke-[m[K>policy & engine_policy_sinks;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K  const int with_stars = [01;31m[Ke-[m[K>policy & engine_policy_stars;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K  const int with_star_formation = [01;31m[Ke-[m[K>policy & engine_policy_star_formation;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_hydro))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K336[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) &&
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K337[m[K[36m[K:[m[K            !([01;31m[Ke-[m[K>policy & engine_policy_external_gravity))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K344[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_stars))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K352[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_sinks))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K359[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_black_holes))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>policy & engine_policy_rt))
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K388[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K389[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K391[m[K[36m[K:[m[K  const int with_hydro = [01;31m[Ke-[m[K>policy & engine_policy_hydro;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K  const int with_self_grav = [01;31m[Ke-[m[K>policy & engine_policy_self_gravity;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K  const int with_ext_grav = [01;31m[Ke-[m[K>policy & engine_policy_external_gravity;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K394[m[K[36m[K:[m[K  const int with_stars = [01;31m[Ke-[m[K>policy & engine_policy_stars;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K395[m[K[36m[K:[m[K  const int with_sinks = [01;31m[Ke-[m[K>policy & engine_policy_sinks;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K396[m[K[36m[K:[m[K  const int with_feedback = [01;31m[Ke-[m[K>policy & engine_policy_feedback;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K  const int with_black_holes = [01;31m[Ke-[m[K>policy & engine_policy_black_holes;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K408[m[K[36m[K:[m[K  int *local_cells = [01;31m[Ke-[m[K>s->local_cells_with_tasks_top;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K432[m[K[36m[K:[m[K    scheduler_activate_all_subtype(&[01;31m[Ke-[m[K>sched, c->mpi.send, task_subtype_tend);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K    scheduler_activate_all_subtype(&[01;31m[Ke-[m[K>sched, c->mpi.recv, task_subtype_tend);
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K497[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_unskip_mapper, local_active_cells,
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K510[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K520[m[K[36m[K:[m[K  struct cell *const cells_top = [01;31m[Ke-[m[K>s->cells_top;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K538[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K539[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K  int *local_cells = [01;31m[Ke-[m[K>s->local_cells_with_tasks_top;
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K567[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, engine_do_unskip_sub_cycle_mapper, local_cells,
[35m[Kengine_unskip.c[m[K[36m[K:[m[K[32m[K570[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kentropy_floor.h[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[K/* Pr[01;31m[Ke-[m[Kdeclarations to avoid cyclic inclusions */
[35m[Kexp.h[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K * This function has a relative accuracy of 2.1[01;31m[Ke-[m[K6 over the input
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K94[m[K[36m[K:[m[K * on-th[01;31m[Ke-[m[Kfly? (0)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K258[m[K[36m[K:[m[K  const int verbose = s->[01;31m[Ke-[m[K>verbose;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K280[m[K[36m[K:[m[K    if (s->[01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K    if (!(s->[01;31m[Ke-[m[K>policy & engine_policy_cosmology))
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K295[m[K[36m[K:[m[K    const double Omega_cdm = s->[01;31m[Ke-[m[K>cosmology->Omega_cdm;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K296[m[K[36m[K:[m[K    const double Omega_b = s->[01;31m[Ke-[m[K>cosmology->Omega_b;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K298[m[K[36m[K:[m[K    const double critical_density_0 = s->[01;31m[Ke-[m[K>cosmology->critical_density_0;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K315[m[K[36m[K:[m[K    if (s->[01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K344[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_set_initial_group_index_mapper,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_set_initial_group_size_mapper,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K  ti_current = s->[01;31m[Ke-[m[K>ti_current;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K  if (b_group_siz[01;31m[Ke-[m[K>size > a_group_siz[01;31m[Ke-[m[K>size)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K  else if (b_group_siz[01;31m[Ke-[m[K>size < a_group_siz[01;31m[Ke-[m[K>size)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1116[m[K[36m[K:[m[K          /* If the group_links array is not big enough r[01;31m[Ke-[m[Kallocate it. */
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1129[m[K[36m[K:[m[K            message("R[01;31m[Ke-[m[Kallocating local group links from %d to %d elements.",
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1320[m[K[36m[K:[m[K  atomic_add(&group_size[key], valu[01;31m[Ke-[m[K>value_st);
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1336[m[K[36m[K:[m[K  size_t *group_index = s->[01;31m[Ke-[m[K>fof_properties->group_index;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1337[m[K[36m[K:[m[K  size_t *group_size = s->[01;31m[Ke-[m[K>fof_properties->group_size;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1382[m[K[36m[K:[m[K  atomic_add_d(&group_mass[key], valu[01;31m[Ke-[m[K>value_dbl);
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1398[m[K[36m[K:[m[K  double *group_mass = s->[01;31m[Ke-[m[K>fof_properties->group_mass;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1399[m[K[36m[K:[m[K  const size_t group_id_default = s->[01;31m[Ke-[m[K>fof_properties->group_id_default;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1400[m[K[36m[K:[m[K  const size_t group_id_offset = s->[01;31m[Ke-[m[K>fof_properties->group_id_offset;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1443[m[K[36m[K:[m[K  mass_send[*nsend].group_mass = valu[01;31m[Ke-[m[K>value_dbl;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1444[m[K[36m[K:[m[K  mass_send[*nsend].first_position[0] = valu[01;31m[Ke-[m[K>value_array2_dbl[0];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1445[m[K[36m[K:[m[K  mass_send[*nsend].first_position[1] = valu[01;31m[Ke-[m[K>value_array2_dbl[1];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1446[m[K[36m[K:[m[K  mass_send[*nsend].first_position[2] = valu[01;31m[Ke-[m[K>value_array2_dbl[2];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1447[m[K[36m[K:[m[K  mass_send[*nsend].centre_of_mass[0] = valu[01;31m[Ke-[m[K>value_array_dbl[0];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1448[m[K[36m[K:[m[K  mass_send[*nsend].centre_of_mass[1] = valu[01;31m[Ke-[m[K>value_array_dbl[1];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1449[m[K[36m[K:[m[K  mass_send[*nsend].centre_of_mass[2] = valu[01;31m[Ke-[m[K>value_array_dbl[2];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1450[m[K[36m[K:[m[K  mass_send[*nsend].max_part_density_index = valu[01;31m[Ke-[m[K>value_st;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1451[m[K[36m[K:[m[K  mass_send[*nsend].max_part_density = valu[01;31m[Ke-[m[K>value_flt;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1481[m[K[36m[K:[m[K  const int nr_nodes = s->[01;31m[Ke-[m[K>nr_nodes;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1826[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Kallocate the list if it's needed. */
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1834[m[K[36m[K:[m[K            "R[01;31m[Ke-[m[Kallocating max_part_density_index from %zu to %zu elements.",
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1861[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_calc_group_mass_mapper, gparts,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1961[m[K[36m[K:[m[K  struct fof_props *props = [01;31m[Ke-[m[K>fof_properties;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K1969[m[K[36m[K:[m[K  int local_group_links_size = props->group_links_size / [01;31m[Ke-[m[K>nr_threads;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2000[m[K[36m[K:[m[K    /* If the global group_links array is not big enough r[01;31m[Ke-[m[Kallocate it. */
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2012[m[K[36m[K:[m[K      message("R[01;31m[Ke-[m[Kallocating global group links from %d to %d elements.",
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2191[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Klink things */
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2371[m[K[36m[K:[m[K  int verbose = [01;31m[Ke-[m[K>verbose;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2394[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_proxies; i++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2396[m[K[36m[K:[m[K    for (int j = 0; j < [01;31m[Ke-[m[K>proxies[i].nr_cells_out; j++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2399[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[i].cells_out_type[j] & proxy_cell_type_gravity)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2403[m[K[36m[K:[m[K    for (int j = 0; j < [01;31m[Ke-[m[K>proxies[i].nr_cells_in; j++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2406[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[i].cells_in_type[j] & proxy_cell_type_gravity)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2434[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_proxies; i++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2437[m[K[36m[K:[m[K    if (engine_rank == min(engine_rank, [01;31m[Ke-[m[K>proxies[i].nodeID)) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2439[m[K[36m[K:[m[K      for (int j = 0; j < [01;31m[Ke-[m[K>proxies[i].nr_cells_out; j++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2442[m[K[36m[K:[m[K        if (!([01;31m[Ke-[m[K>proxies[i].cells_out_type[j] & proxy_cell_type_gravity))
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2445[m[K[36m[K:[m[K        struct cell *restrict local_cell = [01;31m[Ke-[m[K>proxies[i].cells_out[j];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2450[m[K[36m[K:[m[K        for (int k = 0; k < [01;31m[Ke-[m[K>proxies[i].nr_cells_in; k++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2453[m[K[36m[K:[m[K          if (!([01;31m[Ke-[m[K>proxies[i].cells_in_type[k] & proxy_cell_type_gravity))
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2456[m[K[36m[K:[m[K          struct cell *restrict foreign_cell = [01;31m[Ke-[m[K>proxies[i].cells_in[k];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2487[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_proxies; i++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2488[m[K[36m[K:[m[K    for (int j = 0; j < [01;31m[Ke-[m[K>proxies[i].nr_cells_out; j++) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2491[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>proxies[i].cells_out_type[j] & proxy_cell_type_gravity) {
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2493[m[K[36m[K:[m[K        local_cells[count] = [01;31m[Ke-[m[K>proxies[i].cells_out[j];
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2505[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, fof_set_outgoing_root_mapper, local_cells,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2550[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_find_foreign_links_mapper, cell_pairs,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2558[m[K[36m[K:[m[K  space_free_foreign_parts([01;31m[Ke-[m[K>s, /*clear pointers=*/1);
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2592[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>nr_nodes * sizeof(int)) != 0)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2598[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>nr_nodes * sizeof(int)) != 0)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2610[m[K[36m[K:[m[K  for (int i = 1; i < [01;31m[Ke-[m[K>nr_nodes; i++)
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2821[m[K[36m[K:[m[K  const int nr_nodes = s->[01;31m[Ke-[m[K>nr_nodes;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2826[m[K[36m[K:[m[K  const int verbose = s->[01;31m[Ke-[m[K>verbose;
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2866[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_calc_group_size_mapper, gparts,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K2931[m[K[36m[K:[m[K    /* Sort the groups in descending order based upon size and r[01;31m[Ke-[m[Klabel their
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K3008[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, fof_set_initial_group_id_mapper, s->gparts,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K3228[m[K[36m[K:[m[K    fof_dump_group_data(props, s->[01;31m[Ke-[m[K>nodeID, s->[01;31m[Ke-[m[K>nr_nodes, output_file_name,
[35m[Kfof.c[m[K[36m[K:[m[K[32m[K3261[m[K[36m[K:[m[K        s->[01;31m[Ke-[m[K>total_nr_gparts - num_parts_in_groups);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, UNIT_CONV_TIME);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, UNIT_CONV_LENGTH);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K  io_write_attribute_d(h_grp, "Redshift", [01;31m[Ke-[m[K>cosmology->z);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  io_write_attribute_d(h_grp, "Scal[01;31m[Ke-[m[Kfactor", [01;31m[Ke-[m[K>cosmology->a);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K58[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) sprintf(systemname, "%s", hostname());
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K73[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K  io_write_attribute_i(h_grp, "NumFilesPerSnapshot", [01;31m[Ke-[m[K>nr_nodes);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K112[m[K[36m[K:[m[K  io_write_attribute_i(h_grp, "ThisFile", [01;31m[Ke-[m[K>nodeID);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K  ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K  io_write_meta_data(h_file, e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>snapshot_compression > 0) {
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K214[m[K[36m[K:[m[K      h_err = H5Pset_deflate(h_prop, [01;31m[Ke-[m[K>snapshot_compression);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K  sprintf(subdir_name, "%s_%04i", props->base_name, [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) safe_checkdir(subdir_name, /*create=*/1);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K  sprintf(file_name, "%s/%s.%d.hdf5", subdir_name, base, [01;31m[Ke-[m[K>nodeID);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K294[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K328[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kfof_catalogue_io.c[m[K[36m[K:[m[K[32m[K340[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kfof_struct.h[m[K[36m[K:[m[K[32m[K28[m[K[36m[K:[m[K * @brief Particl[01;31m[Ke-[m[Kcarried fields for the FoF scheme.
[35m[Kfof_struct.h[m[K[36m[K:[m[K[32m[K42[m[K[36m[K:[m[K * @brief Particl[01;31m[Ke-[m[Kcarried fields for the FoF scheme.
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[K * @param boxSize The sid[01;31m[Ke-[m[Klength (L) of the volume.
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K422[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>s->periodic)
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K    sprintf(file_name, "gravity_checks_exact_periodic_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K    sprintf(file_name, "gravity_checks_exact_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K449[m[K[36m[K:[m[K    if (N == SWIFT_GRAVITY_FORCE_CHECKS && periodic == [01;31m[Ke-[m[K>s->periodic &&
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K450[m[K[36m[K:[m[K        (fabs(newton_G - [01;31m[Ke-[m[K>physical_constants->const_newton_G) / newton_G <
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K451[m[K[36m[K:[m[K         1[01;31m[Ke-[m[K5)) {
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K502[m[K[36m[K:[m[K      const double hi = gravity_get_softening(gpi, [01;31m[Ke-[m[K>gravity_properties);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K577[m[K[36m[K:[m[K        if (periodic && r > 1[01;31m[Ke-[m[K5 * hi) {
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K          const double r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K * @brief Run a brut[01;31m[Ke-[m[Kforce gravity calculation for a subset of particles.
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K653[m[K[36m[K:[m[K  data.const_G = [01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K655[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, gravity_exact_force_compute_mapper,
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K671[m[K[36m[K:[m[K * to the brut[01;31m[Ke-[m[Kforce computed ones.
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K691[m[K[36m[K:[m[K  sprintf(file_name_swift, "gravity_checks_swift_step%.4d_order%d.dat", [01;31m[Ke-[m[K>step,
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K698[m[K[36m[K:[m[K  fprintf(file_swift, "# G= %16.8e\n", [01;31m[Ke-[m[K>physical_constants->const_newton_G);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K  fprintf(file_swift, "# theta= %16.8e\n", [01;31m[Ke-[m[K>gravity_properties->theta_crit);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K761[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>step);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K763[m[K[36m[K:[m[K      sprintf(file_name_exact, "gravity_checks_exact_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Kgravity.c[m[K[36m[K:[m[K[32m[K769[m[K[36m[K:[m[K    fprintf(file_exact, "# G= %16.8e\n", [01;31m[Ke-[m[K>physical_constants->const_newton_G);
[35m[Kgravity_cache.h[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K * @param max_active_bin The largest active bin in the current tim[01;31m[Ke-[m[Kstep.
[35m[Kgravity_cache.h[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K * @param max_active_bin The largest active bin in the current tim[01;31m[Ke-[m[Kstep.
[35m[Kgravity_cache.h[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K * @param max_active_bin The largest active bin in the current tim[01;31m[Ke-[m[Kstep.
[35m[Kgravity_properties.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  /* Tre[01;31m[Ke-[m[KPM parameters */
[35m[Kgravity_properties.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K      error("The mesh sid[01;31m[Ke-[m[Klength must be an even number.");
[35m[Kgravity_properties.c[m[K[36m[K:[m[K[32m[K341[m[K[36m[K:[m[K  message("Self-gravity mesh sid[01;31m[Ke-[m[Klength: N=%d", p->mesh_size);
[35m[Kgravity_properties.h[m[K[36m[K:[m[K[32m[K110[m[K[36m[K:[m[K  /*! Frequency of tre[01;31m[Ke-[m[Krebuild in units of #gpart updates. */
[35m[Kgravity_properties.h[m[K[36m[K:[m[K[32m[K118[m[K[36m[K:[m[K  /*! Periodic long-range mesh sid[01;31m[Ke-[m[Klength */
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K * @brief Pr[01;31m[Ke-[m[Kallocate a number of chunks for the graveyard.
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K155[m[K[36m[K:[m[K * r[01;31m[Ke-[m[Kapplied to the key to obtain a new offset *within the same bucket*. This
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K164[m[K[36m[K:[m[K      message("hashmap is too full (%zu of %zu elements used), r[01;31m[Ke-[m[Khashing.",
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K          "%.2f%%), r[01;31m[Ke-[m[Khashing.",
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K242[m[K[36m[K:[m[K    /* None of the above, so this is a collision. R[01;31m[Ke-[m[Khash, but within the same
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K    message("maximum chain length exceeded, r[01;31m[Ke-[m[Khashing.");
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the chunk array. */
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K  /* Buffer of stray elements, in case we get overflows while r[01;31m[Ke-[m[Khashing. */
[35m[Khashmap.c[m[K[36m[K:[m[K[32m[K438[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset some pointers and values, just in case. */
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K126[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Ksize the hashmap.
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K * hashmap is r[01;31m[Ke-[m[Khashed!
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K158[m[K[36m[K:[m[K * hashmap is r[01;31m[Ke-[m[Khashed!
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K * hashmap is r[01;31m[Ke-[m[Khashed!
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K * @brief D[01;31m[Ke-[m[Kallocate memory associated with this hashmap, clears all the
[35m[Khashmap.h[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K * After a call to `hashmap_free`, the hashmap cna be r[01;31m[Ke-[m[Kinitialized with
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K221[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, hydro_exact_density_compute_mapper,
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K235[m[K[36m[K:[m[K * values obtained via the brut[01;31m[Ke-[m[Kforce summation.
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K  const int with_limiter = [01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K253[m[K[36m[K:[m[K  const double eta = [01;31m[Ke-[m[K>hydro_properties->eta_neighbours;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K254[m[K[36m[K:[m[K  const float h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K255[m[K[36m[K:[m[K  const float h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K259[m[K[36m[K:[m[K      N_ngb_target + 5. * [01;31m[Ke-[m[K>hydro_properties->delta_neighbours;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K      N_ngb_target - 5. * [01;31m[Ke-[m[K>hydro_properties->delta_neighbours;
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K265[m[K[36m[K:[m[K  sprintf(file_name_swift, "hydro_checks_swift_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->delta_neighbours);
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K304[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K  sprintf(file_name_exact, "hydro_checks_exact_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K322[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->delta_neighbours);
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K420[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K458[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Khydro.c[m[K[36m[K:[m[K[32m[K459[m[K[36m[K:[m[K    message("Writing brut[01;31m[Ke-[m[Kforce density files took %.3f %s. ",
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K#define SPH_IMPLEMENTATION "Pressur[01;31m[Ke-[m[KEntropy SPH (Hopkins 2013)"
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K51[m[K[36m[K:[m[K#define SPH_IMPLEMENTATION "Pressur[01;31m[Ke-[m[KEnergy SPH (Hopkins 2013)"
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  "Pressur[01;31m[Ke-[m[KEnergy SPH (Hopkins 2013) with a Morris and Monaghan (1997) " \
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K#define SPH_IMPLEMENTATION "Gasolin[01;31m[Ke-[m[K2 (Wadsley+ 2017)"
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K  "ANARCHY (Pressur[01;31m[Ke-[m[KEnergy) SPH (Dalla Vecchia+ in prep)"
[35m[Khydro.h[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K    "Can only use the hydro brut[01;31m[Ke-[m[Kforce density checks with the SPHENIX or PLANETARY hydro schemes."
[35m[Khydro_properties.c[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K#define hydro_props_default_h_tolerance 1[01;31m[Ke-[m[K4
[35m[Khydro_properties.c[m[K[36m[K:[m[K[32m[K250[m[K[36m[K:[m[K  message("Maximal tim[01;31m[Ke-[m[Kbin difference between neighbours: %d",
[35m[Khydro_properties.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K  io_write_attribute_f(h_grpsph, "Volume max change tim[01;31m[Ke-[m[Kstep",
[35m[Khydro_properties.c[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K                       "Maximal tim[01;31m[Ke-[m[Kbin difference between neighbours",
[35m[Khydro_properties.c[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K * @brief Update the global properties of the hydro scheme for that tim[01;31m[Ke-[m[Kstep.
[35m[Khydro_properties.h[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K  /*! Maximal change of h over one tim[01;31m[Ke-[m[Kstep */
[35m[Kintrinsics.h[m[K[36m[K:[m[K[32m[K73[m[K[36m[K:[m[K * This is a wrapper for the GNU intrinsic with a plac[01;31m[Ke-[m[Kholder for a future
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_compression.c[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K      error("Error while setting scal[01;31m[Ke-[m[Koffset filter for field '%s'.",
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K  /* Scal[01;31m[Ke-[m[Kfactor exponent to apply for unit conversion to physical */
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K317[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K363[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K409[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K455[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K510[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K553[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K596[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K639[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K691[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K734[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K777[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K820[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K872[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K915[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K1001[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K1053[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K1096[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K1139[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kio_properties.h[m[K[36m[K:[m[K[32m[K1182[m[K[36m[K:[m[K * @param a_exponent Exponent of the scal[01;31m[Ke-[m[Kfactor to convert to physical units.
[35m[Kkernel_hydro.h[m[K[36m[K:[m[K[32m[K561[m[K[36m[K:[m[K    "Vectorisation not supported for this kernel!!! Choose a different one or configure with --disabl[01;31m[Ke-[m[Khand-vec."
[35m[Kkernel_hydro.h[m[K[36m[K:[m[K[32m[K749[m[K[36m[K:[m[K    "Vectorisation not supported for this kernel!!! Choose a different one or configure with --disabl[01;31m[Ke-[m[Khand-vec."
[35m[Kkernel_hydro.h[m[K[36m[K:[m[K[32m[K809[m[K[36m[K:[m[K    "Vectorisation not supported for this kernel!!! Choose a different one or configure with --disabl[01;31m[Ke-[m[Khand-vec."
[35m[Kkernel_hydro.h[m[K[36m[K:[m[K[32m[K871[m[K[36m[K:[m[K    "Vectorisation not supported for this kernel!!! Choose a different one or configure with --disabl[01;31m[Ke-[m[Khand-vec."
[35m[Kkernel_hydro.h[m[K[36m[K:[m[K[32m[K956[m[K[36m[K:[m[K    "Vectorisation not supported for this kernel!!! Choose a different one or configure with --disabl[01;31m[Ke-[m[Khand-vec."
[35m[Kkernel_long_gravity.h[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K   * This has a *relative* error of less than 3.4[01;31m[Ke-[m[K3 over
[35m[Kkernel_long_gravity.h[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K * for the potential tem of 3.4[01;31m[Ke-[m[K3 and 2.4[01;31m[Ke-[m[K4 for the force term over the
[35m[Kkernel_long_gravity.h[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K * The accuracy is much better in the range [0, 2] (6[01;31m[Ke-[m[K5 and 2[01;31m[Ke-[m[K5 respectively).
[35m[Kkernel_long_gravity.h[m[K[36m[K:[m[K[32m[K218[m[K[36m[K:[m[K   * This has a *relative* error of less than 3.4[01;31m[Ke-[m[K3 over
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[K * @brief Compute the tim[01;31m[Ke-[m[Kstep length for a gravity kick.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[K * @param ti_beg Start of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K38[m[K[36m[K:[m[K * @param ti_end End of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K39[m[K[36m[K:[m[K * @param time_base Minimal tim[01;31m[Ke-[m[Kstep size on the tim[01;31m[Ke-[m[Kline.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K * @return The tim[01;31m[Ke-[m[Kstep size for the gravity kick (internal units).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K58[m[K[36m[K:[m[K * @brief Compute the tim[01;31m[Ke-[m[Kstep length for a hydro kick.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K * @param ti_beg Start of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K * @param ti_end End of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K * @param time_base Minimal tim[01;31m[Ke-[m[Kstep size on the tim[01;31m[Ke-[m[Kline.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K * @return The tim[01;31m[Ke-[m[Kstep size for the hydro kick (internal units).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K * @brief Compute the tim[01;31m[Ke-[m[Kstep length for a thermal kick.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K * @param ti_beg Start of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K84[m[K[36m[K:[m[K * @param ti_end End of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K85[m[K[36m[K:[m[K * @param time_base Minimal tim[01;31m[Ke-[m[Kstep size on the tim[01;31m[Ke-[m[Kline.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K89[m[K[36m[K:[m[K * @return The tim[01;31m[Ke-[m[Kstep size for the thermal kick (internal units).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K * @brief Compute the tim[01;31m[Ke-[m[Kstep length for a gravity correction kick.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K * @param ti_beg Start of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K * @param ti_end End of the tim[01;31m[Ke-[m[Kstep (on the integer tim[01;31m[Ke-[m[Kline).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K * @param time_base Minimal tim[01;31m[Ke-[m[Kstep size on the tim[01;31m[Ke-[m[Kline.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K112[m[K[36m[K:[m[K * @return The tim[01;31m[Ke-[m[Kstep size for the gravity correction kick (internal units).
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K * @param dt_kick_mesh_grav The kick tim[01;31m[Ke-[m[Kstep for mesh gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K * @param dt_kick_hydro The kick tim[01;31m[Ke-[m[Kstep for hydro accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K198[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K * @param dt_kick_mesh_grav The kick tim[01;31m[Ke-[m[Kstep for mesh gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K * @param dt_kick_therm The kick tim[01;31m[Ke-[m[Kstep for changes in thermal state.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K201[m[K[36m[K:[m[K * @param dt_kick_corr The kick tim[01;31m[Ke-[m[Kstep for the gizmo-mfv gravity correction.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K * @param dt_kick_mesh_grav The kick tim[01;31m[Ke-[m[Kstep for mesh gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K339[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K343[m[K[36m[K:[m[K * @param dt_kick_mesh_grav The kick tim[01;31m[Ke-[m[Kstep for mesh gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K396[m[K[36m[K:[m[K * @param dt_kick_grav The kick tim[01;31m[Ke-[m[Kstep for gravity accelerations.
[35m[Kkick.h[m[K[36m[K:[m[K[32m[K400[m[K[36m[K:[m[K * @param dt_kick_mesh_grav The kick tim[01;31m[Ke-[m[Kstep for mesh gravity accelerations.
[35m[Klibgrav.la[m[K[36m[K:[m[K[32m[K20[m[K[36m[K:[m[Kdependency_libs=' -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/hdf5-1.10.7-f5qudos7xqhm2fhct7r7cqglhqkyxdxq/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/zlib-1.2.11-zuvldby6wxiw5ghyirjah4fb7nmh73tk/lib -lgsl -lgslcblas -lhdf5_hl -lsz -lz -ldl -lfftw3_threads -lfftw3 -lnuma -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/lib /home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/lib/libgrackle.la -lstdc++ -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/hdf5-1.10.7-vzvxtdt4lfweizfdvufbhwwudsiuucxx/lib -lhdf5 -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0 -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../.. -lgfortran -lquadmath -lpthread -lm'
[35m[Klibgrav_mpi.la[m[K[36m[K:[m[K[32m[K20[m[K[36m[K:[m[Kdependency_libs=' -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/hdf5-1.10.7-un74q6xbv6jv6ywd6y4mobrmldut2kop/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/zlib-1.2.11-3kmnsdv36qxm3slmcyrb326gkghsp6px/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/metis-5.1.0-27wkhg6bsor4hnrkgdekrd3rlcbqvg5f/lib -lmetis -lgsl -lgslcblas -lhdf5_hl -lsz -lz -ldl -lfftw3_threads -lfftw3 -lnuma -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/grackl[01;31m[Ke-[m[K3.2-f7s2vlmoytzsl7fqr4o7zewefo5mwtau/lib /home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/grackl[01;31m[Ke-[m[K3.2-f7s2vlmoytzsl7fqr4o7zewefo5mwtau/lib/libgrackle.la -lstdc++ -lhdf5 -L/usr/lib/gcc/x86_64-linux-gnu/9 -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/9/../../.. -lgfortran -lquadmath -lpthread -lm'
[35m[Klibswiftsim.la[m[K[36m[K:[m[K[32m[K20[m[K[36m[K:[m[Kdependency_libs=' -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/hdf5-1.10.7-f5qudos7xqhm2fhct7r7cqglhqkyxdxq/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/zlib-1.2.11-zuvldby6wxiw5ghyirjah4fb7nmh73tk/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0 -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../.. -lgsl -lgslcblas -lhdf5_hl -lsz -lz -ldl -lfftw3_threads -lfftw3 -lnuma /home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/lib/libgrackle.la -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/hdf5-1.10.7-vzvxtdt4lfweizfdvufbhwwudsiuucxx/lib -lstdc++ -lhdf5 -lgfortran -lquadmath -lpthread -lm'
[35m[Klibswiftsim_mpi.la[m[K[36m[K:[m[K[32m[K20[m[K[36m[K:[m[Kdependency_libs=' -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/hdf5-1.10.7-un74q6xbv6jv6ywd6y4mobrmldut2kop/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/zlib-1.2.11-3kmnsdv36qxm3slmcyrb326gkghsp6px/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/metis-5.1.0-27wkhg6bsor4hnrkgdekrd3rlcbqvg5f/lib -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/grackl[01;31m[Ke-[m[K3.2-f7s2vlmoytzsl7fqr4o7zewefo5mwtau/lib -L/usr/lib/gcc/x86_64-linux-gnu/9 -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/9/../../.. -lmetis -lgsl -lgslcblas -lhdf5_hl -lsz -lz -ldl -lfftw3_threads -lfftw3 -lnuma /home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/grackl[01;31m[Ke-[m[K3.2-f7s2vlmoytzsl7fqr4o7zewefo5mwtau/lib/libgrackle.la -lstdc++ -lhdf5 -lgfortran -lquadmath -lpthread -lm'
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K  int log2_chunk_size = [01;31m[Ke-[m[K>snapshot_compression > 0 ? 12 : 18;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K328[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_compression > 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K    h_err = H5Pset_deflate(h_prop, [01;31m[Ke-[m[K>snapshot_compression);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K  io_copy_temp_buffer(temp, e, props, N, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K  units_cgs_conversion_string(buffer, [01;31m[Ke-[m[K>snapshot_units, props.units,
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K      units_cgs_conversion_factor([01;31m[Ke-[m[K>snapshot_units, props.units);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K389[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K421[m[K[36m[K:[m[K  struct swift_params *params = [01;31m[Ke-[m[K>parameter_file;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K422[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K427[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K432[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K474[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, UNIT_CONV_TIME);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K476[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units, UNIT_CONV_LENGTH);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K477[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K478[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K479[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K480[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K485[m[K[36m[K:[m[K  io_write_attribute_d(h_grp, "Redshift", [01;31m[Ke-[m[K>cosmology->z);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K486[m[K[36m[K:[m[K  io_write_attribute_d(h_grp, "Scal[01;31m[Ke-[m[Kfactor", [01;31m[Ke-[m[K>cosmology->a);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K494[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K495[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K496[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K497[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K501[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K542[m[K[36m[K:[m[K  io_write_meta_data(h_file, e, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>snapshot_units);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K703[m[K[36m[K:[m[K  const struct los_props *LOS_params = [01;31m[Ke-[m[K>los_properties;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K704[m[K[36m[K:[m[K  const int verbose = [01;31m[Ke-[m[K>verbose;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K710[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K726[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K728[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>los_output_count);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K  const struct cell *cells = [01;31m[Ke-[m[K>s->cells_top;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K747[m[K[36m[K:[m[K  const int *local_cells_with_particles = [01;31m[Ke-[m[K>s->local_cells_with_particles_top;
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K767[m[K[36m[K:[m[K        threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, los_first_loop_mapper, c->hydro.parts,
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K784[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, los_first_loop_mapper, parts, nr_parts,
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K796[m[K[36m[K:[m[K    int *counts = (int *)malloc(sizeof(int) * [01;31m[Ke-[m[K>nr_nodes);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K797[m[K[36m[K:[m[K    int *offsets = (int *)malloc(sizeof(int) * [01;31m[Ke-[m[K>nr_nodes);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K804[m[K[36m[K:[m[K    for (int k = 0; k < [01;31m[Ke-[m[K>nr_nodes; k++) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K819[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) print_los_info(LOS_list, j);
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K823[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K843[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K880[m[K[36m[K:[m[K    for (int n = 0; n < [01;31m[Ke-[m[K>s->nr_local_cells_with_particles; ++n) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K955[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K975[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Kinstate part->gpart pointer on teh receiving side */
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K976[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K986[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K1029[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>nodeID == 0) {
[35m[Kline_of_sight.c[m[K[36m[K:[m[K[32m[K1038[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>los_output_count++;
[35m[Kline_of_sight.h[m[K[36m[K:[m[K[32m[K42[m[K[36m[K:[m[K * @brief Properties of a single lin[01;31m[Ke-[m[Kof-sight
[35m[Kline_of_sight.h[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K * @brief Properties of the lin[01;31m[Ke-[m[Kof-sight computation
[35m[Klog.h[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[K * This function has a maximum absolute error of 5[01;31m[Ke-[m[K3 over the domain
[35m[Klog.h[m[K[36m[K:[m[K[32m[K36[m[K[36m[K:[m[K * [exp(-32.), exp(32.)] and a maximum relative error of 5[01;31m[Ke-[m[K3 over the two
[35m[Klog.h[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K * @brief Compute the bas[01;31m[Ke-[m[K10 logarithm of a number.
[35m[Klog.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K * This function has a maximum absolute error of 5[01;31m[Ke-[m[K3 over the domain
[35m[Klog.h[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K * [exp(-32.), exp(32.)] and a maximum relative error of 5[01;31m[Ke-[m[K3 over the two
[35m[Klog.h[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K  /* Return the bas[01;31m[Ke-[m[K10 log */
[35m[KMakefile[m[K[36m[K:[m[K[32m[K836[m[K[36m[K:[m[K# Read a list of newlin[01;31m[Ke-[m[Kseparated strings from the standard input,
[35m[KMakefile[m[K[36m[K:[m[K[32m[K862[m[K[36m[K:[m[KAUTOMAKE = ${SHELL} /home/mivkov/EPFL/rt/swiftsim/missing automak[01;31m[Ke-[m[K1.16
[35m[KMakefile[m[K[36m[K:[m[K[32m[K920[m[K[36m[K:[m[KGRACKLE_INCS = -I/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/include
[35m[KMakefile[m[K[36m[K:[m[K[32m[K921[m[K[36m[K:[m[KGRACKLE_LIBS = -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-11.2.0/grackl[01;31m[Ke-[m[K3.2-pxljxjwfdstqoccrngaf74o3ssoc3x4d/lib -lgrackle -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0 -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/home/mivkov/local/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.3.0/gcc-11.2.0-sf5dve2qduhb7ukkr6prxiubaorcwseo/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../.. -lpthread -lgfortran -lm -lquadmath
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1817[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libgrav_la-runner_doiact_grav.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1818[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libgrav_mpi_la-runner_doiact_grav.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1819[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1820[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_convert_part.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1821[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1822[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_lock.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1823[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_pack.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1824[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_split.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1825[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cell_unskip.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1826[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-chemistry.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1827[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-clocks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1828[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-collectgroup.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1829[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-common_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1830[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-common_io_cells.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1831[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-common_io_copy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1832[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-common_io_fields.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1833[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1834[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-cosmology.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1835[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-csds.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1836[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-csds_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1837[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-debug.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1838[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-distributed_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1839[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1840[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_collect_end_of_step.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1841[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_config.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1842[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1843[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_fof.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1844[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1845[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_maketasks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1846[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_marktasks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1847[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_proxy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1848[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_redistribute.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1849[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_split_particles.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1850[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_strays.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1851[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-engine_unskip.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1852[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-equation_of_state.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1853[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-exchange_structs.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1854[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-fof.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1855[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-fof_catalogue_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1856[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-gravity.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1857[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-gravity_properties.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1858[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-hashmap.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1859[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-hdf5_object_to_blob.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1860[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1861[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-hydro_properties.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1862[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-hydro_space.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1863[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-ic_info.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1864[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-io_compression.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1865[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-kernel_hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1866[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-line_of_sight.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1867[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-map.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1868[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-memuse.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1869[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-memuse_rnodes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1870[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-mesh_gravity.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1871[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-mesh_gravity_mpi.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1872[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-mesh_gravity_patch.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1873[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-mesh_gravity_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1874[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-mpiuse.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1875[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-multipole.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1876[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-output_list.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1877[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-output_options.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1878[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-parallel_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1879[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-parser.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1880[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-part.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1881[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-part_type.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1882[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-particle_buffer.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1883[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-partition.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1884[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-physical_constants.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1885[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-potential.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1886[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-pressure_floor.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1887[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-profiler.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1888[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-proxy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1889[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-queue.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1890[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-restart.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1891[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-rt_parameters.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1892[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_black_holes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1893[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_black_holes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1894[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1895[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_hydro_vec.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1896[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_limiter.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1897[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_sinks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1898[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_sinks_merger.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1899[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_doiact_stars.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1900[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1901[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_ghost.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1902[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_main.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1903[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_neutrino.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1904[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_others.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1905[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_pack.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1906[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_recv.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1907[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1908[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-runner_time_integration.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1909[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-scheduler.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1910[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-serial_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1911[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-single_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1912[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1913[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_cell_index.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1914[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_extras.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1915[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_first_init.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1916[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_init.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1917[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_rebuild.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1918[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_recycle.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1919[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_regrid.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1920[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1921[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_split.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1922[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-space_unique_id.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1923[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-star_formation.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1924[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-stars.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1925[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-statistics.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1926[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-task.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1927[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-threadpool.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1928[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-timers.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1929[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-tools.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1930[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-units.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1931[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-velociraptor_dummy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1932[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-velociraptor_interface.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1933[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-version.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1934[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/libswiftsim_la-xmf.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1935[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1936[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_convert_part.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1937[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1938[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_lock.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1939[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_pack.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1940[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_split.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1941[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cell_unskip.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1942[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-chemistry.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1943[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-clocks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1944[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-collectgroup.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1945[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-common_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1946[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-common_io_cells.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1947[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-common_io_copy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1948[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-common_io_fields.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1949[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1950[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-cosmology.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1951[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-csds.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1952[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-csds_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1953[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-debug.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1954[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-distributed_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1955[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1956[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_collect_end_of_step.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1957[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_config.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1958[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1959[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_fof.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1960[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1961[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_maketasks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1962[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_marktasks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1963[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_proxy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1964[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_redistribute.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1965[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_split_particles.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1966[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_strays.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1967[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-engine_unskip.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1968[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-equation_of_state.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1969[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-exchange_structs.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-fof.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1971[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-fof_catalogue_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1972[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-gravity.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1973[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-gravity_properties.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1974[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-hashmap.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1975[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-hdf5_object_to_blob.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1976[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1977[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-hydro_properties.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1978[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-hydro_space.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1979[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-ic_info.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1980[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-io_compression.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1981[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-kernel_hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1982[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-line_of_sight.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1983[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-map.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1984[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-memuse.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1985[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-memuse_rnodes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1986[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-mesh_gravity.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1987[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-mesh_gravity_mpi.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1988[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-mesh_gravity_patch.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1989[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-mesh_gravity_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1990[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-mpiuse.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1991[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-multipole.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1992[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-output_list.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1993[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-output_options.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1994[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-parallel_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1995[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-parser.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1996[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-part.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1997[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-part_type.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1998[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-particle_buffer.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K1999[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-partition.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2000[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-physical_constants.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2001[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-potential.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2002[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-pressure_floor.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2003[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-profiler.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2004[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-proxy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2005[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-queue.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2006[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-restart.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2007[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-rt_parameters.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2008[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_black_holes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2009[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_black_holes.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2010[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_hydro.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2011[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_hydro_vec.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2012[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_limiter.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2013[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_sinks.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2014[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_sinks_merger.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2015[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_doiact_stars.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2016[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_drift.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2017[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_ghost.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2018[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_main.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2019[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_neutrino.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2020[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_others.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2021[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_pack.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2022[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_recv.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2023[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2024[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-runner_time_integration.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2025[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-scheduler.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2026[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-serial_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2027[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-single_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2028[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2029[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_cell_index.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2030[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_extras.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2031[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_first_init.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2032[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_init.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2033[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_rebuild.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2034[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_recycle.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2035[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_regrid.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2036[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_sort.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2037[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_split.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2038[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-space_unique_id.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2039[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-star_formation.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2040[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-stars.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2041[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-statistics.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2042[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-task.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2043[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-threadpool.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2044[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-timers.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2045[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-tools.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2046[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-units.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2047[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-velociraptor_dummy.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2048[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-velociraptor_interface.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2049[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-version.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2050[m[K[36m[K:[m[Kinclude ./$(DEPDIR)/mpi-xmf.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2051[m[K[36m[K:[m[Kinclude cooling/COLIBRE/$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2052[m[K[36m[K:[m[Kinclude cooling/COLIBRE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2053[m[K[36m[K:[m[Kinclude cooling/COLIBRE/$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2054[m[K[36m[K:[m[Kinclude cooling/COLIBRE/$(DEPDIR)/mpi-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2055[m[K[36m[K:[m[Kinclude cooling/EAGLE/$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2056[m[K[36m[K:[m[Kinclude cooling/EAGLE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2057[m[K[36m[K:[m[Kinclude cooling/EAGLE/$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2058[m[K[36m[K:[m[Kinclude cooling/EAGLE/$(DEPDIR)/mpi-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2059[m[K[36m[K:[m[Kinclude cooling/QLA/$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2060[m[K[36m[K:[m[Kinclude cooling/QLA/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2061[m[K[36m[K:[m[Kinclude cooling/QLA/$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2062[m[K[36m[K:[m[Kinclude cooling/QLA/$(DEPDIR)/mpi-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2063[m[K[36m[K:[m[Kinclude cooling/QLA_EAGLE/$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2064[m[K[36m[K:[m[Kinclude cooling/QLA_EAGLE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2065[m[K[36m[K:[m[Kinclude cooling/QLA_EAGLE/$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2066[m[K[36m[K:[m[Kinclude cooling/QLA_EAGLE/$(DEPDIR)/mpi-cooling_tables.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2067[m[K[36m[K:[m[Kinclude cooling/grackle/$(DEPDIR)/libswiftsim_la-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2068[m[K[36m[K:[m[Kinclude cooling/grackle/$(DEPDIR)/mpi-cooling.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2069[m[K[36m[K:[m[Kinclude extra_io/EAGLE/$(DEPDIR)/libswiftsim_la-extra_lightcone_map_types.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2070[m[K[36m[K:[m[Kinclude extra_io/EAGLE/$(DEPDIR)/mpi-extra_lightcone_map_types.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2071[m[K[36m[K:[m[Kinclude feedback/EAGLE_kinetic/$(DEPDIR)/libswiftsim_la-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2072[m[K[36m[K:[m[Kinclude feedback/EAGLE_kinetic/$(DEPDIR)/mpi-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2073[m[K[36m[K:[m[Kinclude feedback/EAGLE_thermal/$(DEPDIR)/libswiftsim_la-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2074[m[K[36m[K:[m[Kinclude feedback/EAGLE_thermal/$(DEPDIR)/mpi-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2075[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/libswiftsim_la-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2076[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/libswiftsim_la-initial_mass_function.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2077[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/libswiftsim_la-stellar_evolution.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2078[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/libswiftsim_la-supernovae_ia.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2079[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/libswiftsim_la-supernovae_ii.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2080[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/mpi-feedback.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2081[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/mpi-initial_mass_function.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2082[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/mpi-stellar_evolution.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2083[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/mpi-supernovae_ia.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2084[m[K[36m[K:[m[Kinclude feedback/GEAR/$(DEPDIR)/mpi-supernovae_ii.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2085[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-healpix_util.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2086[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2087[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_array.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2088[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_map.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2089[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_map_types.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2090[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_particle_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2091[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_replications.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2092[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-lightcone_shell.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2093[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/libswiftsim_la-projected_kernel.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2094[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-healpix_util.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2095[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2096[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_array.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2097[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_map.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2098[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_map_types.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2099[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_particle_io.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2100[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_replications.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2101[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-lightcone_shell.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2102[m[K[36m[K:[m[Kinclude lightcone/$(DEPDIR)/mpi-projected_kernel.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2103[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/libswiftsim_la-fermi_dirac.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2104[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/libswiftsim_la-neutrino.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2105[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/libswiftsim_la-neutrino_response.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2106[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/mpi-fermi_dirac.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2107[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/mpi-neutrino.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile[m[K[36m[K:[m[K[32m[K2108[m[K[36m[K:[m[Kinclude neutrino/Default/$(DEPDIR)/mpi-neutrino_response.Plo # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K836[m[K[36m[K:[m[K# Read a list of newlin[01;31m[Ke-[m[Kseparated strings from the standard input,
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1817[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgrav_la-runner_doiact_grav.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1818[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgrav_mpi_la-runner_doiact_grav.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1819[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1820[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_convert_part.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1821[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1822[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_lock.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1823[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_pack.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1824[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_split.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1825[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cell_unskip.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1826[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-chemistry.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1827[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-clocks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1828[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-collectgroup.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1829[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-common_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1830[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-common_io_cells.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1831[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-common_io_copy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1832[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-common_io_fields.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1833[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1834[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-cosmology.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1835[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-csds.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1836[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-csds_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1837[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-debug.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1838[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-distributed_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1839[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1840[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_collect_end_of_step.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1841[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_config.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1842[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1843[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_fof.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1844[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1845[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_maketasks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1846[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_marktasks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1847[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_proxy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1848[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_redistribute.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1849[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_split_particles.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1850[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_strays.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1851[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-engine_unskip.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1852[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-equation_of_state.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1853[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-exchange_structs.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1854[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-fof.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1855[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-fof_catalogue_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1856[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-gravity.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1857[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-gravity_properties.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1858[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-hashmap.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1859[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-hdf5_object_to_blob.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1860[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1861[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-hydro_properties.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1862[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-hydro_space.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1863[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-ic_info.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1864[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-io_compression.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1865[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-kernel_hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1866[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-line_of_sight.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1867[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-map.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1868[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-memuse.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1869[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-memuse_rnodes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1870[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-mesh_gravity.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1871[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-mesh_gravity_mpi.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1872[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-mesh_gravity_patch.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1873[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-mesh_gravity_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1874[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-mpiuse.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1875[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-multipole.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1876[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-output_list.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1877[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-output_options.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1878[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-parallel_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1879[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-parser.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1880[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-part.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1881[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-part_type.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1882[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-particle_buffer.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1883[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-partition.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1884[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-physical_constants.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1885[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-potential.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1886[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-pressure_floor.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1887[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-profiler.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1888[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-proxy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1889[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-queue.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1890[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-restart.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1891[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-rt_parameters.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1892[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_black_holes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1893[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_black_holes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1894[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1895[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_hydro_vec.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1896[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_limiter.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1897[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_sinks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1898[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_sinks_merger.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1899[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_doiact_stars.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1900[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1901[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_ghost.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1902[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_main.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1903[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_neutrino.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1904[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_others.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1905[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_pack.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1906[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_recv.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1907[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1908[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-runner_time_integration.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1909[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-scheduler.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1910[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-serial_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1911[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-single_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1912[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1913[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_cell_index.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1914[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_extras.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1915[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_first_init.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1916[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_init.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1917[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_rebuild.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1918[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_recycle.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1919[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_regrid.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1920[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1921[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_split.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1922[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-space_unique_id.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1923[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-star_formation.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1924[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-stars.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1925[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-statistics.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1926[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-task.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1927[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-threadpool.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1928[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-timers.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1929[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-tools.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1930[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-units.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1931[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-velociraptor_dummy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1932[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-velociraptor_interface.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1933[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-version.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1934[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libswiftsim_la-xmf.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1935[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1936[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_convert_part.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1937[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1938[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_lock.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1939[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_pack.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1940[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_split.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1941[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cell_unskip.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1942[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-chemistry.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1943[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-clocks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1944[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-collectgroup.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1945[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-common_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1946[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-common_io_cells.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1947[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-common_io_copy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1948[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-common_io_fields.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1949[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1950[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-cosmology.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1951[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-csds.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1952[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-csds_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1953[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-debug.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1954[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-distributed_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1955[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1956[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_collect_end_of_step.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1957[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_config.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1958[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1959[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_fof.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1960[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1961[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_maketasks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1962[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_marktasks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1963[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_proxy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1964[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_redistribute.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1965[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_split_particles.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1966[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_strays.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1967[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-engine_unskip.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1968[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-equation_of_state.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1969[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-exchange_structs.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-fof.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1971[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-fof_catalogue_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1972[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-gravity.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1973[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-gravity_properties.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1974[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-hashmap.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1975[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-hdf5_object_to_blob.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1976[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1977[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-hydro_properties.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1978[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-hydro_space.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1979[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-ic_info.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1980[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-io_compression.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1981[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-kernel_hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1982[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-line_of_sight.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1983[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-map.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1984[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-memuse.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1985[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-memuse_rnodes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1986[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-mesh_gravity.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1987[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-mesh_gravity_mpi.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1988[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-mesh_gravity_patch.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1989[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-mesh_gravity_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1990[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-mpiuse.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1991[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-multipole.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1992[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-output_list.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1993[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-output_options.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1994[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-parallel_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1995[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-parser.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1996[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-part.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1997[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-part_type.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1998[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-particle_buffer.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K1999[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-partition.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2000[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-physical_constants.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2001[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-potential.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2002[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-pressure_floor.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2003[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-profiler.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2004[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-proxy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2005[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-queue.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2006[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-restart.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2007[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-rt_parameters.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2008[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_black_holes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2009[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_black_holes.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2010[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_hydro.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2011[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_hydro_vec.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2012[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_limiter.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2013[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_sinks.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2014[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_sinks_merger.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2015[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_doiact_stars.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2016[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_drift.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2017[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_ghost.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2018[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_main.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2019[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_neutrino.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2020[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_others.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2021[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_pack.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2022[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_recv.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2023[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2024[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-runner_time_integration.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2025[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-scheduler.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2026[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-serial_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2027[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-single_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2028[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2029[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_cell_index.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2030[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_extras.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2031[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_first_init.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2032[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_init.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2033[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_rebuild.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2034[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_recycle.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2035[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_regrid.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2036[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_sort.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2037[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_split.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2038[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-space_unique_id.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2039[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-star_formation.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2040[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-stars.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2041[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-statistics.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2042[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-task.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2043[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-threadpool.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2044[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-timers.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2045[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-tools.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2046[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-units.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2047[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-velociraptor_dummy.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2048[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-velociraptor_interface.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2049[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-version.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2050[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mpi-xmf.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2051[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/COLIBRE/$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2052[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/COLIBRE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2053[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/COLIBRE/$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2054[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/COLIBRE/$(DEPDIR)/mpi-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2055[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/EAGLE/$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2056[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/EAGLE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2057[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/EAGLE/$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2058[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/EAGLE/$(DEPDIR)/mpi-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2059[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA/$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2060[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2061[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA/$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2062[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA/$(DEPDIR)/mpi-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2063[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA_EAGLE/$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2064[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA_EAGLE/$(DEPDIR)/libswiftsim_la-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2065[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA_EAGLE/$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2066[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/QLA_EAGLE/$(DEPDIR)/mpi-cooling_tables.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2067[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/grackle/$(DEPDIR)/libswiftsim_la-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2068[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@cooling/grackle/$(DEPDIR)/mpi-cooling.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2069[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@extra_io/EAGLE/$(DEPDIR)/libswiftsim_la-extra_lightcone_map_types.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2070[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@extra_io/EAGLE/$(DEPDIR)/mpi-extra_lightcone_map_types.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2071[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/EAGLE_kinetic/$(DEPDIR)/libswiftsim_la-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2072[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/EAGLE_kinetic/$(DEPDIR)/mpi-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2073[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/EAGLE_thermal/$(DEPDIR)/libswiftsim_la-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2074[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/EAGLE_thermal/$(DEPDIR)/mpi-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2075[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/libswiftsim_la-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2076[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/libswiftsim_la-initial_mass_function.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2077[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/libswiftsim_la-stellar_evolution.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2078[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/libswiftsim_la-supernovae_ia.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2079[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/libswiftsim_la-supernovae_ii.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2080[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/mpi-feedback.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2081[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/mpi-initial_mass_function.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2082[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/mpi-stellar_evolution.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2083[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/mpi-supernovae_ia.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2084[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@feedback/GEAR/$(DEPDIR)/mpi-supernovae_ii.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2085[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-healpix_util.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2086[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2087[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_array.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2088[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_map.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2089[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_map_types.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2090[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_particle_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2091[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_replications.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2092[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-lightcone_shell.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2093[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/libswiftsim_la-projected_kernel.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2094[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-healpix_util.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2095[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2096[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_array.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2097[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_map.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2098[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_map_types.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2099[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_particle_io.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2100[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_replications.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2101[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-lightcone_shell.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2102[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@lightcone/$(DEPDIR)/mpi-projected_kernel.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2103[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/libswiftsim_la-fermi_dirac.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2104[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/libswiftsim_la-neutrino.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2105[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/libswiftsim_la-neutrino_response.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2106[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/mpi-fermi_dirac.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2107[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/mpi-neutrino.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[KMakefile.in[m[K[36m[K:[m[K[32m[K2108[m[K[36m[K:[m[K@AMDEP_TRUE@@am__include@ @am__quote@neutrino/Default/$(DEPDIR)/mpi-neutrino_response.Plo@am__quote@ # am--includ[01;31m[Ke-[m[Kmarker
[35m[Kmemswap.h[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K * Furthermore, register r[01;31m[Ke-[m[Klabeling only seems to work when the code is
[35m[Kmemswap.h[m[K[36m[K:[m[K[32m[K99[m[K[36m[K:[m[K * Furthermore, register r[01;31m[Ke-[m[Klabeling only seems to work when the code is
[35m[Kmemuse.c[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K        error("Failed to r[01;31m[Ke-[m[Kallocate memuse log.");
[35m[Kmemuse.c[m[K[36m[K:[m[K[32m[K452[m[K[36m[K:[m[K  sprintf(filename, "memus[01;31m[Ke-[m[Kerror-report-rank%d.txt", rank);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K112[m[K[36m[K:[m[K  void *mem = realloc(nod[01;31m[Ke-[m[K>children,
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K                      (nod[01;31m[Ke-[m[K>count + 1) * sizeof(struct memuse_rnode *));
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K  nod[01;31m[Ke-[m[K>children = (struct memuse_rnode **)mem;
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K118[m[K[36m[K:[m[K  memuse_rnode_binsert_child(child, nod[01;31m[Ke-[m[K>children, &nod[01;31m[Ke-[m[K>count);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K  if (nod[01;31m[Ke-[m[K>count > 0) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K        memuse_rnode_bsearch(keypart, nod[01;31m[Ke-[m[K>children, nod[01;31m[Ke-[m[K>count);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K    if (index < nod[01;31m[Ke-[m[K>count && keypart == nod[01;31m[Ke-[m[K>children[index]->keypart) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K      return nod[01;31m[Ke-[m[K>children[index];
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K  if (nod[01;31m[Ke-[m[K>count > 0) child = memuse_rnode_lookup(node, keypart);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K215[m[K[36m[K:[m[K  for (size_t k = 0; k < nod[01;31m[Ke-[m[K>count; k++) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K216[m[K[36m[K:[m[K    memuse_rnode_cleanup(nod[01;31m[Ke-[m[K>children[k]);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K217[m[K[36m[K:[m[K    free(nod[01;31m[Ke-[m[K>children[k]);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K  if (nod[01;31m[Ke-[m[K>count > 0) free(nod[01;31m[Ke-[m[K>children);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K  if (depth != 0) keyparts.key[depth - 1] = nod[01;31m[Ke-[m[K>keypart;
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K246[m[K[36m[K:[m[K  // if (nod[01;31m[Ke-[m[K>ptr != NULL || full) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K  //      for (size_t k = 0; k < nod[01;31m[Ke-[m[K>count; k++) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K253[m[K[36m[K:[m[K  //        fullkey[k] = nod[01;31m[Ke-[m[K>children[k]->keypart;
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K255[m[K[36m[K:[m[K  //      fullkey[nod[01;31m[Ke-[m[K>count] = '\0';
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  //             depth, nod[01;31m[Ke-[m[K>keypart, keyparts.ptr, nod[01;31m[Ke-[m[K>ptr, fullkey);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  //             nod[01;31m[Ke-[m[K>keypart, keyparts.ptr, nod[01;31m[Ke-[m[K>ptr);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  if ((nod[01;31m[Ke-[m[K>value != -1) || full) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K266[m[K[36m[K:[m[K           nod[01;31m[Ke-[m[K>keypart, keyparts.ptr, nod[01;31m[Ke-[m[K>value);
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K270[m[K[36m[K:[m[K  for (size_t k = 0; k < nod[01;31m[Ke-[m[K>count; k++) {
[35m[Kmemuse_rnodes.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K    memuse_rnode_dump(depth + 1, nod[01;31m[Ke-[m[K>children[k], full);
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K * @param N The sid[01;31m[Ke-[m[Klength of the mesh
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K753[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>neutrino_properties->use_linear_response) {
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K874[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>neutrino_properties->use_delta_f_mesh_only)
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K942[m[K[36m[K:[m[K  /* Now d[01;31m[Ke-[m[Kconvolve the CIC kernel and apply the Green function */
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K953[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>neutrino_properties->use_linear_response) {
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K991[m[K[36m[K:[m[K  data.const_G = s->[01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K1121[m[K[36m[K:[m[K * @param dim The (comoving) sid[01;31m[Ke-[m[Klengths of the simulation volume.
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K1156[m[K[36m[K:[m[K        "Use a mesh sid[01;31m[Ke-[m[Klength <= 1290 or a distributed mesh.");
[35m[Kmesh_gravity.c[m[K[36m[K:[m[K[32m[K1179[m[K[36m[K:[m[K * @param dim The (comoving) sid[01;31m[Ke-[m[Klengths of the simulation volume.
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  /*! Sid[01;31m[Ke-[m[Klength of the mesh */
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K53[m[K[36m[K:[m[K  /*! Integer tim[01;31m[Ke-[m[Kstep end of the mesh force for the last step */
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  /*! Integer tim[01;31m[Ke-[m[Kstep beginning of the mesh force for the last step */
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K  /*! Integer tim[01;31m[Ke-[m[Kstep end of the mesh force for the next step*/
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K  /*! Integer tim[01;31m[Ke-[m[Kstep beginning of the mesh force for the next step */
[35m[Kmesh_gravity.h[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K  /*! (Comoving) sid[01;31m[Ke-[m[Klength of the box along the three axis */
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K174[m[K[36m[K:[m[K * The patches are stored in the order of the spac[01;31m[Ke-[m[K>local_cells_top list.
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>neutrino_properties->use_delta_f_mesh_only)
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K390[m[K[36m[K:[m[K  /* Brut[01;31m[Ke-[m[Kforce list without using the offsets */
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K  /* Verify the "smart" list is as good as the brut[01;31m[Ke-[m[Kforce one */
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K853[m[K[36m[K:[m[K  /* Brut[01;31m[Ke-[m[Kforce list without using the offsets */
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K866[m[K[36m[K:[m[K  /* Verify the "smart" list is as good as the brut[01;31m[Ke-[m[Kforce one */
[35m[Kmesh_gravity_mpi.c[m[K[36m[K:[m[K[32m[K1208[m[K[36m[K:[m[K  data.const_G = s->[01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Kmpiuse.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate MPI use log.");
[35m[Kmpiuse.c[m[K[36m[K:[m[K[32m[K362[m[K[36m[K:[m[K  sprintf(filename, "mpius[01;31m[Ke-[m[Kerror-report-rank%d.txt", rank);
[35m[Kmultipole_accept.h[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K * @param use_rebuild_sizes Are we considering the sizes at the last tre[01;31m[Ke-[m[Kbuild
[35m[Kmultipole_accept.h[m[K[36m[K:[m[K[32m[K181[m[K[36m[K:[m[K * @param use_rebuild_sizes Are we considering the sizes at the last tre[01;31m[Ke-[m[Kbuild
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K * @param dt The drift tim[01;31m[Ke-[m[Kstep.
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K497[m[K[36m[K:[m[K  if (fabsf(ma->vel[0] + mb->vel[0]) > 1[01;31m[Ke-[m[K10 &&
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K504[m[K[36m[K:[m[K  if (fabsf(ma->vel[1] + mb->vel[1]) > 1[01;31m[Ke-[m[K10 &&
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K511[m[K[36m[K:[m[K  if (fabsf(ma->vel[2] + mb->vel[2]) > 1[01;31m[Ke-[m[K10 &&
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K898[m[K[36m[K:[m[K  power[2] += 5.000000000000000[01;31m[Ke-[m[K01 * m->M_011 * m->M_011;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K900[m[K[36m[K:[m[K  power[2] += 5.000000000000000[01;31m[Ke-[m[K01 * m->M_101 * m->M_101;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K901[m[K[36m[K:[m[K  power[2] += 5.000000000000000[01;31m[Ke-[m[K01 * m->M_110 * m->M_110;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_012 * m->M_012;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K910[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_021 * m->M_021;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K912[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_102 * m->M_102;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K913[m[K[36m[K:[m[K  power[3] += 1.666666666666667[01;31m[Ke-[m[K01 * m->M_111 * m->M_111;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K914[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_120 * m->M_120;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K915[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_201 * m->M_201;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K  power[3] += 3.333333333333333[01;31m[Ke-[m[K01 * m->M_210 * m->M_210;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K924[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_013 * m->M_013;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K925[m[K[36m[K:[m[K  power[4] += 1.666666666666667[01;31m[Ke-[m[K01 * m->M_022 * m->M_022;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K926[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_031 * m->M_031;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K928[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_103 * m->M_103;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K929[m[K[36m[K:[m[K  power[4] += 8.333333333333333[01;31m[Ke-[m[K02 * m->M_112 * m->M_112;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K930[m[K[36m[K:[m[K  power[4] += 8.333333333333333[01;31m[Ke-[m[K02 * m->M_121 * m->M_121;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K931[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_130 * m->M_130;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K932[m[K[36m[K:[m[K  power[4] += 1.666666666666667[01;31m[Ke-[m[K01 * m->M_202 * m->M_202;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K933[m[K[36m[K:[m[K  power[4] += 8.333333333333333[01;31m[Ke-[m[K02 * m->M_211 * m->M_211;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K934[m[K[36m[K:[m[K  power[4] += 1.666666666666667[01;31m[Ke-[m[K01 * m->M_220 * m->M_220;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K935[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_301 * m->M_301;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K936[m[K[36m[K:[m[K  power[4] += 2.500000000000000[01;31m[Ke-[m[K01 * m->M_310 * m->M_310;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K944[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_014 * m->M_014;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K945[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_023 * m->M_023;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K946[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_032 * m->M_032;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K947[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_041 * m->M_041;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K949[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_104 * m->M_104;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K950[m[K[36m[K:[m[K  power[5] += 5.000000000000000[01;31m[Ke-[m[K02 * m->M_113 * m->M_113;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K951[m[K[36m[K:[m[K  power[5] += 3.333333333333333[01;31m[Ke-[m[K02 * m->M_122 * m->M_122;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K952[m[K[36m[K:[m[K  power[5] += 5.000000000000000[01;31m[Ke-[m[K02 * m->M_131 * m->M_131;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K953[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_140 * m->M_140;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K954[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_203 * m->M_203;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K955[m[K[36m[K:[m[K  power[5] += 3.333333333333333[01;31m[Ke-[m[K02 * m->M_212 * m->M_212;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K956[m[K[36m[K:[m[K  power[5] += 3.333333333333333[01;31m[Ke-[m[K02 * m->M_221 * m->M_221;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K957[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_230 * m->M_230;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_302 * m->M_302;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K959[m[K[36m[K:[m[K  power[5] += 5.000000000000000[01;31m[Ke-[m[K02 * m->M_311 * m->M_311;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K  power[5] += 1.000000000000000[01;31m[Ke-[m[K01 * m->M_320 * m->M_320;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K961[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_401 * m->M_401;
[35m[Kmultipole.h[m[K[36m[K:[m[K[32m[K962[m[K[36m[K:[m[K  power[5] += 2.000000000000000[01;31m[Ke-[m[K01 * m->M_410 * m->M_410;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K228[m[K[36m[K:[m[K      error("Output list not having monotonically increasing scal[01;31m[Ke-[m[Kfactors.");
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K255[m[K[36m[K:[m[K  int is_cosmo = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>cosmology->a_end;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K    time_end = [01;31m[Ke-[m[K>time_end;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K      *ti_next = log(time / [01;31m[Ke-[m[K>cosmology->a_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K273[m[K[36m[K:[m[K      *ti_next = (time - [01;31m[Ke-[m[K>time_begin) / [01;31m[Ke-[m[K>time_base;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K276[m[K[36m[K:[m[K    if (*ti_next > [01;31m[Ke-[m[K>ti_current) break;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose) {
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K305[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose && t->final_step_dump != 1) {
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K316[m[K[36m[K:[m[K          exp(*ti_next * [01;31m[Ke-[m[K>time_base) * [01;31m[Ke-[m[K>cosmology->a_begin;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K317[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K320[m[K[36m[K:[m[K      const double next_time = *ti_next * [01;31m[Ke-[m[K>time_base + [01;31m[Ke-[m[K>time_begin;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K      if ([01;31m[Ke-[m[K>verbose)
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K327[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K360[m[K[36m[K:[m[K  struct swift_params *params = [01;31m[Ke-[m[K>parameter_file;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K386[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) message("Reading %s output file.", name);
[35m[Koutput_list.c[m[K[36m[K:[m[K[32m[K394[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>output_options->select_output->paramCount == 0)
[35m[Koutput_list.h[m[K[36m[K:[m[K[32m[K29[m[K[36m[K:[m[K/* Pr[01;31m[Ke-[m[Kdeclarations */
[35m[Koutput_list.h[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[K#define OUTPUT_LIST_EPS_TIME_END 1[01;31m[Ke-[m[K4
[35m[Koutput_options.c[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K * @param parameter_file the pr[01;31m[Ke-[m[Kparsed parameter file.
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K    if (redo && [01;31m[Ke-[m[K>verbose && mpi_rank == 0)
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K747[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K834[m[K[36m[K:[m[K   * from a snapshot by asserting that the current scal[01;31m[Ke-[m[Kfactor (from
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1156[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1157[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1158[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1159[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1160[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1162[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1163[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1167[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1173[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_output_count == 0) xmf_create_file(xmfFileName);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1184[m[K[36m[K:[m[K  xmf_write_outputheader(xmfFile, fileName, [01;31m[Ke-[m[K>time);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1197[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1198[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1199[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1200[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1207[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Redshift", DOUBLE, &[01;31m[Ke-[m[K>cosmology->z, 1);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1208[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Scal[01;31m[Ke-[m[Kfactor", DOUBLE, &[01;31m[Ke-[m[K>cosmology->a, 1);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1210[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1216[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1218[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1219[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1223[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1259[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1281[m[K[36m[K:[m[K  ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1366[m[K[36m[K:[m[K            (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1377[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>verbose);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1398[m[K[36m[K:[m[K  xmf_write_outputfooter(xmfFile, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>time);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1430[m[K[36m[K:[m[K  const struct part* parts = [01;31m[Ke-[m[K>s->parts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1431[m[K[36m[K:[m[K  const struct xpart* xparts = [01;31m[Ke-[m[K>s->xparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1432[m[K[36m[K:[m[K  const struct gpart* gparts = [01;31m[Ke-[m[K>s->gparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1433[m[K[36m[K:[m[K  const struct spart* sparts = [01;31m[Ke-[m[K>s->sparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1434[m[K[36m[K:[m[K  const struct bpart* bparts = [01;31m[Ke-[m[K>s->bparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1435[m[K[36m[K:[m[K  const struct sink* sinks = [01;31m[Ke-[m[K>s->sinks;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1436[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1437[m[K[36m[K:[m[K  struct output_list* output_list = [01;31m[Ke-[m[K>output_list_snapshots;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1438[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1439[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1440[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1441[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1442[m[K[36m[K:[m[K  const int with_DM_background = [01;31m[Ke-[m[K>s->with_DM_background;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1443[m[K[36m[K:[m[K  const int with_neutrinos = [01;31m[Ke-[m[K>s->with_neutrinos;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1445[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1446[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1450[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1453[m[K[36m[K:[m[K  const size_t Ntot = [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1454[m[K[36m[K:[m[K  const size_t Ngas = [01;31m[Ke-[m[K>s->nr_parts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1455[m[K[36m[K:[m[K  const size_t Nstars = [01;31m[Ke-[m[K>s->nr_sparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1456[m[K[36m[K:[m[K  const size_t Nsinks = [01;31m[Ke-[m[K>s->nr_sinks;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1457[m[K[36m[K:[m[K  const size_t Nblackholes = [01;31m[Ke-[m[K>s->nr_bparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1480[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>snapshot_subdir, [01;31m[Ke-[m[K>snapshot_base_name,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1484[m[K[36m[K:[m[K      fileName, xmfFileName, output_list, [01;31m[Ke-[m[K>snapshot_invoke_stf,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1485[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>stf_output_count, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>snapshot_subdir,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1486[m[K[36m[K:[m[K      snapshot_subdir_name, [01;31m[Ke-[m[K>snapshot_base_name, snapshot_base_name);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1500[m[K[36m[K:[m[K      output_options, current_selection_name, [01;31m[Ke-[m[K>snapshot_subsample,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1501[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>snapshot_subsample_fraction, subsample, subsample_fraction);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1522[m[K[36m[K:[m[K    Ngas_written = io_count_gas_to_write([01;31m[Ke-[m[K>s, /*subsample=*/1,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1524[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1527[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts - [01;31m[Ke-[m[K>s->nr_inhibited_parts - [01;31m[Ke-[m[K>s->nr_extra_parts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1532[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_stars],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1533[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1536[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sparts - [01;31m[Ke-[m[K>s->nr_inhibited_sparts - [01;31m[Ke-[m[K>s->nr_extra_sparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1541[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_black_hole],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1542[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1545[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts - [01;31m[Ke-[m[K>s->nr_inhibited_bparts - [01;31m[Ke-[m[K>s->nr_extra_bparts;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1550[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_sink],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1551[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1554[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sinks - [01;31m[Ke-[m[K>s->nr_inhibited_sinks - [01;31m[Ke-[m[K>s->nr_extra_sinks;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1558[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1559[m[K[36m[K:[m[K      subsample_fraction[swift_type_dark_matter], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1563[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter_background],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1565[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1572[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_neutrino],
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1573[m[K[36m[K:[m[K        subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1627[m[K[36m[K:[m[K  io_write_cell_offsets(h_grp_cells, [01;31m[Ke-[m[K>s->cdim, [01;31m[Ke-[m[K>s->dim, [01;31m[Ke-[m[K>s->cells_top,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1628[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->width, mpi_rank,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1630[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>snapshot_output_count, N_total, offset, numFields,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1639[m[K[36m[K:[m[K  /* Prepare some fil[01;31m[Ke-[m[Kaccess properties */
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1758[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ngas, Ngas_written);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1774[m[K[36m[K:[m[K          io_select_dm_fields(gparts, [01;31m[Ke-[m[K>s->gpart_group_data, with_fof,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1800[m[K[36m[K:[m[K              gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1803[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_written, with_stf);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1834[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1838[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_background, with_stf);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1868[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1870[m[K[36m[K:[m[K            subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1903[m[K[36m[K:[m[K              subsample_fraction[swift_type_sink], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1936[m[K[36m[K:[m[K              subsample_fraction[swift_type_stars], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Nblackholes, Nblackholes_written);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1987[m[K[36m[K:[m[K            (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K1997[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>verbose);
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K2063[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_output_count++;
[35m[Kparallel_io.c[m[K[36m[K:[m[K[32m[K2064[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_invoke_stf) [01;31m[Ke-[m[K>stf_output_count++;
[35m[Kparser.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K/* Macro defining functions that get primitive types as simple on[01;31m[Ke-[m[Kline YAML
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #gpart%s associated with the list of #part%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K40[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K53[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #gpart%s associated with the list of #spart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K * @param N The number of s-particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #gpart%s associated with the list of #sink%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K * @param N The number of sink-particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K85[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #gpart%s associated with the list of #bpart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K * @param N The number of s-particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K101[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #part%s associated with the list of #gpart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #spart%s associated with the list of #gpart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K120[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #bpart%s associated with the list of #gpart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink the #sink%s associated with the list of #gpart%s.
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Klink both the #part%s, #sink%s, #spart%s and #bpart%s associated
[35m[Kpart.c[m[K[36m[K:[m[K[32m[K216[m[K[36m[K:[m[K * @param N The number of particles to r[01;31m[Ke-[m[Klink;
[35m[Kpart.h[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[K/* Pr[01;31m[Ke-[m[Kdeclarations */
[35m[Kparticle_splitting.h[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K * @brief Specifies the particl[01;31m[Ke-[m[Ksplitting related fields
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, accumulate_sizes_mapper_gpart, s->gparts,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K483[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, accumulate_sizes_mapper_part, s->parts,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, accumulate_sizes_mapper_spart, s->sparts,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K892[m[K[36m[K:[m[K     * rank starts with 0, so we need to r[01;31m[Ke-[m[Koffset. */
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1590[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, partition_gather_weights, tasks, nr_tasks,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1593[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1767[m[K[36m[K:[m[K  accumulate_sizes(s, s->[01;31m[Ke-[m[K>verbose, weights);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1845[m[K[36m[K:[m[K * Note that at the end of this process all the cells will be r[01;31m[Ke-[m[Kdistributed
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1863[m[K[36m[K:[m[K  if (reparttyp[01;31m[Ke-[m[K>type == REPART_METIS_VERTEX_EDGE_COSTS) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1867[m[K[36m[K:[m[K  } else if (reparttyp[01;31m[Ke-[m[K>type == REPART_METIS_EDGE_COSTS) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1871[m[K[36m[K:[m[K  } else if (reparttyp[01;31m[Ke-[m[K>type == REPART_METIS_VERTEX_COSTS_TIMEBINS) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1875[m[K[36m[K:[m[K  } else if (reparttyp[01;31m[Ke-[m[K>type == REPART_METIS_VERTEX_COUNTS) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1878[m[K[36m[K:[m[K  } else if (reparttyp[01;31m[Ke-[m[K>type == REPART_NONE) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1885[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1958[m[K[36m[K:[m[K      accumulate_sizes(s, s->[01;31m[Ke-[m[K>verbose, weights_v);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K1971[m[K[36m[K:[m[K      accumulate_sizes(s, s->[01;31m[Ke-[m[K>verbose, weights_v);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2037[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2043[m[K[36m[K:[m[K * @brief Initialises the partition and r[01;31m[Ke-[m[Kpartition scheme from the parameter
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2135[m[K[36m[K:[m[K    message("Invalid choice of r[01;31m[Ke-[m[Kpartition type '%s'.", part_type);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2141[m[K[36m[K:[m[K    message("Invalid choice of r[01;31m[Ke-[m[Kpartition type '%s'.", part_type);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2511[m[K[36m[K:[m[K  return check_complete(s, 1, s->[01;31m[Ke-[m[K>nr_nodes);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2523[m[K[36m[K:[m[K  if (reparttyp[01;31m[Ke-[m[K>ncelllist != s->nr_cells) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2524[m[K[36m[K:[m[K    free(reparttyp[01;31m[Ke-[m[K>celllist);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2525[m[K[36m[K:[m[K    if ((reparttyp[01;31m[Ke-[m[K>celllist = (int *)malloc(sizeof(int) * s->nr_cells)) ==
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2528[m[K[36m[K:[m[K    reparttyp[01;31m[Ke-[m[K>ncelllist = s->nr_cells;
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2532[m[K[36m[K:[m[K    reparttyp[01;31m[Ke-[m[K>celllist[i] = s->cells_top[i].nodeID;
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2546[m[K[36m[K:[m[K  if (reparttyp[01;31m[Ke-[m[K>ncelllist > 0) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2547[m[K[36m[K:[m[K    if (reparttyp[01;31m[Ke-[m[K>ncelllist == s->nr_cells) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2549[m[K[36m[K:[m[K        s->cells_top[i].nodeID = reparttyp[01;31m[Ke-[m[K>celllist[i];
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2551[m[K[36m[K:[m[K      if (!check_complete(s, 1, s->[01;31m[Ke-[m[K>nr_nodes)) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2559[m[K[36m[K:[m[K          s->nr_cells, reparttyp[01;31m[Ke-[m[K>ncelllist);
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2575[m[K[36m[K:[m[K  if (reparttyp[01;31m[Ke-[m[K>ncelllist > 0)
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2576[m[K[36m[K:[m[K    restart_write_blocks(reparttyp[01;31m[Ke-[m[K>celllist,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2577[m[K[36m[K:[m[K                         sizeof(int) * reparttyp[01;31m[Ke-[m[K>ncelllist, 1, stream,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2593[m[K[36m[K:[m[K  if (reparttyp[01;31m[Ke-[m[K>ncelllist > 0) {
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2594[m[K[36m[K:[m[K    if ((reparttyp[01;31m[Ke-[m[K>celllist =
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2595[m[K[36m[K:[m[K             (int *)malloc(sizeof(int) * reparttyp[01;31m[Ke-[m[K>ncelllist)) == NULL)
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2597[m[K[36m[K:[m[K    restart_read_blocks(reparttyp[01;31m[Ke-[m[K>celllist,
[35m[Kpartition.c[m[K[36m[K:[m[K[32m[K2598[m[K[36m[K:[m[K                        sizeof(int) * reparttyp[01;31m[Ke-[m[K>ncelllist, 1, stream, NULL,
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[K * default value adopted by Gadget-2 (G = 6.672[01;31m[Ke-[m[K8).
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[Kconst double const_newton_G_cgs = 6.672[01;31m[Ke-[m[K8;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[Kconst double const_newton_G_cgs = 6.67430[01;31m[Ke-[m[K8;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[Kconst double const_planck_h_cgs = 6.62607015[01;31m[Ke-[m[K27;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[Kconst double const_planck_hbar_cgs = 1.054571817[01;31m[Ke-[m[K27;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[Kconst double const_boltzmann_k_cgs = 1.380649[01;31m[Ke-[m[K16;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K74[m[K[36m[K:[m[Kconst double const_thomson_cross_section_cgs = 6.6524587321[01;31m[Ke-[m[K25;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[Kconst double const_stefan_boltzmann_cgs = 5.670374419[01;31m[Ke-[m[K5;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[Kconst double const_electron_charge_cgs = 1.602176634[01;31m[Ke-[m[K19;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[Kconst double const_electron_volt_cgs = 1.602176634[01;31m[Ke-[m[K12;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[Kconst double const_electron_mass_cgs = 9.1093837015[01;31m[Ke-[m[K28;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K89[m[K[36m[K:[m[Kconst double const_proton_mass_cgs = 1.67262192369[01;31m[Ke-[m[K24;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K137[m[K[36m[K:[m[Kconst double const_reduced_hubble_cgs = 3.2407789[01;31m[Ke-[m[K18;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[Kconst double const_reduced_hubble_cgs = 3.2407792894458[01;31m[Ke-[m[K18;
[35m[Kphysical_constants_cgs.h[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[Kconst double const_caseb_recomb_cgs = 2.6[01;31m[Ke-[m[K13;
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K101[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>nr_nodes * [01;31m[Ke-[m[K>nr_threads);
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K          compiler_version(), [01;31m[Ke-[m[K>nr_threads, [01;31m[Ke-[m[K>nr_nodes, SPH_IMPLEMENTATION,
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K          kernel_name, [01;31m[Ke-[m[K>hydro_properties->target_neighbours,
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K116[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->delta_neighbours,
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K117[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>hydro_properties->eta_neighbours, "Step", "Time", "Tim[01;31m[Ke-[m[Kstep",
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K  fprintf(file, "  %6d %14e %14e %10lld %10lld %10lld %21.3f\n", [01;31m[Ke-[m[K>step,
[35m[Kprofiler.c[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>time_step, [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates, [01;31m[Ke-[m[K>s_updates,
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the pcell_in buffer. */
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K354[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, proxy_cells_count_mapper, s->cells_top,
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K367[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, proxy_cells_pack_mapper, s->cells_top,
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K390[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, proxy_cells_exchange_first_mapper, proxies,
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K648[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate parts_in buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K657[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate gparts_in buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K666[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate sparts_in buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K675[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate bparts_in buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K742[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate parts_out buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K776[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate gparts_out buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K806[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate sparts_out buffers.");
[35m[Kproxy.c[m[K[36m[K:[m[K[32m[K836[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate bparts_out buffers.");
[35m[Kqueue.c[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Kheap by bubbling up the new (last) element. */
[35m[Kqueue.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K    /* Should we d[01;31m[Ke-[m[Kprioritize this task? */
[35m[Kqueue.c[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K    /* Swap this task with the last task and r[01;31m[Ke-[m[Kheap. */
[35m[Kqueue.h[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[K/* Constants dealing with task d[01;31m[Ke-[m[Kpriorization. */
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K145[m[K[36m[K:[m[K * simulation time (on the integer tim[01;31m[Ke-[m[Kline). If more than one number per
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K * tim[01;31m[Ke-[m[Kstep per particle is needed, additional randomness can be obtained by
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K * @param ti_current The time (on the tim[01;31m[Ke-[m[Kline) for which to generate a number.
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K * IDs and simulation time (on the integer tim[01;31m[Ke-[m[Kline). If more than one number
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K * per tim[01;31m[Ke-[m[Kstep per particle is needed, additional randomness can be obtained
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K * @param ti_current The time (on the tim[01;31m[Ke-[m[Kline) for which to generate a number.
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K * ID, ray index and simulation time (on the integer tim[01;31m[Ke-[m[Kline). If more than
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K225[m[K[36m[K:[m[K * one number per tim[01;31m[Ke-[m[Kstep per particle is needed, additional randomness can be
[35m[Krandom.h[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K * @param ti_current The time (on the tim[01;31m[Ke-[m[Kline) for which to generate a number.
[35m[Krays.h[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K  if (ray_ext_tru[01;31m[Ke-[m[K>x[0] != ray_ext_mirr->x[0]) {
[35m[Krays.h[m[K[36m[K:[m[K[32m[K258[m[K[36m[K:[m[K    b = (ray_ext_tru[01;31m[Ke-[m[K>x[1] - ray_ext_mirr->x[1]) /
[35m[Krays.h[m[K[36m[K:[m[K[32m[K259[m[K[36m[K:[m[K        (ray_ext_tru[01;31m[Ke-[m[K>x[0] - ray_ext_mirr->x[0]);
[35m[Krays.h[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K    c = (ray_ext_tru[01;31m[Ke-[m[K>x[2] - ray_ext_mirr->x[2]) /
[35m[Krays.h[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K        (ray_ext_tru[01;31m[Ke-[m[K>x[0] - ray_ext_mirr->x[0]);
[35m[Krays.h[m[K[36m[K:[m[K[32m[K274[m[K[36m[K:[m[K  else if (ray_ext_tru[01;31m[Ke-[m[K>x[1] != ray_ext_mirr->x[1]) {
[35m[Krays.h[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K    c = (ray_ext_tru[01;31m[Ke-[m[K>x[2] - ray_ext_mirr->x[2]) /
[35m[Krays.h[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K        (ray_ext_tru[01;31m[Ke-[m[K>x[1] - ray_ext_mirr->x[1]);
[35m[Krays.h[m[K[36m[K:[m[K[32m[K375[m[K[36m[K:[m[K   * at this tim[01;31m[Ke-[m[Kstep the considered here gas particle has already
[35m[Krays.h[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K  double v_gas_star[3] = {ray_ext_tru[01;31m[Ke-[m[K>v[0] - v_star[0],
[35m[Krays.h[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K                          ray_ext_tru[01;31m[Ke-[m[K>v[1] - v_star[1],
[35m[Krays.h[m[K[36m[K:[m[K[32m[K394[m[K[36m[K:[m[K                          ray_ext_tru[01;31m[Ke-[m[K>v[2] - v_star[2]};
[35m[Krays.h[m[K[36m[K:[m[K[32m[K466[m[K[36m[K:[m[K   * at this tim[01;31m[Ke-[m[Kstep, the maximum number of rays per particle) */
[35m[Krestart.c[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restart_save) restart_save_previous(filename);
[35m[Krestart.c[m[K[36m[K:[m[K[32m[K137[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>restart_lustre_OST_count != 0) {
[35m[Krestart.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K            ([01;31m[Ke-[m[K>nodeID % [01;31m[Ke-[m[K>restart_lustre_OST_count), filename);
[35m[Krestart.c[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Krestart.c[m[K[36m[K:[m[K[32m[K213[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K42[m[K[36m[K:[m[K * the spac[01;31m[Ke-[m[Kwide list of black holes for the particle with the corresponding
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  const struct black_holes_props *props = [01;31m[Ke-[m[K>black_holes_properties;
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K70[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID && use_nibbling) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K  if (c->hydro.count == 0 || c->hydro.ti_old_part != [01;31m[Ke-[m[K>ti_current) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K120[m[K[36m[K:[m[K        if (p->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K            black_holes_swallow_part(bp, p, xp, [01;31m[Ke-[m[K>cosmology);
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K            if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K154[m[K[36m[K:[m[K              lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K156[m[K[36m[K:[m[K              /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K166[m[K[36m[K:[m[K              if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K            /* In any case, prevent the particle from being r[01;31m[Ke-[m[Kswallowed */
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K        if (c->nodeID == [01;31m[Ke-[m[K>nodeID && !found) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K              lock_lock(&[01;31m[Ke-[m[K>s->lock);
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K              /* R[01;31m[Ke-[m[Kcheck that the particle has not been removed
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K207[m[K[36m[K:[m[K              if (lock_unlock(&[01;31m[Ke-[m[K>s->lock) != 0)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K        if (c->nodeID == [01;31m[Ke-[m[K>nodeID && !found) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K238[m[K[36m[K:[m[K  if (c->nodeID != r->[01;31m[Ke-[m[K>nodeID) error("Running self task on foreign node");
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  if (ci->nodeID != [01;31m[Ke-[m[K>nodeID && cj->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K277[m[K[36m[K:[m[K * the spac[01;31m[Ke-[m[Kwide list of black holes for the particle with the corresponding
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K290[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K  const struct black_holes_props *props = [01;31m[Ke-[m[K>black_holes_properties;
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K309[m[K[36m[K:[m[K      c->black_holes.ti_old_part != [01;31m[Ke-[m[K>ti_current) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K338[m[K[36m[K:[m[K      if (use_nibbling && c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K353[m[K[36m[K:[m[K        if (cell_bp->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K387[m[K[36m[K:[m[K            black_holes_swallow_bpart(bp, cell_bp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time,
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K            if (c->nodeID == [01;31m[Ke-[m[K>nodeID) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K407[m[K[36m[K:[m[K            /* In any case, prevent the particle from being r[01;31m[Ke-[m[Kswallowed */
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K421[m[K[36m[K:[m[K        if (c->nodeID == [01;31m[Ke-[m[K>nodeID && !found) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K456[m[K[36m[K:[m[K        if (c->nodeID == [01;31m[Ke-[m[K>nodeID && !found) {
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K476[m[K[36m[K:[m[K  if (c->nodeID != r->[01;31m[Ke-[m[K>nodeID) error("Running self task on foreign node");
[35m[Krunner_black_holes.c[m[K[36m[K:[m[K[32m[K498[m[K[36m[K:[m[K  if (ci->nodeID != [01;31m[Ke-[m[K>nodeID && cj->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K98[m[K[36m[K:[m[K        if (bi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K100[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K                      [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K                      [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K163[m[K[36m[K:[m[K      if (bi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K165[m[K[36m[K:[m[K      if (bj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K        IACT_BH_BH(r2, dx, hi, hj, bi, bj, cosmo, [01;31m[Ke-[m[K>gravity_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K171[m[K[36m[K:[m[K                   [01;31m[Ke-[m[K>black_holes_properties, ti_current);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>gravity_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K176[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>black_holes_properties, ti_current);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K206[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K207[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K209[m[K[36m[K:[m[K  const int bi_is_local = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K225[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K226[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K227[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K        if (bi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K270[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K276[m[K[36m[K:[m[K                      [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K277[m[K[36m[K:[m[K                      [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K283[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K333[m[K[36m[K:[m[K      if (bi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K335[m[K[36m[K:[m[K      if (bj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K340[m[K[36m[K:[m[K        IACT_BH_BH(r2, dx, hi, hj, bi, bj, cosmo, [01;31m[Ke-[m[K>gravity_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K341[m[K[36m[K:[m[K                   [01;31m[Ke-[m[K>black_holes_properties, ti_current);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K345[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>gravity_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K346[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>black_holes_properties, ti_current);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K361[m[K[36m[K:[m[K  const int do_ci_bh = ci->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K362[m[K[36m[K:[m[K  const int do_cj_bh = cj->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K  const int do_ci_bh = cj->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K  const int do_cj_bh = ci->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K * Version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K  const int bi_is_local = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K454[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K460[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K461[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K466[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K467[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K494[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K495[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K496[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K540[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K547[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K548[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K554[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K555[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>entropy_floor, ti_current, [01;31m[Ke-[m[K>time);
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K606[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K608[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K742[m[K[36m[K:[m[K  const int do_ci_bh = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K743[m[K[36m[K:[m[K  const int do_cj_bh = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K  const int do_ci_bh = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K747[m[K[36m[K:[m[K  const int do_cj_bh = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K784[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K791[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K834[m[K[36m[K:[m[K    const int do_ci_bh = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K835[m[K[36m[K:[m[K    const int do_cj_bh = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K838[m[K[36m[K:[m[K    const int do_ci_bh = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_black_holes.h[m[K[36m[K:[m[K[32m[K839[m[K[36m[K:[m[K    const int do_cj_bh = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K58[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K82[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K126[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K172[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K206[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K207[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K209[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K250[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K313[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K323[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K324[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K325[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K441[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K449[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K451[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K452[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K453[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K509[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K511[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K570[m[K[36m[K:[m[K * Version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K586[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K588[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K589[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K590[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K636[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K638[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K683[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K685[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K686[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K687[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K740[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K742[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K802[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K804[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K854[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K855[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K856[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K905[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K907[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K908[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1019[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1021[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1022[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1023[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1133[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1135[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1227[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1229[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1280[m[K[36m[K:[m[K  const int sid = space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1307[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), ci->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1309[m[K[36m[K:[m[K            ci->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1325[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), cj->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1327[m[K[36m[K:[m[K            cj->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1363[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1365[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1366[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1367[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1541[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1544[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1616[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1619[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1741[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1743[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1817[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1819[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1893[m[K[36m[K:[m[K  const int sid = space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1918[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), ci->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1920[m[K[36m[K:[m[K            ci->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1936[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), cj->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1938[m[K[36m[K:[m[K            cj->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1972[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1973[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K1974[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2025[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2027[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2088[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2090[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2197[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2199[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2200[m[K[36m[K:[m[K  const integertime_t t_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2201[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2260[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2262[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2311[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2313[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2401[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2406[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2507[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2513[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_hydro.h[m[K[36m[K:[m[K[32m[K2604[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K42[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K * Inefficient version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K142[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K      if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K237[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K346[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K430[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K432[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K473[m[K[36m[K:[m[K  const int sid = space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K498[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), ci->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K500[m[K[36m[K:[m[K            ci->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K516[m[K[36m[K:[m[K            1.0[01;31m[Ke-[m[K4 * max(fabsf(d), cj->hydro.dx_max_sort_old) &&
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K518[m[K[36m[K:[m[K            cj->width[0] * 1.0[01;31m[Ke-[m[K10)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K594[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K596[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K647[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K649[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K721[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_limiter.h[m[K[36m[K:[m[K[32m[K726[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K      if (si->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K137[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K159[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K160[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K161[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K162[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K215[m[K[36m[K:[m[K      if (si->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K250[m[K[36m[K:[m[K  const int do_ci_sinks = (ci->nodeID == [01;31m[Ke-[m[K>nodeID) && (ci->sinks.count != 0) &&
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K  const int do_cj_sinks = (cj->nodeID == [01;31m[Ke-[m[K>nodeID) && (cj->sinks.count != 0) &&
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K255[m[K[36m[K:[m[K  const int do_ci_sinks = (ci->nodeID == [01;31m[Ke-[m[K>nodeID) && (ci->sinks.count != 0) &&
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  const int do_cj_sinks = (cj->nodeID == [01;31m[Ke-[m[K>nodeID) && (cj->sinks.count != 0) &&
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K368[m[K[36m[K:[m[K        if (spi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K370[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K488[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K490[m[K[36m[K:[m[K        if (spj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K507[m[K[36m[K:[m[K  const int do_ci_sinks = ci->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K508[m[K[36m[K:[m[K  const int do_cj_sinks = cj->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K560[m[K[36m[K:[m[K  const int sid = space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K569[m[K[36m[K:[m[K  const int do_ci_sinks = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K570[m[K[36m[K:[m[K  const int do_cj_sinks = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K612[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K619[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K656[m[K[36m[K:[m[K    const int do_ci_sinks = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks.h[m[K[36m[K:[m[K[32m[K657[m[K[36m[K:[m[K    const int do_cj_sinks = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K40[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K      if (sj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K97[m[K[36m[K:[m[K      if (si->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K143[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K149[m[K[36m[K:[m[K  const int ci_local = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K  const int cj_local = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K166[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K167[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K      if (sj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K      if (si->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K256[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_sinks_merger.h[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  if (ci->nodeID != [01;31m[Ke-[m[K>nodeID && cj->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K#define WITH_RT ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K57[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K138[m[K[36m[K:[m[K                                          [01;31m[Ke-[m[K>hydro_properties,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K139[m[K[36m[K:[m[K                                          [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K147[m[K[36m[K:[m[K                                             [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K177[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K178[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K201[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K250[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K259[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K                                          [01;31m[Ke-[m[K>hydro_properties,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K269[m[K[36m[K:[m[K                                          [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K277[m[K[36m[K:[m[K                                             [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K314[m[K[36m[K:[m[K  const int do_ci_stars = (ci->nodeID == [01;31m[Ke-[m[K>nodeID) && (ci->stars.count != 0) &&
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K316[m[K[36m[K:[m[K  const int do_cj_stars = (cj->nodeID == [01;31m[Ke-[m[K>nodeID) && (cj->stars.count != 0) &&
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K320[m[K[36m[K:[m[K  const int do_ci_stars = (cj->nodeID == [01;31m[Ke-[m[K>nodeID) && (ci->stars.count != 0) &&
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K322[m[K[36m[K:[m[K  const int do_cj_stars = (ci->nodeID == [01;31m[Ke-[m[K>nodeID) && (cj->stars.count != 0) &&
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K441[m[K[36m[K:[m[K        if (spi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K453[m[K[36m[K:[m[K                                              cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K463[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>hydro_properties,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K464[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K472[m[K[36m[K:[m[K                                               [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K594[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K596[m[K[36m[K:[m[K        if (spj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K607[m[K[36m[K:[m[K                                              cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K617[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>hydro_properties,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K618[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>feedback_props, ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K626[m[K[36m[K:[m[K                                               [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K645[m[K[36m[K:[m[K  const int do_ci_stars = ci->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K646[m[K[36m[K:[m[K  const int do_cj_stars = cj->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K649[m[K[36m[K:[m[K  const int do_ci_stars = cj->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K650[m[K[36m[K:[m[K  const int do_cj_stars = ci->nodeID == r->[01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K664[m[K[36m[K:[m[K * Version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K682[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K735[m[K[36m[K:[m[K        if (spi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K737[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K747[m[K[36m[K:[m[K                                              cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K748[m[K[36m[K:[m[K                                              [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K750[m[K[36m[K:[m[K                                               [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K798[m[K[36m[K:[m[K        if (spi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K800[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K810[m[K[36m[K:[m[K                                              cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K811[m[K[36m[K:[m[K                                              [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K813[m[K[36m[K:[m[K                                               [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K829[m[K[36m[K:[m[K * Version using a brut[01;31m[Ke-[m[Kforce algorithm.
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K849[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K899[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K908[m[K[36m[K:[m[K                                            cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K909[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K911[m[K[36m[K:[m[K                                             [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K940[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K986[m[K[36m[K:[m[K      if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K995[m[K[36m[K:[m[K                                            cosmo, [01;31m[Ke-[m[K>feedback_props,
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K                                            [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K998[m[K[36m[K:[m[K                                             [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1051[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1052[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1053[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1054[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1084[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1202[m[K[36m[K:[m[K              1.0[01;31m[Ke-[m[K4 * max(fabsf(d), cj->TYPE.dx_max_sort_old) &&           \
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1204[m[K[36m[K:[m[K              cj->width[0] * 1.0[01;31m[Ke-[m[K10)                                       \
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1235[m[K[36m[K:[m[K  const int sid = space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1241[m[K[36m[K:[m[K  const int do_ci_stars = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1242[m[K[36m[K:[m[K  const int do_cj_stars = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1245[m[K[36m[K:[m[K  const int do_ci_stars = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1246[m[K[36m[K:[m[K  const int do_cj_stars = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1313[m[K[36m[K:[m[K * redundant computations to find the sid on-th[01;31m[Ke-[m[Kfly.
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1320[m[K[36m[K:[m[K  struct space *s = r->[01;31m[Ke-[m[K>s;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1351[m[K[36m[K:[m[K    const int do_ci_stars = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1352[m[K[36m[K:[m[K    const int do_cj_stars = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1355[m[K[36m[K:[m[K    const int do_ci_stars = cj->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_functions_stars.h[m[K[36m[K:[m[K[32m[K1356[m[K[36m[K:[m[K    const int do_cj_stars = ci->nodeID == [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  if ((!cell_is_active_gravity(c, e) || c->nodeID != [01;31m[Ke-[m[K>nodeID) && c->split) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K73[m[K[36m[K:[m[K  if (c->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K75[m[K[36m[K:[m[K  if (c->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K        if (cp->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K        if (cp->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K97[m[K[36m[K:[m[K        if (c->grav.multipol[01;31m[Ke-[m[K>pot.interacted) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K102[m[K[36m[K:[m[K          gravity_L2L(&shifted_tensor, &c->grav.multipol[01;31m[Ke-[m[K>pot,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K                      cp->grav.multipol[01;31m[Ke-[m[K>CoM, c->grav.multipol[01;31m[Ke-[m[K>CoM);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K          gravity_field_tensors_add(&cp->grav.multipol[01;31m[Ke-[m[K>pot, &shifted_tensor);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K    if (!c->grav.multipol[01;31m[Ke-[m[K>pot.interacted) return;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K    const struct grav_tensor *pot = &c->grav.multipol[01;31m[Ke-[m[K>pot;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K    const double CoM[3] = {c->grav.multipol[01;31m[Ke-[m[K>CoM[0], c->grav.multipol[01;31m[Ke-[m[K>CoM[1],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K                           c->grav.multipol[01;31m[Ke-[m[K>CoM[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K        if (gp->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[K        if (c->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K213[m[K[36m[K:[m[K    if (gpi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K        if (gpj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>s->periodic)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K    if (gpi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K514[m[K[36m[K:[m[K        if (gpj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K565[m[K[36m[K:[m[K * The calculation is performed non-symmetrically using the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K593[m[K[36m[K:[m[K    if (!ci_cach[01;31m[Ke-[m[K>active[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K596[m[K[36m[K:[m[K    if (ci_cach[01;31m[Ke-[m[K>use_mpole[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K603[m[K[36m[K:[m[K    const float x_i = ci_cach[01;31m[Ke-[m[K>x[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K604[m[K[36m[K:[m[K    const float y_i = ci_cach[01;31m[Ke-[m[K>y[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K    const float z_i = ci_cach[01;31m[Ke-[m[K>z[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K606[m[K[36m[K:[m[K    const float h_i = ci_cach[01;31m[Ke-[m[K>epsilon[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K612[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K613[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K614[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K615[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K616[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>epsilon, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K623[m[K[36m[K:[m[K      const float x_j = cj_cach[01;31m[Ke-[m[K>x[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K624[m[K[36m[K:[m[K      const float y_j = cj_cach[01;31m[Ke-[m[K>y[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K625[m[K[36m[K:[m[K      const float z_j = cj_cach[01;31m[Ke-[m[K>z[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K626[m[K[36m[K:[m[K      const float mass_j = cj_cach[01;31m[Ke-[m[K>m[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K      const float h_j = cj_cach[01;31m[Ke-[m[K>epsilon[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K656[m[K[36m[K:[m[K          ci_cach[01;31m[Ke-[m[K>m[pid] != 0.f) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K664[m[K[36m[K:[m[K      if (gparts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K666[m[K[36m[K:[m[K      if (pjd < gcount_j && gparts_j[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K708[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_x[pid] += a_x;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K709[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_y[pid] += a_y;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K710[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_z[pid] += a_z;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K711[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>pot[pid] += pot;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K725[m[K[36m[K:[m[K * The calculation is performed non-symmetrically using the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K752[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>s->periodic)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K    if (!ci_cach[01;31m[Ke-[m[K>active[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K763[m[K[36m[K:[m[K    if (ci_cach[01;31m[Ke-[m[K>use_mpole[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K770[m[K[36m[K:[m[K    const float x_i = ci_cach[01;31m[Ke-[m[K>x[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K771[m[K[36m[K:[m[K    const float y_i = ci_cach[01;31m[Ke-[m[K>y[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K772[m[K[36m[K:[m[K    const float z_i = ci_cach[01;31m[Ke-[m[K>z[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K    const float h_i = ci_cach[01;31m[Ke-[m[K>epsilon[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K779[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K780[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K781[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K782[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K783[m[K[36m[K:[m[K    swift_align_information(float, cj_cach[01;31m[Ke-[m[K>epsilon, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K790[m[K[36m[K:[m[K      const float x_j = cj_cach[01;31m[Ke-[m[K>x[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K791[m[K[36m[K:[m[K      const float y_j = cj_cach[01;31m[Ke-[m[K>y[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K792[m[K[36m[K:[m[K      const float z_j = cj_cach[01;31m[Ke-[m[K>z[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K      const float mass_j = cj_cach[01;31m[Ke-[m[K>m[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K794[m[K[36m[K:[m[K      const float h_j = cj_cach[01;31m[Ke-[m[K>epsilon[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K818[m[K[36m[K:[m[K          ci_cach[01;31m[Ke-[m[K>m[pid] != 0.) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K829[m[K[36m[K:[m[K      if (gparts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K      if (pjd < gcount_j && gparts_j[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K874[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_x[pid] += a_x;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K875[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_y[pid] += a_y;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K876[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_z[pid] += a_z;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K877[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>pot[pid] += pot;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K891[m[K[36m[K:[m[K * The calculation is performedusing the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K917[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K918[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K919[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, epsilon, ci_cach[01;31m[Ke-[m[K>epsilon,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K921[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_x, ci_cach[01;31m[Ke-[m[K>a_x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K922[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_y, ci_cach[01;31m[Ke-[m[K>a_y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K923[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_z, ci_cach[01;31m[Ke-[m[K>a_z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K924[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, pot, ci_cach[01;31m[Ke-[m[K>pot, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K925[m[K[36m[K:[m[K  swift_declare_aligned_ptr(int, active, ci_cach[01;31m[Ke-[m[K>active,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K927[m[K[36m[K:[m[K  swift_declare_aligned_ptr(int, use_mpole, ci_cach[01;31m[Ke-[m[K>use_mpole,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K950[m[K[36m[K:[m[K        ci_cach[01;31m[Ke-[m[K>m[pid] != 0.) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K    if (gparts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K995[m[K[36m[K:[m[K    if (!gravity_M2P_accept([01;31m[Ke-[m[K>gravity_properties, &gparts_i[pid],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K                        cj->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1022[m[K[36m[K:[m[K                        cj->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1035[m[K[36m[K:[m[K * The calculation is performedusing the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1062[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>s->periodic)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1067[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, x, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1068[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, y, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1069[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, z, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1070[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, epsilon, ci_cach[01;31m[Ke-[m[K>epsilon,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1072[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_x, ci_cach[01;31m[Ke-[m[K>a_x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1073[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_y, ci_cach[01;31m[Ke-[m[K>a_y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1074[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, a_z, ci_cach[01;31m[Ke-[m[K>a_z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1075[m[K[36m[K:[m[K  swift_declare_aligned_ptr(float, pot, ci_cach[01;31m[Ke-[m[K>pot, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1076[m[K[36m[K:[m[K  swift_declare_aligned_ptr(int, active, ci_cach[01;31m[Ke-[m[K>active,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1078[m[K[36m[K:[m[K  swift_declare_aligned_ptr(int, use_mpole, ci_cach[01;31m[Ke-[m[K>use_mpole,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1101[m[K[36m[K:[m[K        ci_cach[01;31m[Ke-[m[K>m[pid] != 0.) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1109[m[K[36m[K:[m[K    if (gparts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1144[m[K[36m[K:[m[K    if (!gravity_M2P_accept([01;31m[Ke-[m[K>gravity_properties, &gparts_i[pid],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1164[m[K[36m[K:[m[K                        cj->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1171[m[K[36m[K:[m[K                        cj->grav.multipol[01;31m[Ke-[m[K>m_pole.num_gpart);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1204[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1205[m[K[36m[K:[m[K  const float dim[3] = {(float)[01;31m[Ke-[m[K>mesh->dim[0], (float)[01;31m[Ke-[m[K>mesh->dim[1],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1206[m[K[36m[K:[m[K                        (float)[01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1207[m[K[36m[K:[m[K  const float r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1208[m[K[36m[K:[m[K  const double min_trunc = [01;31m[Ke-[m[K>mesh->r_cut_min;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1214[m[K[36m[K:[m[K      cell_is_active_gravity(ci, e) && (ci->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1216[m[K[36m[K:[m[K      cell_is_active_gravity(cj, e) && (cj->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1229[m[K[36m[K:[m[K  if (cj_active && ci->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1231[m[K[36m[K:[m[K  if (ci_active && cj->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1244[m[K[36m[K:[m[K  const float rmax_i = ci->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1245[m[K[36m[K:[m[K  const float rmax_j = cj->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1246[m[K[36m[K:[m[K  const struct multipole *multi_i = &ci->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1247[m[K[36m[K:[m[K  const struct multipole *multi_j = &cj->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1248[m[K[36m[K:[m[K  const float CoM_i[3] = {(float)(ci->grav.multipol[01;31m[Ke-[m[K>CoM[0] - shift_i[0]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1249[m[K[36m[K:[m[K                          (float)(ci->grav.multipol[01;31m[Ke-[m[K>CoM[1] - shift_i[1]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1250[m[K[36m[K:[m[K                          (float)(ci->grav.multipol[01;31m[Ke-[m[K>CoM[2] - shift_i[2])};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1251[m[K[36m[K:[m[K  const float CoM_j[3] = {(float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[0] - shift_j[0]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1252[m[K[36m[K:[m[K                          (float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[1] - shift_j[1]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1253[m[K[36m[K:[m[K                          (float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[2] - shift_j[2])};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1265[m[K[36m[K:[m[K  if (gcount_i > ci_cach[01;31m[Ke-[m[K>count || gcount_j > cj_cach[01;31m[Ke-[m[K>count)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1274[m[K[36m[K:[m[K  gravity_cache_populate([01;31m[Ke-[m[K>max_active_bin, allow_multipole_j, periodic, dim,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1277[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>gravity_properties);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1278[m[K[36m[K:[m[K  gravity_cache_populate([01;31m[Ke-[m[K>max_active_bin, allow_multipole_i, periodic, dim,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1281[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>gravity_properties);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1367[m[K[36m[K:[m[K      /* Periodic but clos[01;31m[Ke-[m[Kby cells can use the full Newtonian potential */
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1442[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1443[m[K[36m[K:[m[K  const float dim[3] = {(float)[01;31m[Ke-[m[K>mesh->dim[0], (float)[01;31m[Ke-[m[K>mesh->dim[1],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1444[m[K[36m[K:[m[K                        (float)[01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1448[m[K[36m[K:[m[K      cell_is_active_gravity(ci, e) && (ci->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1470[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>gravity_properties, &r->ci_gravity_cache, ci, cj->grav.multipole);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1476[m[K[36m[K:[m[K          e, [01;31m[Ke-[m[K>gravity_properties, &r->ci_gravity_cache, ci,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1486[m[K[36m[K:[m[K * The calculation is performed non-symmetrically using the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1505[m[K[36m[K:[m[K    if (!ci_cach[01;31m[Ke-[m[K>active[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1507[m[K[36m[K:[m[K    const float x_i = ci_cach[01;31m[Ke-[m[K>x[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1508[m[K[36m[K:[m[K    const float y_i = ci_cach[01;31m[Ke-[m[K>y[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1509[m[K[36m[K:[m[K    const float z_i = ci_cach[01;31m[Ke-[m[K>z[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1510[m[K[36m[K:[m[K    const float h_i = ci_cach[01;31m[Ke-[m[K>epsilon[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1516[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1517[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1518[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1519[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1520[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>epsilon, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1530[m[K[36m[K:[m[K      const float x_j = ci_cach[01;31m[Ke-[m[K>x[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1531[m[K[36m[K:[m[K      const float y_j = ci_cach[01;31m[Ke-[m[K>y[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1532[m[K[36m[K:[m[K      const float z_j = ci_cach[01;31m[Ke-[m[K>z[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1533[m[K[36m[K:[m[K      const float mass_j = ci_cach[01;31m[Ke-[m[K>m[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1534[m[K[36m[K:[m[K      const float h_j = ci_cach[01;31m[Ke-[m[K>epsilon[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1553[m[K[36m[K:[m[K          ci_cach[01;31m[Ke-[m[K>m[pid] != 0.) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1565[m[K[36m[K:[m[K      if (gparts[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1567[m[K[36m[K:[m[K      if (pjd < gcount && gparts[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1608[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_x[pid] += a_x;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1609[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_y[pid] += a_y;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1610[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_z[pid] += a_z;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1611[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>pot[pid] += pot;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1625[m[K[36m[K:[m[K * The calculation is performed non-symmetrically using the pr[01;31m[Ke-[m[Kfilled
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1645[m[K[36m[K:[m[K  if (![01;31m[Ke-[m[K>s->periodic)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1653[m[K[36m[K:[m[K    if (!ci_cach[01;31m[Ke-[m[K>active[pid]) continue;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1655[m[K[36m[K:[m[K    const float x_i = ci_cach[01;31m[Ke-[m[K>x[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1656[m[K[36m[K:[m[K    const float y_i = ci_cach[01;31m[Ke-[m[K>y[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1657[m[K[36m[K:[m[K    const float z_i = ci_cach[01;31m[Ke-[m[K>z[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1658[m[K[36m[K:[m[K    const float h_i = ci_cach[01;31m[Ke-[m[K>epsilon[pid];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1664[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>x, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1665[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>y, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1666[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>z, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1667[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>m, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1668[m[K[36m[K:[m[K    swift_align_information(float, ci_cach[01;31m[Ke-[m[K>epsilon, SWIFT_CACHE_ALIGNMENT);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1678[m[K[36m[K:[m[K      const float x_j = ci_cach[01;31m[Ke-[m[K>x[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1679[m[K[36m[K:[m[K      const float y_j = ci_cach[01;31m[Ke-[m[K>y[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1680[m[K[36m[K:[m[K      const float z_j = ci_cach[01;31m[Ke-[m[K>z[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1681[m[K[36m[K:[m[K      const float mass_j = ci_cach[01;31m[Ke-[m[K>m[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1682[m[K[36m[K:[m[K      const float h_j = ci_cach[01;31m[Ke-[m[K>epsilon[pjd];
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1702[m[K[36m[K:[m[K          ci_cach[01;31m[Ke-[m[K>m[pid] != 0.) {
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1714[m[K[36m[K:[m[K      if (gparts[pid].ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1716[m[K[36m[K:[m[K      if (pjd < gcount && gparts[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1758[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_x[pid] += a_x;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1759[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_y[pid] += a_y;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1760[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>a_z[pid] += a_z;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1761[m[K[36m[K:[m[K    ci_cach[01;31m[Ke-[m[K>pot[pid] += pot;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1789[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1790[m[K[36m[K:[m[K  const float r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1791[m[K[36m[K:[m[K  const double min_trunc = [01;31m[Ke-[m[K>mesh->r_cut_min;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1822[m[K[36m[K:[m[K  if (gcount > ci_cach[01;31m[Ke-[m[K>count)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1827[m[K[36m[K:[m[K  gravity_cache_populate_no_mpole([01;31m[Ke-[m[K>max_active_bin, ci_cache, c->grav.parts,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1829[m[K[36m[K:[m[K                                  [01;31m[Ke-[m[K>gravity_properties);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1841[m[K[36m[K:[m[K    const double max_r = 2. * c->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1852[m[K[36m[K:[m[K      /* Periodic but clos[01;31m[Ke-[m[Kby cells can use the full Newtonian potential */
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1884[m[K[36m[K:[m[K  const struct gravity_props *props = [01;31m[Ke-[m[K>gravity_properties;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1885[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1886[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>mesh->dim[0], [01;31m[Ke-[m[K>mesh->dim[1], [01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1887[m[K[36m[K:[m[K  const float r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1897[m[K[36m[K:[m[K  const struct multipole *multi_i = &ci->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1898[m[K[36m[K:[m[K  const struct multipole *multi_j = &cj->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1909[m[K[36m[K:[m[K  if (ci->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1912[m[K[36m[K:[m[K  if (ci->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1915[m[K[36m[K:[m[K  if (ci->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1918[m[K[36m[K:[m[K        "cj->nodeID=%d [01;31m[Ke-[m[K>ti_current=%lld",
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1919[m[K[36m[K:[m[K        ci->grav.ti_old_multipole, ci->nodeID, cj->nodeID, [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1921[m[K[36m[K:[m[K  if (cj->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1924[m[K[36m[K:[m[K        "ci->nodeID=%d [01;31m[Ke-[m[K>ti_current=%lld",
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1925[m[K[36m[K:[m[K        cj->grav.ti_old_multipole, cj->nodeID, ci->nodeID, [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1941[m[K[36m[K:[m[K  gravity_M2L_symmetric(&ci->grav.multipol[01;31m[Ke-[m[K>pot, &cj->grav.multipol[01;31m[Ke-[m[K>pot,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1942[m[K[36m[K:[m[K                        multi_i, multi_j, ci->grav.multipol[01;31m[Ke-[m[K>CoM,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1943[m[K[36m[K:[m[K                        cj->grav.multipol[01;31m[Ke-[m[K>CoM, props, periodic, dim, r_s_inv);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1968[m[K[36m[K:[m[K  const struct gravity_props *props = [01;31m[Ke-[m[K>gravity_properties;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1969[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1970[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>mesh->dim[0], [01;31m[Ke-[m[K>mesh->dim[1], [01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1971[m[K[36m[K:[m[K  const float r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1979[m[K[36m[K:[m[K  const struct multipole *multi_j = &cj->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1987[m[K[36m[K:[m[K  if (ci->grav.multipol[01;31m[Ke-[m[K>pot.ti_init != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1990[m[K[36m[K:[m[K  if (cj->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1993[m[K[36m[K:[m[K        "ci->nodeID=%d [01;31m[Ke-[m[K>ti_current=%lld",
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K1994[m[K[36m[K:[m[K        cj->grav.ti_old_multipole, cj->nodeID, ci->nodeID, [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2010[m[K[36m[K:[m[K  gravity_M2L_nonsym(&ci->grav.multipol[01;31m[Ke-[m[K>pot, multi_j, ci->grav.multipol[01;31m[Ke-[m[K>CoM,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2011[m[K[36m[K:[m[K                     cj->grav.multipol[01;31m[Ke-[m[K>CoM, props, periodic, dim, r_s_inv);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2037[m[K[36m[K:[m[K      cell_is_active_gravity_mm(ci, e) && (ci->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2039[m[K[36m[K:[m[K      cell_is_active_gravity_mm(cj, e) && (cj->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2042[m[K[36m[K:[m[K  if (ci->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(ci, e);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2043[m[K[36m[K:[m[K  if (cj->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(cj, e);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2102[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2103[m[K[36m[K:[m[K  const float dim[3] = {(float)[01;31m[Ke-[m[K>mesh->dim[0], (float)[01;31m[Ke-[m[K>mesh->dim[1],
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2104[m[K[36m[K:[m[K                        (float)[01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2105[m[K[36m[K:[m[K  const float r_s_inv = [01;31m[Ke-[m[K>mesh->r_s_inv;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2108[m[K[36m[K:[m[K  if (!(cell_is_active_gravity(ci, e) && ci->nodeID == [01;31m[Ke-[m[K>nodeID)) return;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2118[m[K[36m[K:[m[K  if (cj->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2145[m[K[36m[K:[m[K    if (gcount_i > ci_cach[01;31m[Ke-[m[K>count)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2150[m[K[36m[K:[m[K    const struct multipole *multi_j = &cj->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2151[m[K[36m[K:[m[K    const float CoM_j[3] = {(float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[0]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2152[m[K[36m[K:[m[K                            (float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[1]),
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2153[m[K[36m[K:[m[K                            (float)(cj->grav.multipol[01;31m[Ke-[m[K>CoM[2])};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2162[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>max_active_bin, periodic, dim, ci_cache, ci->grav.parts, gcount_i,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2163[m[K[36m[K:[m[K        gcount_padded_i, ci, CoM_j, cj->grav.multipole, [01;31m[Ke-[m[K>gravity_properties);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2215[m[K[36m[K:[m[K  const int nodeID = [01;31m[Ke-[m[K>nodeID;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2216[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2217[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>mesh->dim[0], [01;31m[Ke-[m[K>mesh->dim[1], [01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2218[m[K[36m[K:[m[K  const double max_distance = [01;31m[Ke-[m[K>mesh->r_cut_max;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2238[m[K[36m[K:[m[K      ci->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2241[m[K[36m[K:[m[K      cj->grav.ti_old_multipole != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2301[m[K[36m[K:[m[K  } else if (gravity_M2L_accept_symmetric([01;31m[Ke-[m[K>gravity_properties, multi_i,
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2443[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>mesh->periodic;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2444[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>mesh->dim[0], [01;31m[Ke-[m[K>mesh->dim[1], [01;31m[Ke-[m[K>mesh->dim[2]};
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2445[m[K[36m[K:[m[K  const double max_distance2 = [01;31m[Ke-[m[K>mesh->r_cut_max * [01;31m[Ke-[m[K>mesh->r_cut_max;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2450[m[K[36m[K:[m[K  struct cell *cells = [01;31m[Ke-[m[K>s->cells_top;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2451[m[K[36m[K:[m[K  int *cells_with_particles = [01;31m[Ke-[m[K>s->cells_with_particles_top;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2452[m[K[36m[K:[m[K  const int nr_cells_with_particles = [01;31m[Ke-[m[K>s->nr_cells_with_particles;
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2461[m[K[36m[K:[m[K  if (ci->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(ci, e);
[35m[Krunner_doiact_grav.c[m[K[36m[K:[m[K[32m[K2514[m[K[36m[K:[m[K    if (cell_can_use_pair_mm(top, cj, e, [01;31m[Ke-[m[K>s, /*use_rebuild_data=*/1,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>mq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K84[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>r2q[i] = 1.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K85[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dxq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dyq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dzq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vxq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K89[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vyq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K90[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vzq[i] = 0.f;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K        &int_cach[01;31m[Ke-[m[K>r2q[*icount_align], &int_cach[01;31m[Ke-[m[K>dxq[*icount_align],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K        &int_cach[01;31m[Ke-[m[K>dyq[*icount_align], &int_cach[01;31m[Ke-[m[K>dzq[*icount_align],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K        v_hi_inv, v_vix, v_viy, v_viz, &int_cach[01;31m[Ke-[m[K>vxq[*icount_align],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K        &int_cach[01;31m[Ke-[m[K>vyq[*icount_align], &int_cach[01;31m[Ke-[m[K>vzq[*icount_align],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K109[m[K[36m[K:[m[K        &int_cach[01;31m[Ke-[m[K>mq[*icount_align], v_rhoSum, v_rho_dhSum, v_wcountSum,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K169[m[K[36m[K:[m[K  VEC_LEFT_PACK(v_r2->v, packed_mask, &int_cach[01;31m[Ke-[m[K>r2q[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K  VEC_LEFT_PACK(v_dx->v, packed_mask, &int_cach[01;31m[Ke-[m[K>dxq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K171[m[K[36m[K:[m[K  VEC_LEFT_PACK(v_dy->v, packed_mask, &int_cach[01;31m[Ke-[m[K>dyq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K172[m[K[36m[K:[m[K  VEC_LEFT_PACK(v_dz->v, packed_mask, &int_cach[01;31m[Ke-[m[K>dzq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K  VEC_LEFT_PACK(vec_load(&cell_cach[01;31m[Ke-[m[K>m[pjd]), packed_mask,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K174[m[K[36m[K:[m[K                &int_cach[01;31m[Ke-[m[K>mq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K  VEC_LEFT_PACK(vec_load(&cell_cach[01;31m[Ke-[m[K>vx[pjd]), packed_mask,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K176[m[K[36m[K:[m[K                &int_cach[01;31m[Ke-[m[K>vxq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K177[m[K[36m[K:[m[K  VEC_LEFT_PACK(vec_load(&cell_cach[01;31m[Ke-[m[K>vy[pjd]), packed_mask,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K178[m[K[36m[K:[m[K                &int_cach[01;31m[Ke-[m[K>vyq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K  VEC_LEFT_PACK(vec_load(&cell_cach[01;31m[Ke-[m[K>vz[pjd]), packed_mask,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K                &int_cach[01;31m[Ke-[m[K>vzq[*icount]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K189[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>r2q[*icount] = v_r2->f[bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K190[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dxq[*icount] = v_dx->f[bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K191[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dyq[*icount] = v_dy->f[bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K192[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>dzq[*icount] = v_dz->f[bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K193[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>mq[*icount] = cell_cach[01;31m[Ke-[m[K>m[pjd + bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vxq[*icount] = cell_cach[01;31m[Ke-[m[K>vx[pjd + bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K195[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vyq[*icount] = cell_cach[01;31m[Ke-[m[K>vy[pjd + bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K196[m[K[36m[K:[m[K      int_cach[01;31m[Ke-[m[K>vzq[*icount] = cell_cach[01;31m[Ke-[m[K>vz[pjd + bit_index];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K222[m[K[36m[K:[m[K          &int_cach[01;31m[Ke-[m[K>r2q[j], &int_cach[01;31m[Ke-[m[K>dxq[j], &int_cach[01;31m[Ke-[m[K>dyq[j],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K223[m[K[36m[K:[m[K          &int_cach[01;31m[Ke-[m[K>dzq[j], v_hi_inv, v_vix, v_viy, v_viz, &int_cach[01;31m[Ke-[m[K>vxq[j],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K          &int_cach[01;31m[Ke-[m[K>vyq[j], &int_cach[01;31m[Ke-[m[K>vzq[j], &int_cach[01;31m[Ke-[m[K>mq[j], v_rhoSum,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K * @param max_active_bin The largest tim[01;31m[Ke-[m[Kbin active during this step.
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K * @param max_active_bin The largest tim[01;31m[Ke-[m[Kbin active during this step.
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K669[m[K[36m[K:[m[K    if (parts[i].ti_drift != [01;31m[Ke-[m[K>ti_current && !part_is_inhibited(&parts[i], e))
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K674[m[K[36m[K:[m[K  /* Get the particle cache from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K677[m[K[36m[K:[m[K  if (cell_cach[01;31m[Ke-[m[K>count < count) cache_init(cell_cache, count);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K695[m[K[36m[K:[m[K    const vector v_pix = vector_set1(cell_cach[01;31m[Ke-[m[K>x[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K696[m[K[36m[K:[m[K    const vector v_piy = vector_set1(cell_cach[01;31m[Ke-[m[K>y[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K697[m[K[36m[K:[m[K    const vector v_piz = vector_set1(cell_cach[01;31m[Ke-[m[K>z[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K698[m[K[36m[K:[m[K    const vector v_hi = vector_set1(cell_cach[01;31m[Ke-[m[K>h[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K699[m[K[36m[K:[m[K    const vector v_vix = vector_set1(cell_cach[01;31m[Ke-[m[K>vx[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K    const vector v_viy = vector_set1(cell_cach[01;31m[Ke-[m[K>vy[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K    const vector v_viz = vector_set1(cell_cach[01;31m[Ke-[m[K>vz[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K704[m[K[36m[K:[m[K    const float hi = cell_cach[01;31m[Ke-[m[K>h[pid];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K728[m[K[36m[K:[m[K      const vector v_pjx = vector_load(&cell_cach[01;31m[Ke-[m[K>x[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K729[m[K[36m[K:[m[K      const vector v_pjy = vector_load(&cell_cach[01;31m[Ke-[m[K>y[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K730[m[K[36m[K:[m[K      const vector v_pjz = vector_load(&cell_cach[01;31m[Ke-[m[K>z[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K732[m[K[36m[K:[m[K      const vector v_pjx2 = vector_load(&cell_cach[01;31m[Ke-[m[K>x[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K733[m[K[36m[K:[m[K      const vector v_pjy2 = vector_load(&cell_cach[01;31m[Ke-[m[K>y[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K734[m[K[36m[K:[m[K      const vector v_pjz2 = vector_load(&cell_cach[01;31m[Ke-[m[K>z[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K894[m[K[36m[K:[m[K  /* Get the particle cache from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K898[m[K[36m[K:[m[K  if (cell_cach[01;31m[Ke-[m[K>count < count) cache_init(cell_cache, count);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K953[m[K[36m[K:[m[K      const vector v_pjx = vector_load(&cell_cach[01;31m[Ke-[m[K>x[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K954[m[K[36m[K:[m[K      const vector v_pjy = vector_load(&cell_cach[01;31m[Ke-[m[K>y[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K955[m[K[36m[K:[m[K      const vector v_pjz = vector_load(&cell_cach[01;31m[Ke-[m[K>z[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K957[m[K[36m[K:[m[K      const vector v_pjx2 = vector_load(&cell_cach[01;31m[Ke-[m[K>x[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K      const vector v_pjy2 = vector_load(&cell_cach[01;31m[Ke-[m[K>y[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K959[m[K[36m[K:[m[K      const vector v_pjz2 = vector_load(&cell_cach[01;31m[Ke-[m[K>z[pjd + VEC_SIZE]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1120[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1134[m[K[36m[K:[m[K    if (parts[i].ti_drift != [01;31m[Ke-[m[K>ti_current && !part_is_inhibited(&parts[i], e))
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1139[m[K[36m[K:[m[K  /* Get the particle cache from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1143[m[K[36m[K:[m[K  if (cell_cach[01;31m[Ke-[m[K>count < count) cache_init(cell_cache, count);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1162[m[K[36m[K:[m[K    const vector v_pix = vector_set1(cell_cach[01;31m[Ke-[m[K>x[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1163[m[K[36m[K:[m[K    const vector v_piy = vector_set1(cell_cach[01;31m[Ke-[m[K>y[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1164[m[K[36m[K:[m[K    const vector v_piz = vector_set1(cell_cach[01;31m[Ke-[m[K>z[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1165[m[K[36m[K:[m[K    const vector v_hi = vector_set1(cell_cach[01;31m[Ke-[m[K>h[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1166[m[K[36m[K:[m[K    const vector v_vix = vector_set1(cell_cach[01;31m[Ke-[m[K>vx[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1167[m[K[36m[K:[m[K    const vector v_viy = vector_set1(cell_cach[01;31m[Ke-[m[K>vy[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1168[m[K[36m[K:[m[K    const vector v_viz = vector_set1(cell_cach[01;31m[Ke-[m[K>vz[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1170[m[K[36m[K:[m[K    const vector v_rhoi = vector_set1(cell_cach[01;31m[Ke-[m[K>rho[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1171[m[K[36m[K:[m[K    const vector v_grad_hi = vector_set1(cell_cach[01;31m[Ke-[m[K>grad_h[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1172[m[K[36m[K:[m[K    const vector v_pOrhoi2 = vector_set1(cell_cach[01;31m[Ke-[m[K>pOrho2[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1173[m[K[36m[K:[m[K    const vector v_balsara_i = vector_set1(cell_cach[01;31m[Ke-[m[K>balsara[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1174[m[K[36m[K:[m[K    const vector v_ci = vector_set1(cell_cach[01;31m[Ke-[m[K>soundspeed[pid]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1177[m[K[36m[K:[m[K    const float hi = cell_cach[01;31m[Ke-[m[K>h[pid];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1195[m[K[36m[K:[m[K      const vector v_pjx = vector_load(&cell_cach[01;31m[Ke-[m[K>x[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1196[m[K[36m[K:[m[K      const vector v_pjy = vector_load(&cell_cach[01;31m[Ke-[m[K>y[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1197[m[K[36m[K:[m[K      const vector v_pjz = vector_load(&cell_cach[01;31m[Ke-[m[K>z[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1198[m[K[36m[K:[m[K      const vector hj = vector_load(&cell_cach[01;31m[Ke-[m[K>h[pjd]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1265[m[K[36m[K:[m[K            v_pOrhoi2, v_balsara_i, v_ci, &cell_cach[01;31m[Ke-[m[K>vx[pjd],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1266[m[K[36m[K:[m[K            &cell_cach[01;31m[Ke-[m[K>vy[pjd], &cell_cach[01;31m[Ke-[m[K>vz[pjd], &cell_cach[01;31m[Ke-[m[K>rho[pjd],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1267[m[K[36m[K:[m[K            &cell_cach[01;31m[Ke-[m[K>grad_h[pjd], &cell_cach[01;31m[Ke-[m[K>pOrho2[pjd],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1268[m[K[36m[K:[m[K            &cell_cach[01;31m[Ke-[m[K>balsara[pjd], &cell_cach[01;31m[Ke-[m[K>soundspeed[pjd],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1269[m[K[36m[K:[m[K            &cell_cach[01;31m[Ke-[m[K>m[pjd], v_hi_inv, v_hj_inv, a, H, &v_a_hydro_xSum,
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1312[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1317[m[K[36m[K:[m[K  const int ci_local = (ci->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1318[m[K[36m[K:[m[K  const int cj_local = (cj->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1344[m[K[36m[K:[m[K    if (parts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1348[m[K[36m[K:[m[K    if (parts_j[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1381[m[K[36m[K:[m[K  /* Get both particle caches from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1385[m[K[36m[K:[m[K  if (ci_cach[01;31m[Ke-[m[K>count < count_i) cache_init(ci_cache, count_i);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1386[m[K[36m[K:[m[K  if (cj_cach[01;31m[Ke-[m[K>count < count_j) cache_init(cj_cache, count_j);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1432[m[K[36m[K:[m[K      const float hi = ci_cach[01;31m[Ke-[m[K>h[ci_cache_idx];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1441[m[K[36m[K:[m[K      const vector v_pix = vector_set1(ci_cach[01;31m[Ke-[m[K>x[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1442[m[K[36m[K:[m[K      const vector v_piy = vector_set1(ci_cach[01;31m[Ke-[m[K>y[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1443[m[K[36m[K:[m[K      const vector v_piz = vector_set1(ci_cach[01;31m[Ke-[m[K>z[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1445[m[K[36m[K:[m[K      const vector v_vix = vector_set1(ci_cach[01;31m[Ke-[m[K>vx[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1446[m[K[36m[K:[m[K      const vector v_viy = vector_set1(ci_cach[01;31m[Ke-[m[K>vy[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1447[m[K[36m[K:[m[K      const vector v_viz = vector_set1(ci_cach[01;31m[Ke-[m[K>vz[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1484[m[K[36m[K:[m[K        const vector v_pjx = vector_load(&cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1485[m[K[36m[K:[m[K        const vector v_pjy = vector_load(&cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1486[m[K[36m[K:[m[K        const vector v_pjz = vector_load(&cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1532[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1533[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>m[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1566[m[K[36m[K:[m[K      const float hj = cj_cach[01;31m[Ke-[m[K>h[cj_cache_idx];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1574[m[K[36m[K:[m[K      const vector v_pjx = vector_set1(cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1575[m[K[36m[K:[m[K      const vector v_pjy = vector_set1(cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1576[m[K[36m[K:[m[K      const vector v_pjz = vector_set1(cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1578[m[K[36m[K:[m[K      const vector v_vjx = vector_set1(cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1579[m[K[36m[K:[m[K      const vector v_vjy = vector_set1(cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1580[m[K[36m[K:[m[K      const vector v_vjz = vector_set1(cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1625[m[K[36m[K:[m[K        const vector v_pix = vector_load(&ci_cach[01;31m[Ke-[m[K>x[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1626[m[K[36m[K:[m[K        const vector v_piy = vector_load(&ci_cach[01;31m[Ke-[m[K>y[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1627[m[K[36m[K:[m[K        const vector v_piz = vector_load(&ci_cach[01;31m[Ke-[m[K>z[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1673[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>vx[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>vy[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1674[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>vz[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>m[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1734[m[K[36m[K:[m[K  /* Get both particle caches from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1738[m[K[36m[K:[m[K  if (cj_cach[01;31m[Ke-[m[K>count < count_j) cache_init(cj_cache, count_j);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1824[m[K[36m[K:[m[K        const vector v_pjx = vector_load(&cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1825[m[K[36m[K:[m[K        const vector v_pjy = vector_load(&cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1826[m[K[36m[K:[m[K        const vector v_pjz = vector_load(&cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1876[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1877[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>m[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1972[m[K[36m[K:[m[K        const vector v_pjx = vector_load(&cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1973[m[K[36m[K:[m[K        const vector v_pjy = vector_load(&cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K1974[m[K[36m[K:[m[K        const vector v_pjz = vector_load(&cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2024[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2025[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>m[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2066[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2067[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2072[m[K[36m[K:[m[K  const int ci_local = (ci->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2073[m[K[36m[K:[m[K  const int cj_local = (cj->nodeID == [01;31m[Ke-[m[K>nodeID);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2105[m[K[36m[K:[m[K    if (parts_i[pid].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2109[m[K[36m[K:[m[K    if (parts_j[pjd].ti_drift != [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2146[m[K[36m[K:[m[K  /* Get both particle caches from the runner and r[01;31m[Ke-[m[Kallocate
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2150[m[K[36m[K:[m[K  if (ci_cach[01;31m[Ke-[m[K>count < count_i) cache_init(ci_cache, count_i);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2151[m[K[36m[K:[m[K  if (cj_cach[01;31m[Ke-[m[K>count < count_j) cache_init(cj_cache, count_j);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2197[m[K[36m[K:[m[K      const float hi = ci_cach[01;31m[Ke-[m[K>h[ci_cache_idx];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2206[m[K[36m[K:[m[K      const vector v_pix = vector_set1(ci_cach[01;31m[Ke-[m[K>x[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2207[m[K[36m[K:[m[K      const vector v_piy = vector_set1(ci_cach[01;31m[Ke-[m[K>y[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2208[m[K[36m[K:[m[K      const vector v_piz = vector_set1(ci_cach[01;31m[Ke-[m[K>z[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2210[m[K[36m[K:[m[K      const vector v_vix = vector_set1(ci_cach[01;31m[Ke-[m[K>vx[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2211[m[K[36m[K:[m[K      const vector v_viy = vector_set1(ci_cach[01;31m[Ke-[m[K>vy[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2212[m[K[36m[K:[m[K      const vector v_viz = vector_set1(ci_cach[01;31m[Ke-[m[K>vz[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2213[m[K[36m[K:[m[K      const vector v_rhoi = vector_set1(ci_cach[01;31m[Ke-[m[K>rho[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2214[m[K[36m[K:[m[K      const vector v_grad_hi = vector_set1(ci_cach[01;31m[Ke-[m[K>grad_h[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2215[m[K[36m[K:[m[K      const vector v_pOrhoi2 = vector_set1(ci_cach[01;31m[Ke-[m[K>pOrho2[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2216[m[K[36m[K:[m[K      const vector v_balsara_i = vector_set1(ci_cach[01;31m[Ke-[m[K>balsara[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2217[m[K[36m[K:[m[K      const vector v_ci = vector_set1(ci_cach[01;31m[Ke-[m[K>soundspeed[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2253[m[K[36m[K:[m[K        const vector v_pjx = vector_load(&cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2254[m[K[36m[K:[m[K        const vector v_pjy = vector_load(&cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2255[m[K[36m[K:[m[K        const vector v_pjz = vector_load(&cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2256[m[K[36m[K:[m[K        const vector v_hj = vector_load(&cj_cach[01;31m[Ke-[m[K>h[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2308[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2309[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>rho[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2310[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>grad_h[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>pOrho2[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2311[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>balsara[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2312[m[K[36m[K:[m[K              &cj_cach[01;31m[Ke-[m[K>soundspeed[cj_cache_idx], &cj_cach[01;31m[Ke-[m[K>m[cj_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2344[m[K[36m[K:[m[K      const float hj = cj_cach[01;31m[Ke-[m[K>h[cj_cache_idx];
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2353[m[K[36m[K:[m[K      const vector v_pjx = vector_set1(cj_cach[01;31m[Ke-[m[K>x[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2354[m[K[36m[K:[m[K      const vector v_pjy = vector_set1(cj_cach[01;31m[Ke-[m[K>y[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2355[m[K[36m[K:[m[K      const vector v_pjz = vector_set1(cj_cach[01;31m[Ke-[m[K>z[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2357[m[K[36m[K:[m[K      const vector v_vjx = vector_set1(cj_cach[01;31m[Ke-[m[K>vx[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2358[m[K[36m[K:[m[K      const vector v_vjy = vector_set1(cj_cach[01;31m[Ke-[m[K>vy[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2359[m[K[36m[K:[m[K      const vector v_vjz = vector_set1(cj_cach[01;31m[Ke-[m[K>vz[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2360[m[K[36m[K:[m[K      const vector v_rhoj = vector_set1(cj_cach[01;31m[Ke-[m[K>rho[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2361[m[K[36m[K:[m[K      const vector v_grad_hj = vector_set1(cj_cach[01;31m[Ke-[m[K>grad_h[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2362[m[K[36m[K:[m[K      const vector v_pOrhoj2 = vector_set1(cj_cach[01;31m[Ke-[m[K>pOrho2[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2363[m[K[36m[K:[m[K      const vector v_balsara_j = vector_set1(cj_cach[01;31m[Ke-[m[K>balsara[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2364[m[K[36m[K:[m[K      const vector v_cj = vector_set1(cj_cach[01;31m[Ke-[m[K>soundspeed[cj_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2404[m[K[36m[K:[m[K        const vector v_pix = vector_load(&ci_cach[01;31m[Ke-[m[K>x[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2405[m[K[36m[K:[m[K        const vector v_piy = vector_load(&ci_cach[01;31m[Ke-[m[K>y[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2406[m[K[36m[K:[m[K        const vector v_piz = vector_load(&ci_cach[01;31m[Ke-[m[K>z[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2407[m[K[36m[K:[m[K        const vector v_hi = vector_load(&ci_cach[01;31m[Ke-[m[K>h[ci_cache_idx]);
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2459[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>vx[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>vy[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2460[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>vz[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>rho[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2461[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>grad_h[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>pOrho2[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2462[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>balsara[ci_cache_idx],
[35m[Krunner_doiact_hydro_vec.c[m[K[36m[K:[m[K[32m[K2463[m[K[36m[K:[m[K              &ci_cach[01;31m[Ke-[m[K>soundspeed[ci_cache_idx], &ci_cach[01;31m[Ke-[m[K>m[ci_cache_idx],
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K23[m[K[36m[K:[m[K  space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K109[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[K  space_getsid([01;31m[Ke-[m[K>s, &ci, &cj, shift);
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K234[m[K[36m[K:[m[K        if (pj->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K        if (pi->ti_drift != [01;31m[Ke-[m[K>ti_current)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K    if (cj->loc[k] - ci->loc[k] < -[01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K280[m[K[36m[K:[m[K      shift[k] = [01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K281[m[K[36m[K:[m[K    else if (cj->loc[k] - ci->loc[k] > [01;31m[Ke-[m[K>s->dim[k] / 2)
[35m[Krunner_doiact_nosort.h[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K      shift[k] = -[01;31m[Ke-[m[K>s->dim[k];
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K  const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K80[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K82[m[K[36m[K:[m[K  const struct feedback_props *feedback_props = [01;31m[Ke-[m[K>feedback_props;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K  const struct rt_props *rt_props = [01;31m[Ke-[m[K>rt_props;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K84[m[K[36m[K:[m[K  const float stars_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K85[m[K[36m[K:[m[K  const float stars_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K  const float eps = [01;31m[Ke-[m[K>stars_properties->h_tolerance;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K      pow_dimension([01;31m[Ke-[m[K>stars_properties->eta_neighbours);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K89[m[K[36m[K:[m[K  const int max_smoothing_iter = [01;31m[Ke-[m[K>stars_properties->max_smoothing_iterations;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K99[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K        if (sp->density.wcount < 1.[01;31m[Ke-[m[K5 * kernel_root) { /* No neighbours case */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K                  get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, sp->time_bin);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K221[m[K[36m[K:[m[K              /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K                dt_star = cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K227[m[K[36m[K:[m[K                dt_star = get_timestep(sp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K232[m[K[36m[K:[m[K                  stars_compute_age(sp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time, with_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K237[m[K[36m[K:[m[K                /* Get the length of the enrichment tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K                    sp, with_cosmology, cosmo, [01;31m[Ke-[m[K>time, dt_star);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K246[m[K[36m[K:[m[K                                          dt_enrichment, [01;31m[Ke-[m[K>time, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K              /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K                    get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, sp->time_bin);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K                dt_star = cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K                dt_star = get_timestep(sp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K280[m[K[36m[K:[m[K                  stars_compute_age(sp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time, with_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K              rt_compute_stellar_emission_rate(sp, [01;31m[Ke-[m[K>time,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K346[m[K[36m[K:[m[K            /* R[01;31m[Ke-[m[Kinitialise everything */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K390[m[K[36m[K:[m[K              get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, sp->time_bin);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K          /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K395[m[K[36m[K:[m[K            dt_star = cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K            dt_star = get_timestep(sp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K              stars_compute_age(sp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time, with_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K408[m[K[36m[K:[m[K            /* Get the length of the enrichment tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K                sp, with_cosmology, cosmo, [01;31m[Ke-[m[K>time, dt_star);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K                                      [01;31m[Ke-[m[K>time, ti_begin, with_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K          /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K439[m[K[36m[K:[m[K                get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, sp->time_bin);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K441[m[K[36m[K:[m[K            dt_star = cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K445[m[K[36m[K:[m[K            dt_star = get_timestep(sp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K450[m[K[36m[K:[m[K              stars_compute_age(sp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time, with_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K452[m[K[36m[K:[m[K          rt_compute_stellar_emission_rate(sp, [01;31m[Ke-[m[K>time, star_age_end_of_step,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K460[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Kset the counter for the next loop (potentially). */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K471[m[K[36m[K:[m[K            if (l->t->ti_run < r->[01;31m[Ke-[m[K>ti_current)
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K575[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K576[m[K[36m[K:[m[K  const float black_holes_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K577[m[K[36m[K:[m[K  const float black_holes_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K578[m[K[36m[K:[m[K  const float eps = [01;31m[Ke-[m[K>black_holes_properties->h_tolerance;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K580[m[K[36m[K:[m[K      pow_dimension([01;31m[Ke-[m[K>black_holes_properties->eta_neighbours);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K581[m[K[36m[K:[m[K  const int max_smoothing_iter = [01;31m[Ke-[m[K>hydro_properties->max_smoothing_iterations;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K658[m[K[36m[K:[m[K        if (bp->density.wcount < 1.[01;31m[Ke-[m[K5 * kernel_root) { /* No neighbours case */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K            /* R[01;31m[Ke-[m[Kinitialise everything */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K798[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Kset the counter for the next loop (potentially). */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K810[m[K[36m[K:[m[K            if (l->t->ti_run < r->[01;31m[Ke-[m[K>ti_current)
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K915[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K938[m[K[36m[K:[m[K        /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K943[m[K[36m[K:[m[K              get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, bp->time_bin);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K945[m[K[36m[K:[m[K          dt = cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K948[m[K[36m[K:[m[K          dt = get_timestep(bp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K952[m[K[36m[K:[m[K        black_holes_end_reposition(bp, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K953[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology, dt,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K954[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K957[m[K[36m[K:[m[K        black_holes_prepare_feedback(bp, [01;31m[Ke-[m[K>black_holes_properties,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K958[m[K[36m[K:[m[K                                     [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K959[m[K[36m[K:[m[K                                     [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>entropy_floor, [01;31m[Ke-[m[K>time,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K                                     with_cosmology, dt, [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K984[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K985[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K986[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K987[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K988[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K        /* Calculate the tim[01;31m[Ke-[m[Kstep for passing to hydro_prepare_force.
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1016[m[K[36m[K:[m[K         * This is the physical time between the start and end of the tim[01;31m[Ke-[m[Kstep
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1017[m[K[36m[K:[m[K         * without any scal[01;31m[Ke-[m[Kfactor powers. */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1065[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1067[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1068[m[K[36m[K:[m[K  const struct chemistry_global_data *chemistry = [01;31m[Ke-[m[K>chemistry;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1069[m[K[36m[K:[m[K  const struct star_formation *star_formation = [01;31m[Ke-[m[K>star_formation;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1070[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1072[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1074[m[K[36m[K:[m[K  const float hydro_h_max = [01;31m[Ke-[m[K>hydro_properties->h_max;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1075[m[K[36m[K:[m[K  const float hydro_h_min = [01;31m[Ke-[m[K>hydro_properties->h_min;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1076[m[K[36m[K:[m[K  const float eps = [01;31m[Ke-[m[K>hydro_properties->h_tolerance;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1078[m[K[36m[K:[m[K      pow_dimension([01;31m[Ke-[m[K>hydro_properties->eta_neighbours);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1080[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>hydro_properties->use_mass_weighted_num_ngb;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1081[m[K[36m[K:[m[K  const int max_smoothing_iter = [01;31m[Ke-[m[K>hydro_properties->max_smoothing_iterations;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1158[m[K[36m[K:[m[K        if (p->density.wcount < 1.[01;31m[Ke-[m[K5 * kernel_root) { /* No neighbours case */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1233[m[K[36m[K:[m[K            /* Calculate the tim[01;31m[Ke-[m[Kstep for passing to hydro_prepare_force, used
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1236[m[K[36m[K:[m[K            const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1237[m[K[36m[K:[m[K            const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1334[m[K[36m[K:[m[K            /* R[01;31m[Ke-[m[Kinitialise everything */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1339[m[K[36m[K:[m[K            tracers_after_init(p, xp, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>physical_constants,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1340[m[K[36m[K:[m[K                               with_cosmology, [01;31m[Ke-[m[K>cosmology,
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1341[m[K[36m[K:[m[K                               [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1396[m[K[36m[K:[m[K        /* Calculate the tim[01;31m[Ke-[m[Kstep for passing to hydro_prepare_force, used
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1399[m[K[36m[K:[m[K        const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1400[m[K[36m[K:[m[K        const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1435[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Kset the counter for the next loop (potentially). */
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1446[m[K[36m[K:[m[K            if (l->t->ti_run < r->[01;31m[Ke-[m[K>ti_current)
[35m[Krunner_ghost.c[m[K[36m[K:[m[K[32m[K1577[m[K[36m[K:[m[K      rt_finalise_injection(p, [01;31m[Ke-[m[K>rt_props);
[35m[Krunner_main.c[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K  struct scheduler *sched = &[01;31m[Ke-[m[K>sched;
[35m[Krunner_main.c[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>step_props & engine_step_prop_done) break;
[35m[Krunner_main.c[m[K[36m[K:[m[K[32m[K182[m[K[36m[K:[m[K    /* R[01;31m[Ke-[m[Kset the pointer to the previous task, as there is none. */
[35m[Krunner_main.c[m[K[36m[K:[m[K[32m[K214[m[K[36m[K:[m[K        t->sid = space_getsid([01;31m[Ke-[m[K>s, &ci_temp, &cj_temp, shift);
[35m[Krunner_main.c[m[K[36m[K:[m[K[32m[K222[m[K[36m[K:[m[K      t->ti_run = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_neutrino.c[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_neutrino.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  gather_neutrino_consts([01;31m[Ke-[m[K>s, &nu_model);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K  const struct phys_const *constants = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K  const double time = r->[01;31m[Ke-[m[K>time;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K125[m[K[36m[K:[m[K  const struct cooling_function_data *cooling_func = [01;31m[Ke-[m[K>cooling_func;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K126[m[K[36m[K:[m[K  const struct phys_const *constants = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K127[m[K[36m[K:[m[K  const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K128[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K  const struct entropy_floor_properties *entropy_floor_props = [01;31m[Ke-[m[K>entropy_floor;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K          dt_therm = cosmology_get_therm_kick_factor([01;31m[Ke-[m[K>cosmology, ti_begin,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K198[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K  const struct sink_props *sink_props = [01;31m[Ke-[m[K>sink_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K205[m[K[36m[K:[m[K  const struct unit_system *restrict us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K   * r[01;31m[Ke-[m[Kcompute them. */
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K  const struct star_formation *sf_props = [01;31m[Ke-[m[K>star_formation;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K297[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K298[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K299[m[K[36m[K:[m[K  const struct hydro_props *restrict hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K  const struct unit_system *restrict us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K  struct cooling_function_data *restrict cooling = [01;31m[Ke-[m[K>cooling_func;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K  const struct entropy_floor_properties *entropy_floor = [01;31m[Ke-[m[K>entropy_floor;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K304[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K          /* Tim[01;31m[Ke-[m[Kstep size for this particle */
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K                csds_log_part([01;31m[Ke-[m[K>csds, p, xp, e, /* log_all */ 1,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K468[m[K[36m[K:[m[K              csds_log_spart([01;31m[Ke-[m[K>csds, sp, e, /* log_all */ 1, csds_flag_create,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K500[m[K[36m[K:[m[K   * r[01;31m[Ke-[m[Kcompute them. */
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K518[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K519[m[K[36m[K:[m[K  const struct sink_props *sink_props = [01;31m[Ke-[m[K>sink_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K520[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K525[m[K[36m[K:[m[K  const struct hydro_props *restrict hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K526[m[K[36m[K:[m[K  const struct unit_system *restrict us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K527[m[K[36m[K:[m[K  struct cooling_function_data *restrict cooling = [01;31m[Ke-[m[K>cooling_func;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K528[m[K[36m[K:[m[K  const struct entropy_floor_properties *entropy_floor = [01;31m[Ke-[m[K>entropy_floor;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K529[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K  if (c->nodeID != [01;31m[Ke-[m[K>nodeID)
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K568[m[K[36m[K:[m[K          /* Tim[01;31m[Ke-[m[Kstep size for this particle */
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K620[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K633[m[K[36m[K:[m[K    const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K650[m[K[36m[K:[m[K              get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, p->time_bin);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K654[m[K[36m[K:[m[K          dt = get_timestep(p->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K660[m[K[36m[K:[m[K        chemistry_end_force(p, cosmo, with_cosmology, [01;31m[Ke-[m[K>time, dt);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K677[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>hydro_properties, 0);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K  const int with_self_gravity = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K  const int with_black_holes = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K714[m[K[36m[K:[m[K    const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K716[m[K[36m[K:[m[K    const float G_newton = [01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K722[m[K[36m[K:[m[K      const double r_s = [01;31m[Ke-[m[K>mesh->r_s;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K723[m[K[36m[K:[m[K      potential_normalisation = 4. * M_PI * [01;31m[Ke-[m[K>total_mass * r_s * r_s / volume;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K754[m[K[36m[K:[m[K          id = [01;31m[Ke-[m[K>s->parts[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K756[m[K[36m[K:[m[K          id = [01;31m[Ke-[m[K>s->sparts[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K          id = [01;31m[Ke-[m[K>s->sinks[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K          id = [01;31m[Ke-[m[K>s->bparts[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K775[m[K[36m[K:[m[K        if (([01;31m[Ke-[m[K>policy & engine_policy_self_gravity) &&
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K776[m[K[36m[K:[m[K            !([01;31m[Ke-[m[K>policy & engine_policy_black_holes) &&
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K777[m[K[36m[K:[m[K            !([01;31m[Ke-[m[K>policy & engine_policy_star_formation) &&
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K778[m[K[36m[K:[m[K            !([01;31m[Ke-[m[K>policy & engine_policy_sinks)) {
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K786[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>total_nr_gparts - [01;31m[Ke-[m[K>count_inhibited_gparts) {
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K791[m[K[36m[K:[m[K              my_id = [01;31m[Ke-[m[K>s->parts[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K              my_id = [01;31m[Ke-[m[K>s->sparts[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K795[m[K[36m[K:[m[K              my_id = [01;31m[Ke-[m[K>s->sinks[-gp->id_or_neg_offset].id;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K807[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>total_nr_gparts, [01;31m[Ke-[m[K>s->nr_gparts, [01;31m[Ke-[m[K>count_inhibited_gparts);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K877[m[K[36m[K:[m[K        if (csds_should_write(&xp->csds_data, [01;31m[Ke-[m[K>csds)) {
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K880[m[K[36m[K:[m[K          csds_log_part([01;31m[Ke-[m[K>csds, p, xp, e, /* log_all_fields= */ 0,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K        if (csds_should_write(&gp->csds_data, [01;31m[Ke-[m[K>csds)) {
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K905[m[K[36m[K:[m[K          csds_log_gpart([01;31m[Ke-[m[K>csds, gp, e, /* log_all_fields= */ 0,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K923[m[K[36m[K:[m[K        if (csds_should_write(&sp->csds_data, [01;31m[Ke-[m[K>csds)) {
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K926[m[K[36m[K:[m[K          csds_log_spart([01;31m[Ke-[m[K>csds, sp, e, /* Log_all_fields= */ 0,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K956[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K  const double search_r2 = [01;31m[Ke-[m[K>fof_properties->l_x2;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K962[m[K[36m[K:[m[K  rec_fof_search_self([01;31m[Ke-[m[K>fof_properties, dim, search_r2, periodic, gparts, c);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K987[m[K[36m[K:[m[K  struct space *s = [01;31m[Ke-[m[K>s;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K991[m[K[36m[K:[m[K  const double search_r2 = [01;31m[Ke-[m[K>fof_properties->l_x2;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K993[m[K[36m[K:[m[K  rec_fof_search_pair([01;31m[Ke-[m[K>fof_properties, dim, search_r2, periodic, gparts, ci,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1014[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K  struct rt_props *rt_props = [01;31m[Ke-[m[K>rt_props;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1016[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1017[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1018[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1019[m[K[36m[K:[m[K  const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1033[m[K[36m[K:[m[K    /* const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology; */
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1051[m[K[36m[K:[m[K      const integertime_t ti_current_subcycle = [01;31m[Ke-[m[K>ti_current_subcycle;
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1060[m[K[36m[K:[m[K            "Particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1066[m[K[36m[K:[m[K      const double dt = rt_part_dt(ti_begin, ti_end, [01;31m[Ke-[m[K>time_base,
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1067[m[K[36m[K:[m[K                                   with_cosmology, [01;31m[Ke-[m[K>cosmology);
[35m[Krunner_others.c[m[K[36m[K:[m[K[32m[K1126[m[K[36m[K:[m[K      atomic_inc(&[01;31m[Ke-[m[K>rt_updates);
[35m[Krunner_pack.c[m[K[36m[K:[m[K[32m[K36[m[K[36m[K:[m[K * @brief Pack the data needed by the tim[01;31m[Ke-[m[Kstep limiter loop prior to sending
[35m[Krunner_pack.c[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[K * @brief UnPack the data needed by the tim[01;31m[Ke-[m[Kstep limiter loop after receiving
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K51[m[K[36m[K:[m[K  const integertime_t ti_current = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K52[m[K[36m[K:[m[K  const timebin_t max_active_bin = r->[01;31m[Ke-[m[K>max_active_bin;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K101[m[K[36m[K:[m[K  if (!(r->[01;31m[Ke-[m[K>policy & engine_policy_timestep_sync) &&
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K102[m[K[36m[K:[m[K      !(r->[01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter) &&
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld.",
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K  const integertime_t ti_current = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K174[m[K[36m[K:[m[K  if (!(r->[01;31m[Ke-[m[K>policy & engine_policy_timestep_sync) &&
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K      !(r->[01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter) &&
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld.",
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K209[m[K[36m[K:[m[K  const integertime_t ti_current = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K210[m[K[36m[K:[m[K  const timebin_t max_active_bin = r->[01;31m[Ke-[m[K>max_active_bin;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K      !(r->[01;31m[Ke-[m[K>policy & engine_policy_star_formation))
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K266[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld.",
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K  const integertime_t ti_current = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K302[m[K[36m[K:[m[K  const timebin_t max_active_bin = r->[01;31m[Ke-[m[K>max_active_bin;
[35m[Krunner_recv.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K        "[01;31m[Ke-[m[K>ti_current=%lld.",
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  if (c->nodeID != r->[01;31m[Ke-[m[K>nodeID) error("Task must be run locally!");
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K * @param cleanup If true, r[01;31m[Ke-[m[Kbuild the sorts for the selected flags instead
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K     were r[01;31m[Ke-[m[Kset. */
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K  if (c->hydro.sorted == 0) c->hydro.ti_sort = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K431[m[K[36m[K:[m[K * @param cleanup If true, r[01;31m[Ke-[m[Kbuild the sorts for the selected flags instead
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K476[m[K[36m[K:[m[K     were r[01;31m[Ke-[m[Kset. */
[35m[Krunner_sort.c[m[K[36m[K:[m[K[32m[K477[m[K[36m[K:[m[K  if (c->stars.sorted == 0) c->stars.ti_sort = r->[01;31m[Ke-[m[K>ti_current;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  if (!([01;31m[Ke-[m[K>policy & engine_policy_self_gravity))
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K  if (c->grav.ti_old_multipole < [01;31m[Ke-[m[K>ti_current) cell_drift_multipole(c, e);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  gravity_field_tensors_init(&c->grav.multipol[01;31m[Ke-[m[K>pot, [01;31m[Ke-[m[K>ti_current);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K90[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K  const struct entropy_floor_properties *entropy_floor = [01;31m[Ke-[m[K>entropy_floor;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K94[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K106[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K127[m[K[36m[K:[m[K    /* Are we at a step where we do mesh-gravity tim[01;31m[Ke-[m[Kintegration? */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K128[m[K[36m[K:[m[K    if (periodic && [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next == [01;31m[Ke-[m[K>ti_current) {
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>mesh->ti_end_mesh_next - [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K      ti_begin_mesh = [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K133[m[K[36m[K:[m[K      ti_end_mesh = [01;31m[Ke-[m[K>mesh->ti_beg_mesh_next + ti_step / 2;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K163[m[K[36m[K:[m[K              "Particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K            "Particle on a tim[01;31m[Ke-[m[Kstep longer than the mesh synchronization "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K226[m[K[36m[K:[m[K              "G-particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K              "S-particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K296[m[K[36m[K:[m[K              "Sink-particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K              "B-particle in wrong tim[01;31m[Ke-[m[Kbin, ti_end=%lld, ti_begin=%lld, "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K362[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K363[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K  const struct entropy_floor_properties *entropy_floor = [01;31m[Ke-[m[K>entropy_floor;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K  const int periodic = [01;31m[Ke-[m[K>s->periodic;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K378[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K379[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K399[m[K[36m[K:[m[K    /* Are we at a step where we do mesh-gravity tim[01;31m[Ke-[m[Kintegration? */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K400[m[K[36m[K:[m[K    if (periodic && [01;31m[Ke-[m[K>mesh->ti_end_mesh_last == [01;31m[Ke-[m[K>ti_current) {
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>mesh->ti_end_mesh_last - [01;31m[Ke-[m[K>mesh->ti_beg_mesh_last;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K      ti_begin_mesh = [01;31m[Ke-[m[K>mesh->ti_beg_mesh_last + ti_step / 2;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K      ti_end_mesh = [01;31m[Ke-[m[K>mesh->ti_end_mesh_last;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K426[m[K[36m[K:[m[K        /* Tim[01;31m[Ke-[m[Kstep length on the integer timeline */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K435[m[K[36m[K:[m[K              "Particle in wrong tim[01;31m[Ke-[m[Kbin, ti_begin=%lld, ti_step=%lld "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K451[m[K[36m[K:[m[K        /* Finish the tim[01;31m[Ke-[m[Kstep with a second half-kick */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K475[m[K[36m[K:[m[K            "Particle on a tim[01;31m[Ke-[m[Kstep longer than the mesh synchronization "
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K492[m[K[36m[K:[m[K        if (ti_end != ti_current) error("Particle in wrong tim[01;31m[Ke-[m[Kbin");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K499[m[K[36m[K:[m[K        /* Finish the tim[01;31m[Ke-[m[Kstep with a second half-kick */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K529[m[K[36m[K:[m[K        if (ti_end != ti_current) error("Particle in wrong tim[01;31m[Ke-[m[Kbin");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K536[m[K[36m[K:[m[K        /* Finish the tim[01;31m[Ke-[m[Kstep with a second half-kick */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K566[m[K[36m[K:[m[K        if (ti_end != ti_current) error("Particle in wrong tim[01;31m[Ke-[m[Kbin");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K573[m[K[36m[K:[m[K        /* Finish the tim[01;31m[Ke-[m[Kstep with a second half-kick */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K603[m[K[36m[K:[m[K        if (ti_end != ti_current) error("Particle in wrong tim[01;31m[Ke-[m[Kbin");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K610[m[K[36m[K:[m[K        /* Finish the tim[01;31m[Ke-[m[Kstep with a second half-kick */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K629[m[K[36m[K:[m[K * @brief Computes the next tim[01;31m[Ke-[m[Kstep of all active particles in this cell
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K638[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K639[m[K[36m[K:[m[K  const integertime_t ti_current_subcycle = [01;31m[Ke-[m[K>ti_current_subcycle;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K640[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K641[m[K[36m[K:[m[K  const struct feedback_props *feedback_props = [01;31m[Ke-[m[K>feedback_props;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K642[m[K[36m[K:[m[K  const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K643[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K644[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K645[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K646[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K704[m[K[36m[K:[m[K        /* Current end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K709[m[K[36m[K:[m[K          error("Computing tim[01;31m[Ke-[m[Kstep of rogue particle.");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K            error("Computing RT tim[01;31m[Ke-[m[Kstep of rogue particle");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K719[m[K[36m[K:[m[K        /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K722[m[K[36m[K:[m[K        /* Get RT tim[01;31m[Ke-[m[Kstep size (note <= hydro step size) */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K732[m[K[36m[K:[m[K        tracers_after_timestep(p, xp, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>physical_constants,
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K733[m[K[36m[K:[m[K                               with_cosmology, [01;31m[Ke-[m[K>cosmology,
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K734[m[K[36m[K:[m[K                               [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K838[m[K[36m[K:[m[K          /* Current end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K843[m[K[36m[K:[m[K            error("Computing tim[01;31m[Ke-[m[Kstep of rogue particle.");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K846[m[K[36m[K:[m[K          /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K895[m[K[36m[K:[m[K        /* Current end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K900[m[K[36m[K:[m[K          error("Computing tim[01;31m[Ke-[m[Kstep of rogue particle.");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K        /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K913[m[K[36m[K:[m[K                                    [01;31m[Ke-[m[K>time, us, phys_const, [01;31m[Ke-[m[K>ti_current,
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K914[m[K[36m[K:[m[K                                    [01;31m[Ke-[m[K>time_base);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K963[m[K[36m[K:[m[K        /* Current end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K968[m[K[36m[K:[m[K          error("Computing tim[01;31m[Ke-[m[Kstep of rogue particle.");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K970[m[K[36m[K:[m[K        /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1023[m[K[36m[K:[m[K        /* Current end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1028[m[K[36m[K:[m[K          error("Computing tim[01;31m[Ke-[m[Kstep of rogue particle.");
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1030[m[K[36m[K:[m[K        /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1143[m[K[36m[K:[m[K  if (c->hydro.ti_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1146[m[K[36m[K:[m[K  if (c->grav.ti_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1149[m[K[36m[K:[m[K  if (c->stars.ti_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1152[m[K[36m[K:[m[K  if (c->sinks.ti_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1155[m[K[36m[K:[m[K  if (c->black_holes.ti_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1159[m[K[36m[K:[m[K  if (c->hydro.ti_rt_end_min == [01;31m[Ke-[m[K>ti_current &&
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1179[m[K[36m[K:[m[K   * The tim[01;31m[Ke-[m[Kstep task would have set things at this level already */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1257[m[K[36m[K:[m[K * @brief Apply the tim[01;31m[Ke-[m[Kstep limiter to all awaken particles in a cell
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1347[m[K[36m[K:[m[K      /* Bip, bip, bip... wak[01;31m[Ke-[m[Kup time */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1360[m[K[36m[K:[m[K        /* Apply the limiter and get the new end of tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1383[m[K[36m[K:[m[K          /* Register the tim[01;31m[Ke-[m[Kbin */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1411[m[K[36m[K:[m[K * @brief Apply the tim[01;31m[Ke-[m[Kstep synchronization proceduere to all flagged
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1423[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1424[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1425[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1500[m[K[36m[K:[m[K        /* Finish this particle's tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1503[m[K[36m[K:[m[K        /* Get new tim[01;31m[Ke-[m[Kstep */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1513[m[K[36m[K:[m[K        /* Limit the tim[01;31m[Ke-[m[Kbin to what is allowed in this step */
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1514[m[K[36m[K:[m[K        new_time_bin = min(new_time_bin, [01;31m[Ke-[m[K>max_active_bin);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1522[m[K[36m[K:[m[K        tracers_after_timestep(p, xp, [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>physical_constants,
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1523[m[K[36m[K:[m[K                               with_cosmology, [01;31m[Ke-[m[K>cosmology,
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1524[m[K[36m[K:[m[K                               [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Krunner_time_integration.c[m[K[36m[K:[m[K[32m[K1540[m[K[36m[K:[m[K          /* Register the tim[01;31m[Ke-[m[Kbin */
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kset the list of active tasks.
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K    error("Failed to r[01;31m[Ke-[m[Kallocate unlocks.");
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K697[m[K[36m[K:[m[K  const int with_feedback = (s->spac[01;31m[Ke-[m[K>[01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K698[m[K[36m[K:[m[K  const int with_stars = (s->spac[01;31m[Ke-[m[K>[01;31m[Ke-[m[K>policy & engine_policy_stars);
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K699[m[K[36m[K:[m[K  const int with_sinks = (s->spac[01;31m[Ke-[m[K>[01;31m[Ke-[m[K>policy & engine_policy_sinks);
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K      (s->spac[01;31m[Ke-[m[K>[01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1346[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the offsets. */
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1449[m[K[36m[K:[m[K  /* Do we need to r[01;31m[Ke-[m[Kallocate? */
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1889[m[K[36m[K:[m[K *        graph and r[01;31m[Ke-[m[Kcomputes the task wait counters.
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1942[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kwait the tasks. */
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1983[m[K[36m[K:[m[K    t->ti_run = s->spac[01;31m[Ke-[m[K>[01;31m[Ke-[m[K>ti_current;
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K1999[m[K[36m[K:[m[K       any pr[01;31m[Ke-[m[Kprocessing needed. */
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K2618[m[K[36m[K:[m[K  struct scheduler *s = &[01;31m[Ke-[m[K>sched;
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K2624[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), "queue_dump_MPI-step%d.dat_%d", [01;31m[Ke-[m[K>step,
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K2625[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>nodeID);
[35m[Kscheduler.c[m[K[36m[K:[m[K[32m[K2627[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), "queue_dump-step%d.dat", [01;31m[Ke-[m[K>step);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K309[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_compression > 0) {
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K315[m[K[36m[K:[m[K    h_err = H5Pset_deflate(h_prop, [01;31m[Ke-[m[K>snapshot_compression);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K362[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K458[m[K[36m[K:[m[K  /* Open pr[01;31m[Ke-[m[Kexisting data set */
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K510[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K610[m[K[36m[K:[m[K     * from a snapshot by asserting that the current scal[01;31m[Ke-[m[Kfactor (from
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K959[m[K[36m[K:[m[K  const struct part* parts = [01;31m[Ke-[m[K>s->parts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K960[m[K[36m[K:[m[K  const struct xpart* xparts = [01;31m[Ke-[m[K>s->xparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K961[m[K[36m[K:[m[K  const struct gpart* gparts = [01;31m[Ke-[m[K>s->gparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K962[m[K[36m[K:[m[K  const struct spart* sparts = [01;31m[Ke-[m[K>s->sparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K963[m[K[36m[K:[m[K  const struct bpart* bparts = [01;31m[Ke-[m[K>s->bparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K964[m[K[36m[K:[m[K  const struct sink* sinks = [01;31m[Ke-[m[K>s->sinks;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K965[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K966[m[K[36m[K:[m[K  struct output_list* output_list = [01;31m[Ke-[m[K>output_list_snapshots;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K967[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K968[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K969[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K970[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K971[m[K[36m[K:[m[K  const int with_DM_background = [01;31m[Ke-[m[K>s->with_DM_background;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K972[m[K[36m[K:[m[K  const int with_neutrinos = [01;31m[Ke-[m[K>s->with_neutrinos;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K974[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K975[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K979[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K984[m[K[36m[K:[m[K  const size_t Ntot = [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K985[m[K[36m[K:[m[K  const size_t Ngas = [01;31m[Ke-[m[K>s->nr_parts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K986[m[K[36m[K:[m[K  const size_t Nsinks = [01;31m[Ke-[m[K>s->nr_sinks;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K987[m[K[36m[K:[m[K  const size_t Nstars = [01;31m[Ke-[m[K>s->nr_sparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K988[m[K[36m[K:[m[K  const size_t Nblackholes = [01;31m[Ke-[m[K>s->nr_bparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1010[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>snapshot_subdir, [01;31m[Ke-[m[K>snapshot_base_name,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1014[m[K[36m[K:[m[K      fileName, xmfFileName, output_list, [01;31m[Ke-[m[K>snapshot_invoke_stf,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1015[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>stf_output_count, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>snapshot_subdir,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1016[m[K[36m[K:[m[K      snapshot_subdir_name, [01;31m[Ke-[m[K>snapshot_base_name, snapshot_base_name);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1030[m[K[36m[K:[m[K      output_options, current_selection_name, [01;31m[Ke-[m[K>snapshot_subsample,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1031[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>snapshot_subsample_fraction, subsample, subsample_fraction);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1045[m[K[36m[K:[m[K    Ngas_written = io_count_gas_to_write([01;31m[Ke-[m[K>s, /*subsample=*/1,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1047[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1050[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts - [01;31m[Ke-[m[K>s->nr_inhibited_parts - [01;31m[Ke-[m[K>s->nr_extra_parts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1055[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_stars],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1056[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1059[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sparts - [01;31m[Ke-[m[K>s->nr_inhibited_sparts - [01;31m[Ke-[m[K>s->nr_extra_sparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1064[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_black_hole],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1065[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1068[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts - [01;31m[Ke-[m[K>s->nr_inhibited_bparts - [01;31m[Ke-[m[K>s->nr_extra_bparts;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1073[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_sink],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1074[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1077[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sinks - [01;31m[Ke-[m[K>s->nr_inhibited_sinks - [01;31m[Ke-[m[K>s->nr_extra_sinks;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1081[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1082[m[K[36m[K:[m[K      subsample_fraction[swift_type_dark_matter], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1086[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter_background],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1088[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1095[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_neutrino],
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1096[m[K[36m[K:[m[K        subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1128[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>snapshot_output_count == 0) xmf_create_file(xmfFileName);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1134[m[K[36m[K:[m[K    xmf_write_outputheader(xmfFile, fileName, [01;31m[Ke-[m[K>time);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1151[m[K[36m[K:[m[K    const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1152[m[K[36m[K:[m[K    const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1153[m[K[36m[K:[m[K                           [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1154[m[K[36m[K:[m[K                           [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1161[m[K[36m[K:[m[K    io_write_attribute(h_grp, "Redshift", DOUBLE, &[01;31m[Ke-[m[K>cosmology->z, 1);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1162[m[K[36m[K:[m[K    io_write_attribute(h_grp, "Scal[01;31m[Ke-[m[Kfactor", DOUBLE, &[01;31m[Ke-[m[K>cosmology->a, 1);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1164[m[K[36m[K:[m[K    io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1170[m[K[36m[K:[m[K    /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1172[m[K[36m[K:[m[K      io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1174[m[K[36m[K:[m[K          cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1178[m[K[36m[K:[m[K      io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1213[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1235[m[K[36m[K:[m[K    ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1290[m[K[36m[K:[m[K  io_write_cell_offsets(h_grp_cells, [01;31m[Ke-[m[K>s->cdim, [01;31m[Ke-[m[K>s->dim, [01;31m[Ke-[m[K>s->cells_top,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1291[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->width, mpi_rank,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1293[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>snapshot_output_count, N_total, offset, numFields,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1379[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>snapshot_output_count, Ngas, Ngas_written);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1397[m[K[36m[K:[m[K              io_select_dm_fields(gparts, [01;31m[Ke-[m[K>s->gpart_group_data, with_fof,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1424[m[K[36m[K:[m[K                  gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1427[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_written, with_stf);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1459[m[K[36m[K:[m[K                gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1463[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_background, with_stf);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1495[m[K[36m[K:[m[K                gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1498[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_neutrino, with_stf);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1529[m[K[36m[K:[m[K                  subsample_fraction[swift_type_sink], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1563[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>snapshot_output_count, Nstars, Nstars_written);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1596[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>snapshot_output_count, Nblackholes, Nblackholes_written);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1613[m[K[36m[K:[m[K                (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1624[m[K[36m[K:[m[K                  [01;31m[Ke-[m[K>verbose);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1669[m[K[36m[K:[m[K    xmf_write_outputfooter(xmfFile, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>time);
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1672[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_output_count++;
[35m[Kserial_io.c[m[K[36m[K:[m[K[32m[K1673[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_invoke_stf) [01;31m[Ke-[m[K>stf_output_count++;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K312[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_compression > 0) {
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K318[m[K[36m[K:[m[K    h_err = H5Pset_deflate(h_prop, [01;31m[Ke-[m[K>snapshot_compression);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K370[m[K[36m[K:[m[K      factor * pow([01;31m[Ke-[m[K>cosmology->a, props.scale_factor_exponent));
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K418[m[K[36m[K:[m[K * @param a The current value of the scal[01;31m[Ke-[m[Kfactor.
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K503[m[K[36m[K:[m[K   * from a snapshot by asserting that the current scal[01;31m[Ke-[m[Kfactor (from
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K811[m[K[36m[K:[m[K  const struct part* parts = [01;31m[Ke-[m[K>s->parts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K812[m[K[36m[K:[m[K  const struct xpart* xparts = [01;31m[Ke-[m[K>s->xparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K813[m[K[36m[K:[m[K  const struct gpart* gparts = [01;31m[Ke-[m[K>s->gparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K814[m[K[36m[K:[m[K  const struct spart* sparts = [01;31m[Ke-[m[K>s->sparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K815[m[K[36m[K:[m[K  const struct bpart* bparts = [01;31m[Ke-[m[K>s->bparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K816[m[K[36m[K:[m[K  const struct sink* sinks = [01;31m[Ke-[m[K>s->sinks;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K817[m[K[36m[K:[m[K  struct output_options* output_options = [01;31m[Ke-[m[K>output_options;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K818[m[K[36m[K:[m[K  struct output_list* output_list = [01;31m[Ke-[m[K>output_list_snapshots;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K819[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K820[m[K[36m[K:[m[K  const int with_cooling = [01;31m[Ke-[m[K>policy & engine_policy_cooling;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K821[m[K[36m[K:[m[K  const int with_temperature = [01;31m[Ke-[m[K>policy & engine_policy_temperature;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K822[m[K[36m[K:[m[K  const int with_fof = [01;31m[Ke-[m[K>policy & engine_policy_fof;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K823[m[K[36m[K:[m[K  const int with_DM_background = [01;31m[Ke-[m[K>s->with_DM_background;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K824[m[K[36m[K:[m[K  const int with_neutrinos = [01;31m[Ke-[m[K>s->with_neutrinos;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K826[m[K[36m[K:[m[K  const int with_stf = ([01;31m[Ke-[m[K>policy & engine_policy_structure_finding) &&
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K827[m[K[36m[K:[m[K                       ([01;31m[Ke-[m[K>s->gpart_group_data != NULL);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K831[m[K[36m[K:[m[K  const int with_rt = [01;31m[Ke-[m[K>policy & engine_policy_rt;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K834[m[K[36m[K:[m[K  const size_t Ntot = [01;31m[Ke-[m[K>s->nr_gparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K835[m[K[36m[K:[m[K  const size_t Ngas = [01;31m[Ke-[m[K>s->nr_parts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K836[m[K[36m[K:[m[K  const size_t Nstars = [01;31m[Ke-[m[K>s->nr_sparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K837[m[K[36m[K:[m[K  const size_t Nsinks = [01;31m[Ke-[m[K>s->nr_sinks;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K838[m[K[36m[K:[m[K  const size_t Nblackholes = [01;31m[Ke-[m[K>s->nr_bparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K                              [01;31m[Ke-[m[K>snapshot_subdir, [01;31m[Ke-[m[K>snapshot_base_name,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K861[m[K[36m[K:[m[K      fileName, xmfFileName, output_list, [01;31m[Ke-[m[K>snapshot_invoke_stf,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K862[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>stf_output_count, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>snapshot_subdir,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K863[m[K[36m[K:[m[K      snapshot_subdir_name, [01;31m[Ke-[m[K>snapshot_base_name, snapshot_base_name);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K877[m[K[36m[K:[m[K      output_options, current_selection_name, [01;31m[Ke-[m[K>snapshot_subsample,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>snapshot_subsample_fraction, subsample, subsample_fraction);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K888[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_output_count == 0) xmf_create_file(xmfFileName);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K895[m[K[36m[K:[m[K  xmf_write_outputheader(xmfFile, fileName, [01;31m[Ke-[m[K>time);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[K    Ngas_written = io_count_gas_to_write([01;31m[Ke-[m[K>s, /*subsample=*/1,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K904[m[K[36m[K:[m[K                                         [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K907[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_parts - [01;31m[Ke-[m[K>s->nr_inhibited_parts - [01;31m[Ke-[m[K>s->nr_extra_parts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K912[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_stars],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K913[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K916[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sparts - [01;31m[Ke-[m[K>s->nr_inhibited_sparts - [01;31m[Ke-[m[K>s->nr_extra_sparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K921[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_black_hole],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K922[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K925[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_bparts - [01;31m[Ke-[m[K>s->nr_inhibited_bparts - [01;31m[Ke-[m[K>s->nr_extra_bparts;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K930[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, /*subsample=*/1, subsample_fraction[swift_type_sink],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K931[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K934[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s->nr_sinks - [01;31m[Ke-[m[K>s->nr_inhibited_sinks - [01;31m[Ke-[m[K>s->nr_extra_sinks;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K938[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K939[m[K[36m[K:[m[K      subsample_fraction[swift_type_dark_matter], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K943[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_dark_matter_background],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K945[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K952[m[K[36m[K:[m[K        [01;31m[Ke-[m[K>s, subsample[swift_type_neutrino],
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K953[m[K[36m[K:[m[K        subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K980[m[K[36m[K:[m[K  const double dblTime = [01;31m[Ke-[m[K>time * factor_time;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K981[m[K[36m[K:[m[K  const double dim[3] = {[01;31m[Ke-[m[K>s->dim[0] * factor_length,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K982[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[1] * factor_length,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K983[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>s->dim[2] * factor_length};
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K990[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Redshift", DOUBLE, &[01;31m[Ke-[m[K>cosmology->z, 1);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K991[m[K[36m[K:[m[K  io_write_attribute(h_grp, "Scal[01;31m[Ke-[m[Kfactor", DOUBLE, &[01;31m[Ke-[m[K>cosmology->a, 1);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K993[m[K[36m[K:[m[K  io_write_attribute_s(h_grp, "RunName", [01;31m[Ke-[m[K>run_name);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K999[m[K[36m[K:[m[K  /* Write out the tim[01;31m[Ke-[m[Kbase */
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1001[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dloga", [01;31m[Ke-[m[K>time_base);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1002[m[K[36m[K:[m[K    const double delta_t = cosmology_get_timebase([01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>ti_current);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1006[m[K[36m[K:[m[K    io_write_attribute_d(h_grp, "TimeBase_dt", [01;31m[Ke-[m[K>time_base);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1047[m[K[36m[K:[m[K                     [01;31m[Ke-[m[K>s->initial_mean_mass_particles, swift_type_count);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1069[m[K[36m[K:[m[K  ic_info_write_hdf5([01;31m[Ke-[m[K>ics_metadata, h_file);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1080[m[K[36m[K:[m[K  io_write_cell_offsets(h_grp, [01;31m[Ke-[m[K>s->cdim, [01;31m[Ke-[m[K>s->dim, [01;31m[Ke-[m[K>s->cells_top,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1081[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>s->nr_cells, [01;31m[Ke-[m[K>s->width, [01;31m[Ke-[m[K>nodeID,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1083[m[K[36m[K:[m[K                        [01;31m[Ke-[m[K>snapshot_output_count, N_total, global_offsets,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1163[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ngas, Ngas_written);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1180[m[K[36m[K:[m[K          io_select_dm_fields(gparts, [01;31m[Ke-[m[K>s->gpart_group_data, with_fof,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1206[m[K[36m[K:[m[K              gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1209[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_written, with_stf);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1240[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1244[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>snapshot_output_count, Ntot, Ndm_background, with_stf);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1275[m[K[36m[K:[m[K            gparts, [01;31m[Ke-[m[K>s->gpart_group_data, gparts_written,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1277[m[K[36m[K:[m[K            subsample_fraction[swift_type_neutrino], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1309[m[K[36m[K:[m[K              subsample_fraction[swift_type_sink], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1342[m[K[36m[K:[m[K              subsample_fraction[swift_type_stars], [01;31m[Ke-[m[K>snapshot_output_count,
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1376[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>snapshot_output_count, Nblackholes, Nblackholes_written);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1393[m[K[36m[K:[m[K            (enum part_type)ptype, [01;31m[Ke-[m[K>verbose);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1404[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>verbose);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1435[m[K[36m[K:[m[K  xmf_write_outputfooter(xmfFile, [01;31m[Ke-[m[K>snapshot_output_count, [01;31m[Ke-[m[K>time);
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1442[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>snapshot_output_count++;
[35m[Ksingle_io.c[m[K[36m[K:[m[K[32m[K1443[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>snapshot_invoke_stf) [01;31m[Ke-[m[K>stf_output_count++;
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K    {5.773502691896258[01;31m[Ke-[m[K01, 5.773502691896258[01;31m[Ke-[m[K01, 5.773502691896258[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K    {7.071067811865475[01;31m[Ke-[m[K01, 7.071067811865475[01;31m[Ke-[m[K01, 0.0},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K    {5.773502691896258[01;31m[Ke-[m[K01, 5.773502691896258[01;31m[Ke-[m[K01, -5.773502691896258[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K    {7.071067811865475[01;31m[Ke-[m[K01, 0.0, 7.071067811865475[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K    {7.071067811865475[01;31m[Ke-[m[K01, 0.0, -7.071067811865475[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K    {5.773502691896258[01;31m[Ke-[m[K01, -5.773502691896258[01;31m[Ke-[m[K01, 5.773502691896258[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K    {7.071067811865475[01;31m[Ke-[m[K01, -7.071067811865475[01;31m[Ke-[m[K01, 0.0},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K51[m[K[36m[K:[m[K    {5.773502691896258[01;31m[Ke-[m[K01, -5.773502691896258[01;31m[Ke-[m[K01, -5.773502691896258[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K52[m[K[36m[K:[m[K    {0.0, 7.071067811865475[01;31m[Ke-[m[K01, 7.071067811865475[01;31m[Ke-[m[K01},
[35m[Ksort_part.h[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[K    {0.0, 7.071067811865475[01;31m[Ke-[m[K01, -7.071067811865475[01;31m[Ke-[m[K01},
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K    for (int k = 0; k < s->[01;31m[Ke-[m[K>nr_proxies; k++) {
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K      for (int j = 0; j < s->[01;31m[Ke-[m[K>proxies[k].nr_cells_in; j++) {
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K        cell_unlink_foreign_particles(s->[01;31m[Ke-[m[K>proxies[k].cells_in[j]);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Korders the particles in each cell such that the extra particles
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K212[m[K[36m[K:[m[K * for on-th[01;31m[Ke-[m[Kfly creation are located at the end of their respective cells.
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K222[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the gas particles */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_reorder_extra_parts_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K228[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the gravity particles */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_reorder_extra_gparts_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K234[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the star particles */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_reorder_extra_sparts_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the black hole particles */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the sink particles */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K246[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_reorder_extra_sinks_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>nodeID == 0) message("Cleaning up unreasonable values of h");
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K277[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_sanitize_mapper, s->cells_top,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K486[m[K[36m[K:[m[K      s->multipoles_sub = cells[j]->grav.multipol[01;31m[Ke-[m[K>next;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K * This assumes the list has been pr[01;31m[Ke-[m[Kallocated at a regrid.
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K555[m[K[36m[K:[m[K        (c->grav.multipole != NULL && c->grav.multipol[01;31m[Ke-[m[K>m_pole.M_000 > 0.f);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K562[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose) {
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K569[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K722[m[K[36m[K:[m[K * We copy the baryon particle properties to the #gpart typ[01;31m[Ke-[m[Kby-type.
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K731[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_synchronize_part_positions_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K736[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_synchronize_spart_positions_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K741[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_synchronize_bpart_positions_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K746[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_synchronize_sink_positions_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K750[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K    /* Skip extra buffer sparts for on-th[01;31m[Ke-[m[Kfly creation */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K770[m[K[36m[K:[m[K        get_integer_time_begin([01;31m[Ke-[m[K>ti_current - 1, sp->time_bin);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K773[m[K[36m[K:[m[K    /* Get particle tim[01;31m[Ke-[m[Kstep */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K777[m[K[36m[K:[m[K          cosmology_get_delta_time([01;31m[Ke-[m[K>cosmology, ti_begin, ti_begin + ti_step);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K779[m[K[36m[K:[m[K      dt_star = get_timestep(sp->time_bin, [01;31m[Ke-[m[K>time_base);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K784[m[K[36m[K:[m[K        stars_compute_age(sp, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time, with_cosmology);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K786[m[K[36m[K:[m[K    rt_init_star_after_zeroth_step(sp, [01;31m[Ke-[m[K>time, star_age_end_of_step, dt_star,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K787[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>rt_props, [01;31m[Ke-[m[K>physical_constants,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K788[m[K[36m[K:[m[K                                   [01;31m[Ke-[m[K>internal_units);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K799[m[K[36m[K:[m[K  const struct rt_props *restrict rt_props = [01;31m[Ke-[m[K>rt_props;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K801[m[K[36m[K:[m[K  /* Loop over all the particles ignoring the extra buffer ones for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K830[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K838[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K852[m[K[36m[K:[m[K  const struct cosmology *cosmo = s->[01;31m[Ke-[m[K>cosmology;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K853[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = s->[01;31m[Ke-[m[K>hydro_properties;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K858[m[K[36m[K:[m[K  /* Loop over all the particles ignoring the extra buffer ones for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K878[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_convert_quantities_mapper, s->parts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K891[m[K[36m[K:[m[K  const int with_rt = ([01;31m[Ke-[m[K>policy & engine_policy_rt);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K894[m[K[36m[K:[m[K  const struct rt_props *restrict rt_props = [01;31m[Ke-[m[K>rt_props;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K895[m[K[36m[K:[m[K  const struct phys_const *restrict phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K896[m[K[36m[K:[m[K  const struct unit_system *restrict iu = [01;31m[Ke-[m[K>internal_units;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K897[m[K[36m[K:[m[K  const struct cosmology *restrict cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K901[m[K[36m[K:[m[K  /* Loop over all the particles ignoring the extra buffer ones for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K921[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_convert_rt_quantities_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1039[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_collect_sum_part_mass, s->parts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1042[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_collect_sum_gpart_mass, s->gparts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1045[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_collect_sum_spart_mass, s->sparts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1048[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_collect_sum_sink_mass, s->sinks,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1051[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_collect_sum_bpart_mass, s->bparts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K1323[m[K[36m[K:[m[K    message("R[01;31m[Ke-[m[Kscaling smoothing lengths by a factor %e", scaling);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2100[m[K[36m[K:[m[K        fabs(Omega_particles_cdm - cosmo->Omega_cdm) > 1[01;31m[Ke-[m[K3)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2108[m[K[36m[K:[m[K        fabs(Omega_particles_b - cosmo->Omega_b) > 1[01;31m[Ke-[m[K3)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2114[m[K[36m[K:[m[K    if (check_neutrinos && fabs(Omega_particles_nu - cosmo->Omega_nu_0) > 1[01;31m[Ke-[m[K3)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2121[m[K[36m[K:[m[K    if (fabs(Omega_particles_m - Omega_m) > 1[01;31m[Ke-[m[K3)
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2206[m[K[36m[K:[m[K * @brief Checks that all particles and local cells have a non-zero tim[01;31m[Ke-[m[Kstep.
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2216[m[K[36m[K:[m[K      cell_check_timesteps(&s->cells_top[i], s->[01;31m[Ke-[m[K>ti_current,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2217[m[K[36m[K:[m[K                           s->[01;31m[Ke-[m[K>max_active_bin);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2235[m[K[36m[K:[m[K      (s->[01;31m[Ke-[m[K>policy & engine_policy_timestep_limiter);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2236[m[K[36m[K:[m[K  const int with_timestep_sync = (s->[01;31m[Ke-[m[K>policy & engine_policy_timestep_sync);
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2243[m[K[36m[K:[m[K    if (parts[k].time_bin < 0) error("Particle has negative tim[01;31m[Ke-[m[Kbin!");
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2256[m[K[36m[K:[m[K        error("Gpart not on the same tim[01;31m[Ke-[m[Kbin as part %i %i", parts[k].time_bin,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2276[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_check_limiter_mapper, s->parts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2344[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_check_part_swallow_mapper, s->parts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2348[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_check_bpart_swallow_mapper, s->bparts,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2383[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_check_sort_flags_mapper,
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2525[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kcreate a space struct and its contents from the given FILE
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2663[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink the parts. */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2667[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink the sinks. */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2671[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink the sparts. */
[35m[Kspace.c[m[K[36m[K:[m[K[32m[K2675[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Klink the bparts. */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K      /* Is this a plac[01;31m[Ke-[m[Kholder for on-th[01;31m[Ke-[m[Kfly creation? */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K      /* Is this a plac[01;31m[Ke-[m[Kholder for on-th[01;31m[Ke-[m[Kfly creation? */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K404[m[K[36m[K:[m[K      /* Is this a plac[01;31m[Ke-[m[Kholder for on-th[01;31m[Ke-[m[Kfly creation? */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K532[m[K[36m[K:[m[K      /* Is this a plac[01;31m[Ke-[m[Kholder for on-th[01;31m[Ke-[m[Kfly creation? */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K660[m[K[36m[K:[m[K      /* Is this a plac[01;31m[Ke-[m[Kholder for on-th[01;31m[Ke-[m[Kfly creation? */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K708[m[K[36m[K:[m[K * @param count_extra_parts (return) The number of #part for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K718[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the counters */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K738[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_parts_get_cell_index_mapper, s->parts,
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K * @param count_extra_gparts (return) The number of #gpart for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K769[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the counters */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K789[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_gparts_get_cell_index_mapper,
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K810[m[K[36m[K:[m[K * @param count_extra_sparts (return) The number of #spart for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K820[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the counters */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K840[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_sparts_get_cell_index_mapper,
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K859[m[K[36m[K:[m[K * @param count_extra_sinks (return) The number of #sink for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K869[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the counters */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K889[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_sinks_get_cell_index_mapper, s->sinks,
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K910[m[K[36m[K:[m[K * @param count_extra_bparts (return) The number of #bpart for on-th[01;31m[Ke-[m[Kfly
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K920[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kset the counters */
[35m[Kspace_cell_index.c[m[K[36m[K:[m[K[32m[K940[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_bparts_get_cell_index_mapper,
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K36[m[K[36m[K:[m[K * @brief Allocate memory for the extra particles used for on-th[01;31m[Ke-[m[Kfly creation.
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K39[m[K[36m[K:[m[K * pr[01;31m[Ke-[m[Kallocated memory inot extra particles.
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K  const int local_nodeID = s->[01;31m[Ke-[m[K>nodeID;
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K        message("R[01;31m[Ke-[m[Kallocating gparts array from %zd to %zd", s->size_gparts,
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K171[m[K[36m[K:[m[K                                      &s->[01;31m[Ke-[m[K>threadpool);
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K241[m[K[36m[K:[m[K        message("R[01;31m[Ke-[m[Kallocating parts array from %zd to %zd", s->size_parts,
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K332[m[K[36m[K:[m[K        message("R[01;31m[Ke-[m[Kallocating sinks array from %zd to %zd", s->size_sinks,
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K414[m[K[36m[K:[m[K        message("R[01;31m[Ke-[m[Kallocating sparts array from %zd to %zd", s->size_sparts,
[35m[Kspace_extras.c[m[K[36m[K:[m[K[32m[K496[m[K[36m[K:[m[K        message("R[01;31m[Ke-[m[Kallocating bparts array from %zd to %zd", s->size_bparts,
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[K  const struct cosmology *cosmo = s->[01;31m[Ke-[m[K>cosmology;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K  const struct phys_const *phys_const = s->[01;31m[Ke-[m[K>physical_constants;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K  const struct unit_system *us = s->[01;31m[Ke-[m[K>internal_units;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = s->[01;31m[Ke-[m[K>hydro_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  const float hydro_h_min_ratio = [01;31m[Ke-[m[K>hydro_properties->h_min_ratio;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K  const struct gravity_props *grav_props = s->[01;31m[Ke-[m[K>gravity_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K  const int with_gravity = [01;31m[Ke-[m[K>policy & engine_policy_self_gravity;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K  const struct chemistry_global_data *chemistry = [01;31m[Ke-[m[K>chemistry;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  const struct star_formation *star_formation = [01;31m[Ke-[m[K>star_formation;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K  const struct cooling_function_data *cool_func = [01;31m[Ke-[m[K>cooling_func;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K  const struct rt_props *rt_props = [01;31m[Ke-[m[K>rt_props;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K    /* Initialise the tim[01;31m[Ke-[m[Kintegration check variables */
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K170[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_first_init_parts_mapper, s->parts,
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K  const struct cosmology *cosmo = s->[01;31m[Ke-[m[K>cosmology;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K187[m[K[36m[K:[m[K  const struct gravity_props *grav_props = s->[01;31m[Ke-[m[K>gravity_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K219[m[K[36m[K:[m[K    /* Initialise the tim[01;31m[Ke-[m[Kintegration check variables */
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_first_init_gparts_mapper, s->gparts,
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K  const struct chemistry_global_data *chemistry = [01;31m[Ke-[m[K>chemistry;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  const int with_feedback = ([01;31m[Ke-[m[K>policy & engine_policy_feedback);
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K263[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K264[m[K[36m[K:[m[K  const struct stars_props *stars_properties = [01;31m[Ke-[m[K>stars_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K                           [01;31m[Ke-[m[K>time);
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K320[m[K[36m[K:[m[K    /* Initialise the tim[01;31m[Ke-[m[Kintegration check variables */
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K335[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_first_init_sparts_mapper, s->sparts,
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K  const struct black_holes_props *props = [01;31m[Ke-[m[K>black_holes_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K358[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K    /* Initialise the tim[01;31m[Ke-[m[Kintegration check variables */
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K421[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_first_init_bparts_mapper, s->bparts,
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K436[m[K[36m[K:[m[K  const struct sink_props *props = [01;31m[Ke-[m[K>sink_properties;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K472[m[K[36m[K:[m[K    /* Initialise the tim[01;31m[Ke-[m[Kintegration check variables */
[35m[Kspace_first_init.c[m[K[36m[K:[m[K[32m[K487[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_first_init_sinks_mapper, s->sinks,
[35m[Kspace.h[m[K[36m[K:[m[K[32m[K227[m[K[36m[K:[m[K  /*! Number of extra #part we allocated (for on-th[01;31m[Ke-[m[Kfly creation) */
[35m[Kspace.h[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K  /*! Number of extra #gpart we allocated (for on-th[01;31m[Ke-[m[Kfly creation) */
[35m[Kspace.h[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K  /*! Number of extra #spart we allocated (for on-th[01;31m[Ke-[m[Kfly creation) */
[35m[Kspace.h[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K  /*! Number of extra #bpart we allocated (for on-th[01;31m[Ke-[m[Kfly creation) */
[35m[Kspace.h[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K  /*! Number of extra #sink we allocated (for on-th[01;31m[Ke-[m[Kfly creation) */
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K  const struct hydro_space *restrict hs = &[01;31m[Ke-[m[K>s->hs;
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K  size_t ind = parts - [01;31m[Ke-[m[K>s->parts;
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K  struct xpart *restrict xparts = [01;31m[Ke-[m[K>s->xparts + ind;
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K    chemistry_init_part(&parts[k], [01;31m[Ke-[m[K>chemistry);
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K    star_formation_init_part(&parts[k], [01;31m[Ke-[m[K>star_formation);
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K    tracers_after_init(&parts[k], &xparts[k], [01;31m[Ke-[m[K>internal_units,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>physical_constants, with_cosmology, [01;31m[Ke-[m[K>cosmology,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>time);
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_init_parts_mapper, s->parts,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_init_gparts_mapper, s->gparts,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K135[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_init_sparts_mapper, s->sparts,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K162[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_init_bparts_mapper, s->bparts,
[35m[Kspace_init.c[m[K[36m[K:[m[K[32m[K189[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_init_sinks_mapper, s->sinks,
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kbuild the top-level cells as well as the whole hierarchy.
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>nodeID == 0 || verbose) message("(re)building space");
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kgrid if necessary, or just r[01;31m[Ke-[m[Kset the cell data. */
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K  const integertime_t ti_current = (s->e != NULL) ? s->[01;31m[Ke-[m[K>ti_current : 0;
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K72[m[K[36m[K:[m[K  const int local_nodeID = s->[01;31m[Ke-[m[K>nodeID;
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K  if (!repartitioned && (s->[01;31m[Ke-[m[K>nr_nodes > 1 || count_inhibited_parts > 0)) {
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  if (!repartitioned && (s->[01;31m[Ke-[m[K>nr_nodes > 1 || count_inhibited_sparts > 0)) {
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K310[m[K[36m[K:[m[K  if (!repartitioned && (s->[01;31m[Ke-[m[K>nr_nodes > 1 || count_inhibited_bparts > 0)) {
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K360[m[K[36m[K:[m[K  if (!repartitioned && (s->[01;31m[Ke-[m[K>nr_nodes > 1 || count_inhibited_sinks > 0)) {
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K413[m[K[36m[K:[m[K  if (!repartitioned && (s->[01;31m[Ke-[m[K>nr_nodes > 1 || count_inhibited_gparts > 0)) {
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K485[m[K[36m[K:[m[K  /* Exchange the strays, note that this potentially r[01;31m[Ke-[m[Kallocates
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K527[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the index array for the parts if needed.. */
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K538[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the index array for the sparts if needed.. */
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K549[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the index array for the bparts if needed.. */
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K799[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Kallocate the index array for the gparts if needed.. */
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K817[m[K[36m[K:[m[K    if (cells_top[g_index[k]].nodeID != s->[01;31m[Ke-[m[K>nodeID)
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K969[m[K[36m[K:[m[K  /* R[01;31m[Ke-[m[Korder the extra particles such that they are at the end of their cell's
[35m[Kspace_rebuild.c[m[K[36m[K:[m[K[32m[K981[m[K[36m[K:[m[K      cell_check_multipole(&s->cells_top[k], s->[01;31m[Ke-[m[K>gravity_properties);
[35m[Kspace_recycle.c[m[K[36m[K:[m[K[32m[K62[m[K[36m[K:[m[K          c->progeny[k]->grav.multipol[01;31m[Ke-[m[K>next = *multipole_rec_begin;
[35m[Kspace_recycle.c[m[K[36m[K:[m[K[32m[K251[m[K[36m[K:[m[K    c->grav.multipol[01;31m[Ke-[m[K>next = s->multipoles_sub;
[35m[Kspace_recycle.c[m[K[36m[K:[m[K[32m[K333[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_rebuild_recycle_mapper, s->cells_top,
[35m[Kspace_recycle.c[m[K[36m[K:[m[K[32m[K338[m[K[36m[K:[m[K  if (s->[01;31m[Ke-[m[K>verbose)
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kbuild the top-level cell grid.
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K  const integertime_t ti_current = (s->e != NULL) ? s->[01;31m[Ke-[m[K>ti_current : 0;
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K148[m[K[36m[K:[m[K        " - the (minimal) tim[01;31m[Ke-[m[Kstep is too large leading to particles with "
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K        "box sizes per tim[01;31m[Ke-[m[Kstep.\n");
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K190[m[K[36m[K:[m[K  /* Do we need to r[01;31m[Ke-[m[Kbuild the upper-level cells? */
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K215[m[K[36m[K:[m[K    if (s->e != NULL) scheduler_free_tasks(&s->[01;31m[Ke-[m[K>sched);
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K343[m[K[36m[K:[m[K      if (s->[01;31m[Ke-[m[K>nodeID == 0)
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K358[m[K[36m[K:[m[K        partition_initial_partition(&initial_partition, s->[01;31m[Ke-[m[K>nodeID,
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K359[m[K[36m[K:[m[K                                    s->[01;31m[Ke-[m[K>nr_nodes, s);
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K362[m[K[36m[K:[m[K      /* R[01;31m[Ke-[m[Kdistribute the particles to their new nodes. */
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K378[m[K[36m[K:[m[K      partition_restore_celllist(s, s->[01;31m[Ke-[m[K>reparttype);
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K380[m[K[36m[K:[m[K      /* Now r[01;31m[Ke-[m[Kdistribute the particles, should just add to cells? */
[35m[Kspace_regrid.c[m[K[36m[K:[m[K[32m[K391[m[K[36m[K:[m[K  }      /* r[01;31m[Ke-[m[Kbuild upper-level cells? */
[35m[Kspace_sort.c[m[K[36m[K:[m[K[32m[K281[m[K[36m[K:[m[K * @param parts Global #part array for r[01;31m[Ke-[m[Klinking.
[35m[Kspace_sort.c[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K * @param sinks Global #sink array for r[01;31m[Ke-[m[Klinking.
[35m[Kspace_sort.c[m[K[36m[K:[m[K[32m[K283[m[K[36m[K:[m[K * @param sparts Global #spart array for r[01;31m[Ke-[m[Klinking.
[35m[Kspace_sort.c[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K * @param bparts Global #bpart array for r[01;31m[Ke-[m[Klinking.
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K95[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K373[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[0] = CoM[0] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K374[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[1] = CoM[1] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K375[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM[2] = CoM[2] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K376[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[0] = vel[0] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K377[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[1] = vel[1] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K378[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.vel[2] = vel[2] * inv_mass;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[0] = max_delta_vel[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K382[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[1] = max_delta_vel[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.max_delta_vel[2] = max_delta_vel[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K384[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[0] = min_delta_vel[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K385[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[1] = min_delta_vel[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K386[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>m_pole.min_delta_vel[2] = min_delta_vel[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K394[m[K[36m[K:[m[K          const struct multipole *m = &cp->grav.multipol[01;31m[Ke-[m[K>m_pole;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K          gravity_M2M(&temp, m, c->grav.multipol[01;31m[Ke-[m[K>CoM,
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K                      cp->grav.multipol[01;31m[Ke-[m[K>CoM);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K399[m[K[36m[K:[m[K          gravity_multipole_add(&c->grav.multipol[01;31m[Ke-[m[K>m_pole, &temp);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K              c->grav.multipol[01;31m[Ke-[m[K>CoM[0] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K405[m[K[36m[K:[m[K              c->grav.multipol[01;31m[Ke-[m[K>CoM[1] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K407[m[K[36m[K:[m[K              c->grav.multipol[01;31m[Ke-[m[K>CoM[2] - cp->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K409[m[K[36m[K:[m[K          r_max = max(r_max, cp->grav.multipol[01;31m[Ke-[m[K>r_max + sqrt(r2));
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K415[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[0] > c->loc[0] + c->width[0] / 2.
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K416[m[K[36m[K:[m[K              ? c->grav.multipol[01;31m[Ke-[m[K>CoM[0] - c->loc[0]
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K              : c->loc[0] + c->width[0] - c->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K419[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[1] > c->loc[1] + c->width[1] / 2.
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K420[m[K[36m[K:[m[K              ? c->grav.multipol[01;31m[Ke-[m[K>CoM[1] - c->loc[1]
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K421[m[K[36m[K:[m[K              : c->loc[1] + c->width[1] - c->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[2] > c->loc[2] + c->width[2] / 2.
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K              ? c->grav.multipol[01;31m[Ke-[m[K>CoM[2] - c->loc[2]
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K              : c->loc[2] + c->width[2] - c->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>r_max = min(r_max, sqrt(dx * dx + dy * dy + dz * dz));
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K431[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>r_max_rebuild = c->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K432[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[0] = c->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K433[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[1] = c->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[2] = c->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K437[m[K[36m[K:[m[K      gravity_multipole_compute_power(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K475[m[K[36m[K:[m[K      /* When does this particle's tim[01;31m[Ke-[m[Kstep start and end? */
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K520[m[K[36m[K:[m[K      /* When does this particle's tim[01;31m[Ke-[m[Kstep start and end? */
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K539[m[K[36m[K:[m[K      /* When does this particle's tim[01;31m[Ke-[m[Kstep start and end? */
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K568[m[K[36m[K:[m[K      /* When does this particle's tim[01;31m[Ke-[m[Kstep start and end? */
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K597[m[K[36m[K:[m[K      /* When does this particle's tim[01;31m[Ke-[m[Kstep start and end? */
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K622[m[K[36m[K:[m[K                    [01;31m[Ke-[m[K>gravity_properties);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K625[m[K[36m[K:[m[K        gravity_multipole_compute_power(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K632[m[K[36m[K:[m[K        gravity_multipole_init(&c->grav.multipol[01;31m[Ke-[m[K>m_pole);
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K634[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[0] = c->loc[0] + c->width[0] / 2.;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K635[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[1] = c->loc[1] + c->width[1] / 2.;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K636[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>CoM[2] = c->loc[2] + c->width[2] / 2.;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K637[m[K[36m[K:[m[K          c->grav.multipol[01;31m[Ke-[m[K>r_max = 0.;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K642[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>r_max_rebuild = c->grav.multipol[01;31m[Ke-[m[K>r_max;
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K643[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[0] = c->grav.multipol[01;31m[Ke-[m[K>CoM[0];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K644[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[1] = c->grav.multipol[01;31m[Ke-[m[K>CoM[1];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K645[m[K[36m[K:[m[K      c->grav.multipol[01;31m[Ke-[m[K>CoM_rebuild[2] = c->grav.multipol[01;31m[Ke-[m[K>CoM[2];
[35m[Kspace_split.c[m[K[36m[K:[m[K[32m[K749[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, space_split_mapper,
[35m[Kspace_unique_id.c[m[K[36m[K:[m[K[32m[K57[m[K[36m[K:[m[K  int *all_requires = (int *)malloc(sizeof(int) * [01;31m[Ke-[m[K>nr_nodes);
[35m[Kspace_unique_id.c[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_nodes; i++) {
[35m[Kspace_unique_id.c[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K    if (i < [01;31m[Ke-[m[K>nodeID) {
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K        (spi->has_done_feedback || [01;31m[Ke-[m[K>step <= 0)) {
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K165[m[K[36m[K:[m[K  threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stars_exact_density_compute_mapper,
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K * values obtained via the brut[01;31m[Ke-[m[Kforce summation.
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K195[m[K[36m[K:[m[K  const double eta = [01;31m[Ke-[m[K>stars_properties->eta_neighbours;
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K      N_ngb_target + 2. * [01;31m[Ke-[m[K>stars_properties->delta_neighbours;
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K201[m[K[36m[K:[m[K      N_ngb_target - 2. * [01;31m[Ke-[m[K>stars_properties->delta_neighbours;
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K205[m[K[36m[K:[m[K  sprintf(file_name_swift, "stars_checks_swift_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K214[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>stars_properties->delta_neighbours);
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K231[m[K[36m[K:[m[K        (spi->has_done_feedback || [01;31m[Ke-[m[K>step <= 0)) {
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K241[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K249[m[K[36m[K:[m[K  sprintf(file_name_exact, "stars_checks_exact_step%.4d.dat", [01;31m[Ke-[m[K>step);
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K258[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>stars_properties->delta_neighbours);
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K280[m[K[36m[K:[m[K        (spi->has_done_feedback || [01;31m[Ke-[m[K>step <= 0)) {
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K314[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K336[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kstars.c[m[K[36m[K:[m[K[32m[K337[m[K[36m[K:[m[K    message("Writting brut[01;31m[Ke-[m[Kforce density files took %.3f %s. ",
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K  const int with_ext_grav = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K  const int with_self_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K138[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K139[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K140[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K183[m[K[36m[K:[m[K    const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K    const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K    const struct entropy_floor_properties *floor_props = [01;31m[Ke-[m[K>entropy_floor;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K    const struct cooling_function_data *cooling = [01;31m[Ke-[m[K>cooling_func;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K260[m[K[36m[K:[m[K  const int with_ext_grav = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K  const int with_self_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K267[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K268[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K269[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K  const int with_ext_grav = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K  const int with_self_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K356[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K357[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K  const int with_ext_grav = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K435[m[K[36m[K:[m[K  const int with_self_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K436[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K441[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K530[m[K[36m[K:[m[K  const int with_ext_grav = ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K531[m[K[36m[K:[m[K  const int with_self_grav = ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity);
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K532[m[K[36m[K:[m[K  const double time = [01;31m[Ke-[m[K>time;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K537[m[K[36m[K:[m[K  const struct external_potential *potential = [01;31m[Ke-[m[K>external_potential;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K538[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K539[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K622[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stats_collect_part_mapper, s->parts,
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K628[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stats_collect_spart_mapper, s->sparts,
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K634[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stats_collect_sink_mapper, s->sinks,
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K640[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stats_collect_bpart_mapper, s->bparts,
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K646[m[K[36m[K:[m[K    threadpool_map(&s->[01;31m[Ke-[m[K>threadpool, stats_collect_gpart_mapper, s->gparts,
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K857[m[K[36m[K:[m[K * @param a The current scal[01;31m[Ke-[m[Kfactor.
[35m[Kstatistics.c[m[K[36m[K:[m[K[32m[K859[m[K[36m[K:[m[K * @param step The current tim[01;31m[Ke-[m[Kstep.
[35m[Kstatistics.h[m[K[36m[K:[m[K[32m[K31[m[K[36m[K:[m[K/* Pr[01;31m[Ke-[m[Kdeclarations */
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1346[m[K[36m[K:[m[K  for (int i = 0; i < [01;31m[Ke-[m[K>nr_nodes; i++) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1349[m[K[36m[K:[m[K     * on[01;31m[Ke-[m[Kby-one. */
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1363[m[K[36m[K:[m[K              engine_rank, (long long int)[01;31m[Ke-[m[K>tic_step,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1364[m[K[36m[K:[m[K              (long long int)[01;31m[Ke-[m[K>toc_step, [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1365[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>s_updates, cpufreq);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1367[m[K[36m[K:[m[K      for (int l = 0; l < [01;31m[Ke-[m[K>sched.nr_tasks; l++) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1368[m[K[36m[K:[m[K        if (![01;31m[Ke-[m[K>sched.tasks[l].implicit &&
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1369[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>sched.tasks[l].tic > [01;31m[Ke-[m[K>tic_step) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1372[m[K[36m[K:[m[K              engine_rank, [01;31m[Ke-[m[K>sched.tasks[l].rid, [01;31m[Ke-[m[K>sched.tasks[l].type,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1373[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>sched.tasks[l].subtype, ([01;31m[Ke-[m[K>sched.tasks[l].cj == NULL),
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1374[m[K[36m[K:[m[K              (long long int)[01;31m[Ke-[m[K>sched.tasks[l].tic,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1375[m[K[36m[K:[m[K              (long long int)[01;31m[Ke-[m[K>sched.tasks[l].toc,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1376[m[K[36m[K:[m[K              ([01;31m[Ke-[m[K>sched.tasks[l].ci != NULL) ? [01;31m[Ke-[m[K>sched.tasks[l].ci->hydro.count
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1378[m[K[36m[K:[m[K              ([01;31m[Ke-[m[K>sched.tasks[l].cj != NULL) ? [01;31m[Ke-[m[K>sched.tasks[l].cj->hydro.count
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1380[m[K[36m[K:[m[K              ([01;31m[Ke-[m[K>sched.tasks[l].ci != NULL) ? [01;31m[Ke-[m[K>sched.tasks[l].ci->grav.count
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1382[m[K[36m[K:[m[K              ([01;31m[Ke-[m[K>sched.tasks[l].cj != NULL) ? [01;31m[Ke-[m[K>sched.tasks[l].cj->grav.count
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1384[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>sched.tasks[l].flags, [01;31m[Ke-[m[K>sched.tasks[l].sid);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1406[m[K[36m[K:[m[K          -1, -1, 1, (unsigned long long)[01;31m[Ke-[m[K>tic_step,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1407[m[K[36m[K:[m[K          (unsigned long long)[01;31m[Ke-[m[K>toc_step, [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1408[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>s_updates, 0, cpufreq);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1409[m[K[36m[K:[m[K  for (int l = 0; l < [01;31m[Ke-[m[K>sched.nr_tasks; l++) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1410[m[K[36m[K:[m[K    if (![01;31m[Ke-[m[K>sched.tasks[l].implicit && [01;31m[Ke-[m[K>sched.tasks[l].tic > [01;31m[Ke-[m[K>tic_step) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1413[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>sched.tasks[l].rid, [01;31m[Ke-[m[K>sched.tasks[l].type,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1414[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>sched.tasks[l].subtype, ([01;31m[Ke-[m[K>sched.tasks[l].cj == NULL),
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1415[m[K[36m[K:[m[K          (unsigned long long)[01;31m[Ke-[m[K>sched.tasks[l].tic,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1416[m[K[36m[K:[m[K          (unsigned long long)[01;31m[Ke-[m[K>sched.tasks[l].toc,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1417[m[K[36m[K:[m[K          ([01;31m[Ke-[m[K>sched.tasks[l].ci == NULL) ? 0
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1418[m[K[36m[K:[m[K                                         : [01;31m[Ke-[m[K>sched.tasks[l].ci->hydro.count,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1419[m[K[36m[K:[m[K          ([01;31m[Ke-[m[K>sched.tasks[l].cj == NULL) ? 0
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1420[m[K[36m[K:[m[K                                         : [01;31m[Ke-[m[K>sched.tasks[l].cj->hydro.count,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1421[m[K[36m[K:[m[K          ([01;31m[Ke-[m[K>sched.tasks[l].ci == NULL) ? 0 : [01;31m[Ke-[m[K>sched.tasks[l].ci->grav.count,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1422[m[K[36m[K:[m[K          ([01;31m[Ke-[m[K>sched.tasks[l].cj == NULL) ? 0 : [01;31m[Ke-[m[K>sched.tasks[l].cj->grav.count,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1423[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>sched.tasks[l].sid);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1429[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1485[m[K[36m[K:[m[K  double stepdt = (double)[01;31m[Ke-[m[K>toc_step - (double)[01;31m[Ke-[m[K>tic_step;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1488[m[K[36m[K:[m[K  for (int l = 0; l < [01;31m[Ke-[m[K>sched.nr_tasks; l++) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1489[m[K[36m[K:[m[K    int type = [01;31m[Ke-[m[K>sched.tasks[l].type;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1492[m[K[36m[K:[m[K    if (![01;31m[Ke-[m[K>sched.tasks[l].implicit && [01;31m[Ke-[m[K>sched.tasks[l].tic > [01;31m[Ke-[m[K>tic_step) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1493[m[K[36m[K:[m[K      int subtype = [01;31m[Ke-[m[K>sched.tasks[l].subtype;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1495[m[K[36m[K:[m[K      double dt = [01;31m[Ke-[m[K>sched.tasks[l].toc - [01;31m[Ke-[m[K>sched.tasks[l].tic;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1498[m[K[36m[K:[m[K      double tic = (double)[01;31m[Ke-[m[K>sched.tasks[l].tic;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1518[m[K[36m[K:[m[K        if ([01;31m[Ke-[m[K>verbose)
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1526[m[K[36m[K:[m[K          task_dump_all(e, [01;31m[Ke-[m[K>step + 1);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1600[m[K[36m[K:[m[K            double mintic = tmin[j][k] - [01;31m[Ke-[m[K>tic_step;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1601[m[K[36m[K:[m[K            double maxtic = tmax[j][k] - [01;31m[Ke-[m[K>tic_step;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1602[m[K[36m[K:[m[K            double meantic = tsum[j][k] / (double)count[j][k] - [01;31m[Ke-[m[K>tic_step;
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1620[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1647[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), "task_dump_MPI-step%d.dat_%d", [01;31m[Ke-[m[K>step,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1648[m[K[36m[K:[m[K           [01;31m[Ke-[m[K>nodeID);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1650[m[K[36m[K:[m[K  snprintf(dumpfile, sizeof(dumpfile), "task_dump-step%d.dat", [01;31m[Ke-[m[K>step);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1663[m[K[36m[K:[m[K          engine_rank, (long long int)[01;31m[Ke-[m[K>tic_step, (long long int)[01;31m[Ke-[m[K>toc_step,
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1664[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>updates, [01;31m[Ke-[m[K>g_updates, [01;31m[Ke-[m[K>s_updates, cpufreq);
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1666[m[K[36m[K:[m[K  for (int l = 0; l < [01;31m[Ke-[m[K>sched.nr_tasks; l++) {
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1667[m[K[36m[K:[m[K    struct task *t = &[01;31m[Ke-[m[K>sched.tasks[l];
[35m[Ktask.c[m[K[36m[K:[m[K[32m[K1690[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kthreadpool.c[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K  /* Check if we need to r[01;31m[Ke-[m[Kallocate the log buffer. */
[35m[Kthreadpool.c[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K      error("Failed to r[01;31m[Ke-[m[Kallocate mapper log.");
[35m[Kthreadpool.c[m[K[36m[K:[m[K[32m[K351[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Ksets the log for this #threadpool.
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K41[m[K[36m[K:[m[K/*! Fictious tim[01;31m[Ke-[m[Kbin to hold inhibited particles */
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K/*! Fictious tim[01;31m[Ke-[m[Kbin to hold particles not yet created */
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K/*! Fictitious tim[01;31m[Ke-[m[Kbin for particles not awaken */
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K/* Maximal difference in tim[01;31m[Ke-[m[Kbins between neighbouring particles */
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K * @param time_base the minimal tim[01;31m[Ke-[m[Kstep size of the simulation.
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K96[m[K[36m[K:[m[K * @brief Returns the integer time corresponding to the start of the tim[01;31m[Ke-[m[Kstep
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K97[m[K[36m[K:[m[K * given by a tim[01;31m[Ke-[m[Kbin.
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K * @brief Returns the integer time corresponding to the start of the tim[01;31m[Ke-[m[Kstep
[35m[Ktimeline.h[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K * given by a tim[01;31m[Ke-[m[Kbin.
[35m[Ktimers.c[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K * @brief R[01;31m[Ke-[m[Kset all the timers.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[K * @brief Compute a valid integer tim[01;31m[Ke-[m[Kstep form a given tim[01;31m[Ke-[m[Kstep
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[K * We consider the minimal tim[01;31m[Ke-[m[Kbin of any neighbours and prevent particles
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K41[m[K[36m[K:[m[K * @param new_dt The tim[01;31m[Ke-[m[Kstep to convert.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K * @param min_ngb_bin Minimal tim[01;31m[Ke-[m[Kbin of any neighbour of this particle.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K * @param ti_current The current time on the integer tim[01;31m[Ke-[m[Kline.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K * @param time_base_inv The inverse of the system's minimal tim[01;31m[Ke-[m[Kstep.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  /* Current tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K  if (new_dti == 0) error("Computed an integer tim[01;31m[Ke-[m[Kstep of size 0");
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #gpart
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K102[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K103[m[K[36m[K:[m[K    new_dt_ext = external_gravity_timestep([01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K                                           [01;31m[Ke-[m[K>physical_constants, gp);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K107[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K109[m[K[36m[K:[m[K        gp, a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K115[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K118[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K122[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K    error("gpart (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)",
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K124[m[K[36m[K:[m[K          gp->id_or_neg_offset, new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K128[m[K[36m[K:[m[K      new_dt, gp->time_bin, num_time_bins, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time_base_inv);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #part
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K146[m[K[36m[K:[m[K      hydro_compute_timestep(p, xp, [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cooling)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K152[m[K[36m[K:[m[K        cooling_timestep([01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>hydro_properties, p, xp);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K160[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K162[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential, [01;31m[Ke-[m[K>physical_constants, p->gpart);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K164[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K166[m[K[36m[K:[m[K          p->gpart, p->a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K      chemistry_timestep([01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>internal_units,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K174[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>chemistry, p);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K    new_dt_radiation = rt_compute_timestep(p, [01;31m[Ke-[m[K>rt_props, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K188[m[K[36m[K:[m[K          ? fabsf([01;31m[Ke-[m[K>hydro_properties->log_max_h_change * p->h / p->force.h_dt)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K194[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K197[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K    error("part (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)", p->id,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K          new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K      new_dt, p->time_bin, p->limiter_data.min_ngb_time_bin, [01;31m[Ke-[m[K>ti_current,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K209[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>time_base_inv);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K215[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #part
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K229[m[K[36m[K:[m[K      hydro_compute_timestep(p, xp, [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K233[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cooling)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K235[m[K[36m[K:[m[K        cooling_timestep([01;31m[Ke-[m[K>cooling_func, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K236[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>internal_units, [01;31m[Ke-[m[K>hydro_properties, p, xp);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K243[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K245[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential, [01;31m[Ke-[m[K>physical_constants, p->gpart);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K247[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K249[m[K[36m[K:[m[K          p->gpart, p->a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K256[m[K[36m[K:[m[K      chemistry_timestep([01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>internal_units,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K                         [01;31m[Ke-[m[K>hydro_properties, [01;31m[Ke-[m[K>chemistry, p);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K261[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K    new_dt_radiation = rt_compute_timestep(p, [01;31m[Ke-[m[K>rt_props, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K270[m[K[36m[K:[m[K          ? fabsf([01;31m[Ke-[m[K>hydro_properties->log_max_h_change * p->h / p->force.h_dt)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K276[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K284[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K    error("part (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)", p->id,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K286[m[K[36m[K:[m[K          new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K289[m[K[36m[K:[m[K  /* Here we need to replace [01;31m[Ke-[m[K>ti_current */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K292[m[K[36m[K:[m[K   * [01;31m[Ke-[m[K>ti_current_subcycle, */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K  /*     [01;31m[Ke-[m[K>time_base_inv) / 4; */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K299[m[K[36m[K:[m[K                            p->limiter_data.min_ngb_time_bin, [01;31m[Ke-[m[K>ti_current,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K300[m[K[36m[K:[m[K                            [01;31m[Ke-[m[K>time_base_inv) /
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K308[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #spart
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K316[m[K[36m[K:[m[K  /* Stellar tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K318[m[K[36m[K:[m[K      sp, [01;31m[Ke-[m[K>stars_properties, ([01;31m[Ke-[m[K>policy & engine_policy_cosmology),
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K319[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>time);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K321[m[K[36m[K:[m[K  /* Gravity tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K324[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K325[m[K[36m[K:[m[K    new_dt_ext = external_gravity_timestep([01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K326[m[K[36m[K:[m[K                                           [01;31m[Ke-[m[K>physical_constants, sp->gpart);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K329[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K331[m[K[36m[K:[m[K        sp->gpart, a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_rt)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K335[m[K[36m[K:[m[K    new_dt_rt = rt_compute_spart_timestep(sp, [01;31m[Ke-[m[K>rt_props, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K341[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K344[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K347[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min) {
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K349[m[K[36m[K:[m[K    error("spart (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)", sp->id,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K350[m[K[36m[K:[m[K          new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K      new_dt, sp->time_bin, num_time_bins, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time_base_inv);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K361[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #bpart
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K369[m[K[36m[K:[m[K  /* Black hole internal tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K371[m[K[36m[K:[m[K      bp, [01;31m[Ke-[m[K>black_holes_properties, [01;31m[Ke-[m[K>physical_constants, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K373[m[K[36m[K:[m[K  /* Gravity tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K376[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K377[m[K[36m[K:[m[K    new_dt_ext = external_gravity_timestep([01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K378[m[K[36m[K:[m[K                                           [01;31m[Ke-[m[K>physical_constants, bp->gpart);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K381[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K383[m[K[36m[K:[m[K        bp->gpart, a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K389[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K392[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K395[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K396[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min) {
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K397[m[K[36m[K:[m[K    error("bpart (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)", bp->id,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K398[m[K[36m[K:[m[K          new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K403[m[K[36m[K:[m[K      new_dt, bp->time_bin, num_time_bins, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time_base_inv);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K409[m[K[36m[K:[m[K * @brief Compute the new (integer) tim[01;31m[Ke-[m[Kstep of a given #sink.
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K417[m[K[36m[K:[m[K  /* Sink tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K420[m[K[36m[K:[m[K  /* Gravity tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K423[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_external_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K    new_dt_ext = external_gravity_timestep([01;31m[Ke-[m[K>time, [01;31m[Ke-[m[K>external_potential,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K                                           [01;31m[Ke-[m[K>physical_constants, sink->gpart);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K428[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_self_gravity)
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K430[m[K[36m[K:[m[K        sink->gpart, a_hydro, [01;31m[Ke-[m[K>gravity_properties, [01;31m[Ke-[m[K>cosmology);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K436[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max_RMS_displacement);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K439[m[K[36m[K:[m[K  new_dt *= [01;31m[Ke-[m[K>cosmology->time_step_factor;
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K442[m[K[36m[K:[m[K  new_dt = min(new_dt, [01;31m[Ke-[m[K>dt_max);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K443[m[K[36m[K:[m[K  if (new_dt < [01;31m[Ke-[m[K>dt_min) {
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K444[m[K[36m[K:[m[K    error("sink (id=%lld) wants a tim[01;31m[Ke-[m[Kstep (%e) below dt_min (%e)", sink->id,
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K445[m[K[36m[K:[m[K          new_dt, [01;31m[Ke-[m[K>dt_min);
[35m[Ktimestep.h[m[K[36m[K:[m[K[32m[K450[m[K[36m[K:[m[K      new_dt, sink->time_bin, num_time_bins, [01;31m[Ke-[m[K>ti_current, [01;31m[Ke-[m[K>time_base_inv);
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K    error("Minimal tim[01;31m[Ke-[m[Kbin of neighbours is 0");
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K56[m[K[36m[K:[m[K * a new one such that the particle becomes active again in the next tim[01;31m[Ke-[m[Kstep.
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K * @param e The #engine (to extract tim[01;31m[Ke-[m[Kline information).
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K69[m[K[36m[K:[m[K  const int with_cosmology = [01;31m[Ke-[m[K>policy & engine_policy_cosmology;
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K70[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K       of its next tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K78[m[K[36m[K:[m[K    /* New tim[01;31m[Ke-[m[Kbin of this particle */
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K90[m[K[36m[K:[m[K       tim[01;31m[Ke-[m[Kstep, undo the "kick" operator and assign a new tim[01;31m[Ke-[m[Kstep size */
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K101[m[K[36m[K:[m[K    /* Length of the old and new tim[01;31m[Ke-[m[Kstep */
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K    if (ti_beg_old >= [01;31m[Ke-[m[K>ti_current)
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K121[m[K[36m[K:[m[K          "Incorrect value for old tim[01;31m[Ke-[m[Kstep beginning ti_current=%lld, "
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K123[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_current, ti_beg_old);
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K125[m[K[36m[K:[m[K    if (ti_end_old <= [01;31m[Ke-[m[K>ti_current)
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K127[m[K[36m[K:[m[K          "Incorrect value for old tim[01;31m[Ke-[m[Kstep end ti_current=%lld, "
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>ti_current, ti_end_old);
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K132[m[K[36m[K:[m[K      error("New beg of tim[01;31m[Ke-[m[Kstep before the old one");
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K    if (dti_new > dti_old) error("New tim[01;31m[Ke-[m[Kstep larger than old one");
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K154[m[K[36m[K:[m[K              dt_kick_therm, dt_kick_corr, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K155[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>entropy_floor, ti_end_half_old, ti_beg_old,
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K172[m[K[36m[K:[m[K              dt_kick_therm, dt_kick_corr, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K173[m[K[36m[K:[m[K              [01;31m[Ke-[m[K>entropy_floor, ti_beg_old, ti_beg_new, /*ti_start_mesh=*/-1,
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K178[m[K[36m[K:[m[K    /* New tim[01;31m[Ke-[m[Kbin of this particle */
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K    if (new_bin > [01;31m[Ke-[m[K>max_active_bin) {
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K                dt_kick_therm, dt_kick_corr, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Ktimestep_limiter.h[m[K[36m[K:[m[K[32m[K203[m[K[36m[K:[m[K                [01;31m[Ke-[m[K>entropy_floor, ti_beg_new, ti_end_half_new,
[35m[Ktimestep_limiter_iact.h[m[K[36m[K:[m[K[32m[K39[m[K[36m[K:[m[K  /* Update the minimal tim[01;31m[Ke-[m[Kbin */
[35m[Ktimestep_limiter_iact.h[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K  /* Update the minimal tim[01;31m[Ke-[m[Kbin */
[35m[Ktimestep_limiter_struct.h[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K * @brief #part-carried quantities for the tim[01;31m[Ke-[m[Kstep limiter
[35m[Ktimestep_limiter_struct.h[m[K[36m[K:[m[K[32m[K41[m[K[36m[K:[m[K  /*! Minimal tim[01;31m[Ke-[m[Kbin across all neighbours */
[35m[Ktimestep_limiter_struct.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K  /* Do we want this particle to be synched back on the tim[01;31m[Ke-[m[Kline? */
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K31[m[K[36m[K:[m[K * tim[01;31m[Ke-[m[Kline.
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K * time. The particle is then ready to compute a new tim[01;31m[Ke-[m[Kstep and proceed with
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K  const int with_cosmology = ([01;31m[Ke-[m[K>policy & engine_policy_cosmology);
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K47[m[K[36m[K:[m[K  const integertime_t ti_current = [01;31m[Ke-[m[K>ti_current;
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K  const timebin_t max_active_bin = [01;31m[Ke-[m[K>max_active_bin;
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K49[m[K[36m[K:[m[K  const timebin_t min_active_bin = [01;31m[Ke-[m[K>min_active_bin;
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[K  const double time_base = [01;31m[Ke-[m[K>time_base;
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K59[m[K[36m[K:[m[K  /* We want to make the particle finish it's tim[01;31m[Ke-[m[Kstep now. */
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K61[m[K[36m[K:[m[K  /* Start by recovering the start and end point of the particle's tim[01;31m[Ke-[m[Kstep. */
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K  /* Old tim[01;31m[Ke-[m[Kstep length on the tim[01;31m[Ke-[m[Kline */
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K  /* The actual tim[01;31m[Ke-[m[Kstep size this particle will use */
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K81[m[K[36m[K:[m[K        "Incorrect value for old tim[01;31m[Ke-[m[Kstep beginning ti_current=%lld, "
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K87[m[K[36m[K:[m[K        "Incorrect value for old tim[01;31m[Ke-[m[Kstep end ti_current=%lld, "
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K  if (new_ti_end > old_ti_end) error("New end of tim[01;31m[Ke-[m[Kstep after the old one");
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K  if (new_dti > old_dti) error("New tim[01;31m[Ke-[m[Kstep larger than old one");
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K            dt_kick_therm, dt_kick_corr, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>entropy_floor, ti_end_half_old, old_ti_beg,
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K            dt_kick_therm, dt_kick_corr, [01;31m[Ke-[m[K>cosmology, [01;31m[Ke-[m[K>hydro_properties,
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K            [01;31m[Ke-[m[K>entropy_floor, new_ti_beg, new_ti_end,
[35m[Ktimestep_sync.h[m[K[36m[K:[m[K[32m[K134[m[K[36m[K:[m[K  /* The particle is now ready to compute its new tim[01;31m[Ke-[m[Kstep size and for the
[35m[Ktimestep_sync_part.h[m[K[36m[K:[m[K[32m[K26[m[K[36m[K:[m[K * @brief Flag a particle for synchronization on the tim[01;31m[Ke-[m[Kline.
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K76[m[K[36m[K:[m[K *      a brut[01;31m[Ke-[m[Kforce O(N^2) computation.
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K199[m[K[36m[K:[m[K  const double dim[3] = {r->[01;31m[Ke-[m[K>s->dim[0], r->[01;31m[Ke-[m[K>s->dim[1], r->[01;31m[Ke-[m[K>s->dim[2]};
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K201[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K205[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K  /* Reverse doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K  const double dim[3] = {r->[01;31m[Ke-[m[K>s->dim[0], r->[01;31m[Ke-[m[K>s->dim[1], r->[01;31m[Ke-[m[K>s->dim[2]};
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K281[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K285[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K318[m[K[36m[K:[m[K  /* Reverse doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K357[m[K[36m[K:[m[K  const double dim[3] = {r->[01;31m[Ke-[m[K>s->dim[0], r->[01;31m[Ke-[m[K>s->dim[1], r->[01;31m[Ke-[m[K>s->dim[2]};
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K359[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K363[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K396[m[K[36m[K:[m[K  /* Reverse doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K  const double dim[3] = {r->[01;31m[Ke-[m[K>s->dim[0], r->[01;31m[Ke-[m[K>s->dim[1], r->[01;31m[Ke-[m[K>s->dim[2]};
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K436[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K440[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K474[m[K[36m[K:[m[K  /* Reverse doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K513[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K517[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K571[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K575[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K623[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K627[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K665[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K669[m[K[36m[K:[m[K  /* Implements a doubl[01;31m[Ke-[m[Kfor loop and checks every interaction */
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K704[m[K[36m[K:[m[K * @brief Compute the force on a single particle brut[01;31m[Ke-[m[Kforce.
[35m[Ktools.c[m[K[36m[K:[m[K[32m[K1068[m[K[36m[K:[m[K * Doesn't try to r[01;31m[Ke-[m[Kcreate an existing directory and makes sure that it can
[35m[Kunits.c[m[K[36m[K:[m[K[32m[K232[m[K[36m[K:[m[K * @param baseUnitsExp (return) The array of bas[01;31m[Ke-[m[Kunit exponents.
[35m[Kunits.c[m[K[36m[K:[m[K[32m[K481[m[K[36m[K:[m[K      error("Invalid choice of pr[01;31m[Ke-[m[Kdefined units");
[35m[Kunits.c[m[K[36m[K:[m[K[32m[K578[m[K[36m[K:[m[K * @param scale_factor_exponent The scal[01;31m[Ke-[m[Kfactor exponent to use to convert this
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K456[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,0,5)!} = 1/(0!*0!*5!) = 1/120 = 8.333333[01;31m[Ke-[m[K03 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K463[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K03 * v[2] * v[2] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K470[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,1,4)!} = 1/(0!*1!*4!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K477[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[1] * v[2] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K484[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,2,3)!} = 1/(0!*2!*3!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K491[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[1] * v[1] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K498[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,3,2)!} = 1/(0!*3!*2!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K505[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[1] * v[1] * v[1] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K512[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,4,1)!} = 1/(0!*4!*1!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K519[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[1] * v[1] * v[1] * v[1] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K526[m[K[36m[K:[m[K * and \f$ \frac{1}{(0,5,0)!} = 1/(0!*5!*0!) = 1/120 = 8.333333[01;31m[Ke-[m[K03 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K03 * v[1] * v[1] * v[1] * v[1] * v[1];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K540[m[K[36m[K:[m[K * and \f$ \frac{1}{(1,0,4)!} = 1/(1!*0!*4!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K547[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[0] * v[2] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K554[m[K[36m[K:[m[K * and \f$ \frac{1}{(1,1,3)!} = 1/(1!*1!*3!) = 1/6 = 1.666667[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K561[m[K[36m[K:[m[K  return 1.666666666666667[01;31m[Ke-[m[K01 * v[0] * v[1] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K568[m[K[36m[K:[m[K * and \f$ \frac{1}{(1,2,2)!} = 1/(1!*2!*2!) = 1/4 = 2.500000[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K575[m[K[36m[K:[m[K  return 2.500000000000000[01;31m[Ke-[m[K01 * v[0] * v[1] * v[1] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K582[m[K[36m[K:[m[K * and \f$ \frac{1}{(1,3,1)!} = 1/(1!*3!*1!) = 1/6 = 1.666667[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K589[m[K[36m[K:[m[K  return 1.666666666666667[01;31m[Ke-[m[K01 * v[0] * v[1] * v[1] * v[1] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K596[m[K[36m[K:[m[K * and \f$ \frac{1}{(1,4,0)!} = 1/(1!*4!*0!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K603[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[0] * v[1] * v[1] * v[1] * v[1];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K610[m[K[36m[K:[m[K * and \f$ \frac{1}{(2,0,3)!} = 1/(2!*0!*3!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K617[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[0] * v[0] * v[2] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K624[m[K[36m[K:[m[K * and \f$ \frac{1}{(2,1,2)!} = 1/(2!*1!*2!) = 1/4 = 2.500000[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K631[m[K[36m[K:[m[K  return 2.500000000000000[01;31m[Ke-[m[K01 * v[0] * v[0] * v[1] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K638[m[K[36m[K:[m[K * and \f$ \frac{1}{(2,2,1)!} = 1/(2!*2!*1!) = 1/4 = 2.500000[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K645[m[K[36m[K:[m[K  return 2.500000000000000[01;31m[Ke-[m[K01 * v[0] * v[0] * v[1] * v[1] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K652[m[K[36m[K:[m[K * and \f$ \frac{1}{(2,3,0)!} = 1/(2!*3!*0!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K659[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[0] * v[0] * v[1] * v[1] * v[1];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K666[m[K[36m[K:[m[K * and \f$ \frac{1}{(3,0,2)!} = 1/(3!*0!*2!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K673[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[0] * v[0] * v[0] * v[2] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K680[m[K[36m[K:[m[K * and \f$ \frac{1}{(3,1,1)!} = 1/(3!*1!*1!) = 1/6 = 1.666667[01;31m[Ke-[m[K01 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K687[m[K[36m[K:[m[K  return 1.666666666666667[01;31m[Ke-[m[K01 * v[0] * v[0] * v[0] * v[1] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K694[m[K[36m[K:[m[K * and \f$ \frac{1}{(3,2,0)!} = 1/(3!*2!*0!) = 1/12 = 8.333333[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K701[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K02 * v[0] * v[0] * v[0] * v[1] * v[1];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K708[m[K[36m[K:[m[K * and \f$ \frac{1}{(4,0,1)!} = 1/(4!*0!*1!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K715[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[0] * v[0] * v[0] * v[0] * v[2];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K722[m[K[36m[K:[m[K * and \f$ \frac{1}{(4,1,0)!} = 1/(4!*1!*0!) = 1/24 = 4.166667[01;31m[Ke-[m[K02 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K729[m[K[36m[K:[m[K  return 4.166666666666666[01;31m[Ke-[m[K02 * v[0] * v[0] * v[0] * v[0] * v[1];
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K736[m[K[36m[K:[m[K * and \f$ \frac{1}{(5,0,0)!} = 1/(5!*0!*0!) = 1/120 = 8.333333[01;31m[Ke-[m[K03 \f$
[35m[Kvector_power.h[m[K[36m[K:[m[K[32m[K743[m[K[36m[K:[m[K  return 8.333333333333333[01;31m[Ke-[m[K03 * v[0] * v[0] * v[0] * v[0] * v[0];
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K257[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K269[m[K[36m[K:[m[K  const struct cosmology *cosmo = [01;31m[Ke-[m[K>cosmology;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K270[m[K[36m[K:[m[K  const struct hydro_props *hydro_props = [01;31m[Ke-[m[K>hydro_properties;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K271[m[K[36m[K:[m[K  const struct unit_system *us = [01;31m[Ke-[m[K>internal_units;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K272[m[K[36m[K:[m[K  const struct phys_const *phys_const = [01;31m[Ke-[m[K>physical_constants;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K273[m[K[36m[K:[m[K  const struct cooling_function_data *cool_func = [01;31m[Ke-[m[K>cooling_func;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K295[m[K[36m[K:[m[K    swift_parts[i].task = [01;31m[Ke-[m[K>nodeID;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K  const struct unit_system *swift_us = [01;31m[Ke-[m[K>internal_units;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K386[m[K[36m[K:[m[K  unit_info.gravity = [01;31m[Ke-[m[K>physical_constants->const_newton_G;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K387[m[K[36m[K:[m[K  unit_info.hubbleunit = [01;31m[Ke-[m[K>cosmology->H0 / [01;31m[Ke-[m[K>cosmology->h;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K393[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K400[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>s->with_DM_background) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K407[m[K[36m[K:[m[K  sim_info.idarkmatter = ([01;31m[Ke-[m[K>total_nr_gparts - [01;31m[Ke-[m[K>total_nr_parts > 0);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K408[m[K[36m[K:[m[K  sim_info.igas = ([01;31m[Ke-[m[K>policy & engine_policy_hydro);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K409[m[K[36m[K:[m[K  sim_info.istar = ([01;31m[Ke-[m[K>policy & engine_policy_stars);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K  sim_info.ibh = ([01;31m[Ke-[m[K>policy & engine_policy_black_holes);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K414[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K425[m[K[36m[K:[m[K    message("VELOCIraptor conf: Config file name: %s", [01;31m[Ke-[m[K>stf_config_file_name);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K431[m[K[36m[K:[m[K  if (InitVelociraptor([01;31m[Ke-[m[K>stf_config_file_name, unit_info, sim_info,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K432[m[K[36m[K:[m[K                       [01;31m[Ke-[m[K>nr_threads) != 1)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K435[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K531[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K533[m[K[36m[K:[m[K  const struct gpart *gparts = [01;31m[Ke-[m[K>s->gparts;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K542[m[K[36m[K:[m[K  const struct unit_system *internal_units = [01;31m[Ke-[m[K>internal_units;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K543[m[K[36m[K:[m[K  const struct unit_system *snapshot_units = [01;31m[Ke-[m[K>snapshot_units;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K606[m[K[36m[K:[m[K  const int write_metadata = [01;31m[Ke-[m[K>nodeID == 0;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K609[m[K[36m[K:[m[K  const int filenum = [01;31m[Ke-[m[K>nodeID;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K611[m[K[36m[K:[m[K  const int num_files = [01;31m[Ke-[m[K>nr_nodes;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K734[m[K[36m[K:[m[K  const struct space *s = [01;31m[Ke-[m[K>s;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K755[m[K[36m[K:[m[K  cosmo_info.atime = [01;31m[Ke-[m[K>cosmology->a;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K756[m[K[36m[K:[m[K  cosmo_info.littleh = [01;31m[Ke-[m[K>cosmology->h;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K757[m[K[36m[K:[m[K  cosmo_info.Omega_m = [01;31m[Ke-[m[K>cosmology->Omega_cdm + [01;31m[Ke-[m[K>cosmology->Omega_b;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K758[m[K[36m[K:[m[K  cosmo_info.Omega_b = [01;31m[Ke-[m[K>cosmology->Omega_b;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K759[m[K[36m[K:[m[K  cosmo_info.Omega_r = [01;31m[Ke-[m[K>cosmology->Omega_r;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K760[m[K[36m[K:[m[K  cosmo_info.Omega_k = [01;31m[Ke-[m[K>cosmology->Omega_k;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K761[m[K[36m[K:[m[K  cosmo_info.Omega_nu = [01;31m[Ke-[m[K>cosmology->Omega_nu_0;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K762[m[K[36m[K:[m[K  cosmo_info.Omega_Lambda = [01;31m[Ke-[m[K>cosmology->Omega_lambda;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K763[m[K[36m[K:[m[K  cosmo_info.Omega_cdm = [01;31m[Ke-[m[K>cosmology->Omega_cdm;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K764[m[K[36m[K:[m[K  cosmo_info.w_de = [01;31m[Ke-[m[K>cosmology->w;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K767[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K782[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>s->periodic) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K792[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>policy & engine_policy_cosmology) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K796[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>s->with_DM_background) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K804[m[K[36m[K:[m[K    for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_gparts; ++i) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K805[m[K[36m[K:[m[K      const struct gpart *gp = &[01;31m[Ke-[m[K>s->gparts[i];
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K821[m[K[36m[K:[m[K    const double Omega_cdm = [01;31m[Ke-[m[K>cosmology->Omega_cdm;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K822[m[K[36m[K:[m[K    const double Omega_b = [01;31m[Ke-[m[K>cosmology->Omega_b;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K824[m[K[36m[K:[m[K    const double critical_density_0 = [01;31m[Ke-[m[K>cosmology->critical_density_0;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K847[m[K[36m[K:[m[K  for (size_t i = 0; i < [01;31m[Ke-[m[K>s->nr_gparts; ++i) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K848[m[K[36m[K:[m[K    const struct gpart *gp = &[01;31m[Ke-[m[K>s->gparts[i];
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K906[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K922[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K927[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K935[m[K[36m[K:[m[K  if (strcmp([01;31m[Ke-[m[K>snapshot_subdir, engine_default_snapshot_subdir) != 0) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K937[m[K[36m[K:[m[K                 [01;31m[Ke-[m[K>snapshot_subdir) >= FILENAME_BUFFER_SIZE) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K940[m[K[36m[K:[m[K    if (engine_rank == 0) io_make_snapshot_subdir([01;31m[Ke-[m[K>snapshot_subdir);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K948[m[K[36m[K:[m[K  if (strcmp([01;31m[Ke-[m[K>stf_subdir_per_output, engine_default_stf_subdir_per_output) !=
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K951[m[K[36m[K:[m[K                 [01;31m[Ke-[m[K>stf_subdir_per_output,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K952[m[K[36m[K:[m[K                 [01;31m[Ke-[m[K>stf_output_count) >= FILENAME_BUFFER_SIZE) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K968[m[K[36m[K:[m[K               subDirName, [01;31m[Ke-[m[K>stf_base_name,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K969[m[K[36m[K:[m[K               [01;31m[Ke-[m[K>stf_output_count) >= FILENAME_BUFFER_SIZE) {
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K983[m[K[36m[K:[m[K  threadpool_map(&[01;31m[Ke-[m[K>threadpool, velociraptor_convert_particles_mapper,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K988[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K  sprintf(report_filename, "memus[01;31m[Ke-[m[KVR-report-rank%d-step%d.txt", [01;31m[Ke-[m[K>nodeID,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K997[m[K[36m[K:[m[K          [01;31m[Ke-[m[K>step);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1010[m[K[36m[K:[m[K      [01;31m[Ke-[m[K>stf_output_count, outputFileName, cosmo_info, sim_info, nr_gparts,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1011[m[K[36m[K:[m[K      nr_parts, nr_sparts, swift_parts, cell_node_ids, [01;31m[Ke-[m[K>nr_threads,
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1027[m[K[36m[K:[m[K    error("Exiting. Call to VELOCIraptor failed on rank: %d.", [01;31m[Ke-[m[K>nodeID);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1042[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1067[m[K[36m[K:[m[K    if ([01;31m[Ke-[m[K>verbose)
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1080[m[K[36m[K:[m[K      struct gpart *const gp = &([01;31m[Ke-[m[K>s->gparts[most_bound_index[i]]);
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1087[m[K[36m[K:[m[K  if ([01;31m[Ke-[m[K>verbose) message("Writing out orphan particles");
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1100[m[K[36m[K:[m[K  if (!linked_with_snap) [01;31m[Ke-[m[K>stf_output_count++;
[35m[Kvelociraptor_interface.c[m[K[36m[K:[m[K[32m[K1103[m[K[36m[K:[m[K  [01;31m[Ke-[m[K>stf_this_timestep = 1;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[K    const ptrdiff_t offset = p->gpart - [01;31m[Ke-[m[K>s->gparts;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[K    *ret = ([01;31m[Ke-[m[K>s->gpart_group_data + offset)->groupID;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K43[m[K[36m[K:[m[K    const ptrdiff_t offset = sp->gpart - [01;31m[Ke-[m[K>s->gparts;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K44[m[K[36m[K:[m[K    *ret = ([01;31m[Ke-[m[K>s->gpart_group_data + offset)->groupID;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K54[m[K[36m[K:[m[K    const ptrdiff_t offset = bp->gpart - [01;31m[Ke-[m[K>s->gparts;
[35m[Kvelociraptor_io.h[m[K[36m[K:[m[K[32m[K55[m[K[36m[K:[m[K    *ret = ([01;31m[Ke-[m[K>s->gpart_group_data + offset)->groupID;
[35m[Kversion.c[m[K[36m[K:[m[K[32m[K424[m[K[36m[K:[m[K  sprintf(version, "j[01;31m[Ke-[m[Kmalloc");
[35m[Kversion.c[m[K[36m[K:[m[K[32m[K449[m[K[36m[K:[m[K    printf(" SPH With Inter-dependent Fin[01;31m[Ke-[m[Kgrained Tasking\n\n");
[35m[Kversion.c[m[K[36m[K:[m[K[32m[K458[m[K[36m[K:[m[K        " SPH With Inter-dependent Fin[01;31m[Ke-[m[Kgrained Tasking - "
[35m[Kxmf.c[m[K[36m[K:[m[K[32m[K60[m[K[36m[K:[m[K    /* Find on[01;31m[Ke-[m[Kbefor[01;31m[Ke-[m[Klast slash */
